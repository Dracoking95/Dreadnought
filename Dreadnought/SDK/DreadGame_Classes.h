#pragma once

/**
 * Name: Dreadnought
 * Version: Latest
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class DreadGame.YWebImage
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class UYWebImage : public UObject
	{
	public:
		unsigned char                                              UnknownData_Z184[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          m_texture2D;                                             // 0x00A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GUR1[0x28];                                  // 0x00A8(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YImageLoader
	 * Size -> 0x00D8 (FullSize[0x0100] - InheritedSize[0x0028])
	 */
	class UYImageLoader : public UObject
	{
	public:
		TMap<class FString, class UYWebImage*>                     m_webImagesMap;                                          // 0x0028(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CR4N[0x88];                                  // 0x0078(0x0088) MISSED OFFSET (PADDING)

	public:
		bool IsImageAvailable(const class FString& URL);
		class UTexture2D* GetImageTexture(const class FString& URL);
		class UYWebImage* GetImage(class UObject* WorldContextObject, const class FString& URL);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.DreadAsyncTaskDownloadImage
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UDreadAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
	{
	public:
		class FScriptMulticastDelegate                             OnSuccess;                                               // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailure;                                               // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H04I[0x10];                                  // 0x0048(0x0010) MISSED OFFSET (PADDING)

	public:
		class UDreadAsyncTaskDownloadImage* STATIC_DownloadImage(class UObject* WorldContextObject, class UYImageLoader* imageLoader, const class FString& URL);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.IdleKickManager
	 * Size -> 0x01F8 (FullSize[0x0220] - InheritedSize[0x0028])
	 */
	class UIdleKickManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_QFTD[0x1F8];                                 // 0x0028(0x01F8) MISSED OFFSET (PADDING)

	public:
		void HandlePlayerActionTaken();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.LegalItemsManager
	 * Size -> 0x01E8 (FullSize[0x0210] - InheritedSize[0x0028])
	 */
	class ULegalItemsManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_UB1A[0x1E8];                                 // 0x0028(0x01E8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.LoginGateManager
	 * Size -> 0x0498 (FullSize[0x04C0] - InheritedSize[0x0028])
	 */
	class ULoginGateManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_DQEQ[0x498];                                 // 0x0028(0x0498) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.MarketManager
	 * Size -> 0x0178 (FullSize[0x01A0] - InheritedSize[0x0028])
	 */
	class UMarketManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_IJOL[0x178];                                 // 0x0028(0x0178) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YUIData
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UYUIData : public UObject
	{
	public:
		TArray<struct FYMPGameMap>                                 m_multiplayerMaps;                                       // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYLoadingScreenGameModeData>                 m_loadingScreenGameModeData;                             // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TAssetPtr<class UTexture2D>                                m_outpostLoadingScreen;                                  // 0x0048(0x001C) ELEMENT_SIZE_MISMATCH Edit, Transient, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BHGN[0x4];                                   // 0x0064(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TArray<struct FYGameMap>                                   m_PVEEvents;                                             // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYMPGameMap>                                 m_havocMaps;                                             // 0x0078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class FText>                                        m_bugReporterIssueTypes;                                 // 0x0088(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYMenuGameModeDefinition>                    m_availableGameModeList;                                 // 0x0098(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FYMenuGameModeDefinition>                    m_gameModeList;                                          // 0x00A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FYMenuFleetTypeDetail>                       m_fleetTypeList;                                         // 0x00B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIManufacturerInformationEntry>            m_manufacturerEntries;                                   // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.SocialManager
	 * Size -> 0x02B8 (FullSize[0x02E0] - InheritedSize[0x0028])
	 */
	class USocialManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_9KKI[0x2B8];                                 // 0x0028(0x02B8) MISSED OFFSET (PADDING)

	public:
		void OnStoredPlayersDisplayInformationUpdated();
		void OnPlayerDataAvailable();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.WebServiceSessionManager
	 * Size -> 0x0228 (FullSize[0x0250] - InheritedSize[0x0028])
	 */
	class UWebServiceSessionManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_MSYQ[0x228];                                 // 0x0028(0x0228) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.Widget_VerticalModuleList
	 * Size -> 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
	 */
	class UWidget_VerticalModuleList : public UUserWidget
	{
	public:
		float GetYPosFromScrollOffset(float scrollOffset, float listHieght, float itemHeight, float listLength);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.Y3dArrowComponent
	 * Size -> 0x0020 (FullSize[0x0670] - InheritedSize[0x0650])
	 */
	class UY3dArrowComponent : public UPrimitiveComponent
	{
	public:
		struct FVector                                             m_arrowStart;                                            // 0x0650(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             m_arrowVector;                                           // 0x065C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_arrowPointSize;                                        // 0x0668(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HO4S[0x4];                                   // 0x066C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YItemIDRegister
	 * Size -> 0x0168 (FullSize[0x0190] - InheritedSize[0x0028])
	 */
	class UYItemIDRegister : public UObject
	{
	public:
		class FString                                              m_registerConfigPath;                                    // 0x0028(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_58Y6[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_itemIDTableConfigPath;                                 // 0x0048(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2IFU[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class FString>                               m_registerCache;                                         // 0x0068(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		struct FDateTime                                           m_registerCacheUpdateTime;                               // 0x00B8(0x0008) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		struct FDateTime                                           m_itemIDTableUpdateTime;                                 // 0x00C0(0x0008) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UFJ6[0x80];                                  // 0x00C8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_autoSaveTime;                                          // 0x0148(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_autoCheckoutTries;                                     // 0x014C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_developerMode;                                         // 0x0150(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DAKX[0x7];                                   // 0x0151(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_autoCheckinCommentIdTable;                             // 0x0158(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              m_autoCheckinCommentIdRegister;                          // 0x0168(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_autoCheckoutRegisterTriesLeft;                         // 0x0178(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_autoCheckoutItemIDListTriesLeft;                       // 0x017C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SJ77[0x10];                                  // 0x0180(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateFromRegisterBuffer();
		void UpdateFromItemIDListBuffer();
		void SaveToFiles();
		void RepeatCheckoutRegisterFile();
		void OnCheckedOutReattemptSuceeded__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInterface_ItemIDAsset
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYInterface_ItemIDAsset : public UInterface
	{
	public:
		bool IsPublicReady();
		bool IsInternalOnly();
		bool HasMarket3DPreview();
		class FText GetToolTipSubline();
		class FString GetToolTipIconPath();
		class FText GetToolTipHeadline();
		class FText GetToolTipDescription();
		EYQualityLevel GetQualityLevel();
		struct FYItemUIData GetItemUIData();
		int32_t GetItemTier();
		struct FYItemMetaData GetItemMetaData();
		int32_t GetItemID();
		class FString GetHighResIconPath();
		class FText GetDetailedDescription();
		TArray<EYShipClass> GetCompatibleShipClasses();
		class FString BuildDebugString();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYDataTable : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeaponDataTable
	 * Size -> 0x0018 (FullSize[0x00A0] - InheritedSize[0x0088])
	 */
	class UYWeaponDataTable : public UYDataTable
	{
	public:
		class FString                                              m_tablePath;                                             // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObjectLibrary*                                      m_objectLibrary;                                         // 0x0098(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeapon
	 * Size -> 0x0510 (FullSize[0x08D0] - InheritedSize[0x03C0])
	 */
	class AYWeapon : public AActor
	{
	public:
		unsigned char                                              UnknownData_GF79[0x10];                                  // 0x03C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_internalName;                                          // 0x03D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G1DR[0x18];                                  // 0x03D8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYWeaponStateInfo                                   m_weaponStateInfo;                                       // 0x03F0(0x0014) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_40ED[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              m_mesh;                                                  // 0x0408(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYWeaponDataTableRow                                m_dataTableRow;                                          // 0x0410(0x00D0) Transient, Protected, NativeAccessSpecifierProtected
		class FString                                              m_name;                                                  // 0x04E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_chargeUpTime;                                          // 0x04F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_coolDownTime;                                          // 0x04F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_amplifiedCoolDownMultiplierTime;                       // 0x04F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_maxRange;                                              // 0x04FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QCAW[0x8];                                   // 0x0500(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_amplifiedEnergyCost;                                   // 0x0508(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYWeaponAngleInfo                                   m_angleInfo;                                             // 0x050C(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYWeaponAngleInfo                                   m_angleInfoOverride;                                     // 0x052C(0x0020) Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       m_autoFire;                                              // 0x054C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_disableAnimation;                                      // 0x054D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HP14[0x2];                                   // 0x054E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_owningPawn;                                            // 0x0550(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AController*                                         m_owningController;                                      // 0x0558(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_63EY[0x1];                                   // 0x0560(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bIgnoreIsOnTarget;                                     // 0x0561(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_bIgnorePitchIsOnTarget;                                // 0x0562(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isAbilityWeapon;                                       // 0x0563(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1CA3[0x55];                                  // 0x0564(0x0055) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_exportedForLoadouts;                                   // 0x05B9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7ZT4[0x2];                                   // 0x05BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_cameraShakeDelay;                                      // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              m_description;                                           // 0x05C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_estimateRange;                                         // 0x05D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_estimateDamage;                                        // 0x05D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_estimateFireRate;                                      // 0x05D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYSlotType                                                 m_slotType;                                              // 0x05DC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CKVC[0x3];                                   // 0x05DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_ammoMagazinSize;                                       // 0x05E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_ammoMagazinReloadTime;                                 // 0x05E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_spreadBaseValue;                                       // 0x05E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_spreadMaxValue;                                        // 0x05EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_spreadEase;                                            // 0x05F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_spreadBonusAim;                                        // 0x05F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_spreadPenaltyMovement;                                 // 0x05F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_spreadPenaltyShooting;                                 // 0x05FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_spreadPenaltyDamageMultiplier;                         // 0x0600(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipBaseClass                                            m_intendedShipClass;                                     // 0x0604(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IA2N[0xB];                                   // 0x0605(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          m_abilityDataTable;                                      // 0x0610(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WYK4[0xC];                                   // 0x0618(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_weaponGroup;                                           // 0x0624(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_debugDisableDataTable;                                 // 0x0628(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EYTeam                                                     m_unownedWeaponTeam;                                     // 0x0629(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_ignoreTargetVolumes;                                   // 0x062A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T88N[0x5];                                   // 0x062B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_socketToAttach;                                        // 0x0630(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_camDistance;                                           // 0x0638(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_zoomedCamDistance;                                     // 0x063C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_zoomedCameraFOV;                                       // 0x0640(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_zoomedMouseSensitivity;                                // 0x0644(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_zoomedGamepadSensitivityX;                             // 0x0648(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_zoomedGamepadSensitivityY;                             // 0x064C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useAlternateCameraZoom;                                // 0x0650(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EYWeaponAssistedTargetState                                m_assistedTargetingState;                                // 0x0651(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YZU2[0x2];                                   // 0x0652(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_preciseAimingRange;                                    // 0x0654(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_animTimeMidDistance;                                   // 0x0658(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxNearDistance;                                       // 0x065C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OPZP[0x4];                                   // 0x0660(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxMidDistance;                                        // 0x0664(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6J6W[0x8];                                   // 0x0668(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_audioEventGroupBeginFire;                              // 0x0670(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventWeaponBeginFire;                             // 0x0678(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioGroupShot;                                        // 0x0680(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventWeaponShot;                                  // 0x0688(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventBarrelShot;                                  // 0x0690(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventWeaponEndFire;                               // 0x0698(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventGroupEndFire;                                // 0x06A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventOutOfAngle;                                  // 0x06A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TAssetPtr<class UClass>                                    m_previousTierWeapon;                                    // 0x06B0(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XYV7[0x4];                                   // 0x06CC(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_CQWE[0x5];                                   // 0x06D0(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYMeshComponentOptimizationLevel                           m_meshComponentOptimizationLevel;                        // 0x06D5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G32Z[0x2];                                   // 0x06D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_firingCameraShake;                                     // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponSelected;                                        // 0x06E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponDeselected;                                      // 0x06F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponStartReloading;                                  // 0x0700(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponStopReloading;                                   // 0x0710(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponReady;                                           // 0x0720(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponCharging;                                        // 0x0730(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponFiring;                                          // 0x0740(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponCoolingdown;                                     // 0x0750(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UCurveFloat*                                         m_damageIndicatorCurve;                                  // 0x0760(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0768(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0838(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ASHX[0x5];                                   // 0x083B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0840(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2SNG[0x68];                                  // 0x0868(0x0068) MISSED OFFSET (PADDING)

	public:
		void ReceiveReloadingStop();
		void ReceiveReloadingStart();
		void ReceiveReady();
		void ReceiveFiring(const struct FYTargetInfo& targetInfo, int32_t randomSeed);
		void ReceiveCoolingDown();
		void ReceiveCharging();
		void OnOwningPawnGetPossessed(class AYPawn* possessedPawn, class AController* possessingController);
		bool IsOnTarget();
		bool IsFiring();
		EYTeam GetTeam();
		struct FTransform GetShootingTransform(const class FName& SocketName);
		class AYPawn* GetOwningPawn();
		class AController* GetOwningController();
		int32_t GetCurrentRandomSeed();
		struct FVector GetAimAtLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbility
	 * Size -> 0x0300 (FullSize[0x0328] - InheritedSize[0x0028])
	 */
	class UYAbility : public UObject
	{
	public:
		unsigned char                                              UnknownData_9UU9[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYAbilityCategory                                          m_abilityCategory;                                       // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RR3R[0x17];                                  // 0x0031(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_audioAbilityActivated;                                 // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_audioAbilityDeactivated;                               // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_audioAbilityCancelled;                                 // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FYMergedGameplayComponentData                       m_mergeData;                                             // 0x0060(0x0030) Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class FName                                                m_triggerName;                                           // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYContextActionType                                        m_contextActionType;                                     // 0x0098(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_25KF[0x3];                                   // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_activeTime;                                            // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KEDV[0x4];                                   // 0x00A0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_coolDown;                                              // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_89EK[0xC];                                   // 0x00A8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_contextActionEndTime;                                  // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_contextActionStartTime;                                // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IBK9[0x5];                                   // 0x00BC(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTargetType                                               m_targetingType;                                         // 0x00C1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JH0N[0x2];                                   // 0x00C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxLockAngle;                                          // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_81X4[0x18];                                  // 0x00C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraShake*                                        m_triggeredCameraShake;                                  // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZVEP[0x5];                                   // 0x00E8(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYShipBaseClass                                            m_intendedShipClass;                                     // 0x00ED(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0AW4[0x2];                                   // 0x00EE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_abilityFiringCameraShake;                              // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_camShakeDelay;                                         // 0x00F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZZN2[0xC];                                   // 0x00FC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UClass>                                    m_previousTierAbilityBlueprint;                          // 0x0108(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9XQU[0x4];                                   // 0x0124(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UDataTable*                                          m_abilityDataTable;                                      // 0x0128(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        m_defaultAIAbilityActivationRules;                       // 0x0130(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCooldownStarted;                                       // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCooldownStartedOnAbility;                              // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCooldownExpired;                                       // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilityGetActivated;                                   // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilityGetDeactivated;                                 // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLockTarget;                                            // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLostTarget;                                            // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NRMT[0x4];                                   // 0x01B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_supply;                                                // 0x01B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_targetCreeps;                                          // 0x01B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_notifyEnemiesOnActivate;                               // 0x01B9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DI42[0x6];                                   // 0x01BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMesh*                                       m_mesh;                                                  // 0x01C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilityCooldownDone;                                   // 0x01C8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		EYMeshComponentOptimizationLevel                           m_meshComponentOptimizationLevel;                        // 0x01D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_69IZ[0x3];                                   // 0x01D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_meshMaxDrawDistance;                                   // 0x01DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9O5N[0x10];                                  // 0x01E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimBlueprintGeneratedClass*                        AnimBlueprintGeneratedClass;                             // 0x01F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EAnimationMode                                             AnimationMode;                                           // 0x01F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QA18[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_meshSocketTag;                                         // 0x0200(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_disableAnimations;                                     // 0x0208(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_playAnimationOnServer;                                 // 0x0209(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V8JG[0x6];                                   // 0x020A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_abilityName;                                           // 0x0210(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_abilityNameInternal;                                   // 0x0218(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M4FZ[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0228(0x00D0) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x02F8(0x0003) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BFLB[0x5];                                   // 0x02FB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0300(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void TriggerVOOnCooldownExpired();
		void TriggerCameraShake();
		void OnResetAbilityVisuals();
		void OnOwnerEnergyWheelFunctionActivated(EYEnergyWheelSelection EnergyWheelSelection);
		void OnOwnerDied();
		void OnInitialize();
		void OnCoolDownCompleted(class AYPawn* PawnOwner);
		void OnActorListReceived(TArray<class AActor*> Actors);
		void OnAbilityDeactivated(class AYPawn* PawnOwner);
		void OnAbilityCanceled(class AYPawn* PawnOwner);
		void OnAbilityActivated(class AYPawn* PawnOwner, bool abilitySucceeded);
		float GetUnmodifiedAbilityCoolDown();
		float GetTimeActive();
		TArray<class AActor*> GetTargets();
		int32_t GetSupply();
		class AYPawn* GetPawnOwner();
		int32_t GetDefaultSupply();
		float GetCurrentCoolDown();
		float GetCooldown();
		class FName GetAbilityNameInternal();
		class FName GetAbilityName();
		int32_t GetAbilityClassID();
		EYAbilityCategory GetAbilityCategory();
		void AsyncLoadAssetPtr(TAssetPtr<class UObject> Asset);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeaponGroup
	 * Size -> 0x0398 (FullSize[0x03C0] - InheritedSize[0x0028])
	 */
	class UYWeaponGroup : public UObject
	{
	public:
		unsigned char                                              UnknownData_2QEW[0x1];                                   // 0x0028(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_localWantsFire;                                        // 0x0029(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_wantsToFire;                                           // 0x002A(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_isFiringPressed;                                       // 0x002B(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G9TE[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_owningPawn;                                            // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYWeaponStateInfo                                   m_weaponStateInfo;                                       // 0x0038(0x0014) Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DDAX[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYWeaponFireInfo                                    m_weaponFireInfo;                                        // 0x0050(0x0080) Transient, NativeAccessSpecifierPublic
		struct FYTargetInfo                                        m_targetInfo;                                            // 0x00D0(0x0054) Transient, NativeAccessSpecifierPublic
		int32_t                                                    m_weaponAmmoCounter;                                     // 0x0124(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_ammoMagazinSize;                                       // 0x0128(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_ammoMagazinReloadTime;                                 // 0x012C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_amplifiedAmmoMagazinReloadTime;                        // 0x0130(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_weaponGroupIdx;                                        // 0x0134(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_lastUpdateTime;                                        // 0x0138(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_lastFireTime;                                          // 0x013C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_lastShotCounter;                                       // 0x0140(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_shouldStopFire;                                        // 0x0144(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_isReloading;                                           // 0x0145(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CI6N[0x2];                                   // 0x0146(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isFiringPaused : 1;                                    // 0x0148(0x0001) BIT_FIELD Transient, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VOJ2[0x3];                                   // 0x0149(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_spreadValuesInit;                                      // 0x014C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_localDesiredSpread;                                    // 0x0150(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_localCurrentSpread;                                    // 0x0154(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CKXW[0x20];                                  // 0x0158(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_weaponGroupStartReloadingVO;                           // 0x0178(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_switchToPrimaryVO;                                     // 0x0180(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_switchToSecondaryVO;                                   // 0x0188(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpreadChanged;                                         // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponFire;                                            // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P45U[0x58];                                  // 0x01B0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYWeapon*>                                    m_lastUpdateRankedWeapons;                               // 0x0208(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TRQE[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYWeapon*>                                    m_weapons;                                               // 0x0220(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AYWeapon*>                                    m_weaponsRanked;                                         // 0x0230(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       m_continueFire;                                          // 0x0240(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_continueFireAfterInterruption;                         // 0x0241(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_weaponValuesPendingInit;                               // 0x0242(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_bWeaponGroupValuesPendingInit;                         // 0x0243(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_autoFireEnable;                                        // 0x0244(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_initClientFireInfo;                                    // 0x0245(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DG2P[0x2];                                   // 0x0246(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_chargeUpTime;                                          // 0x0248(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_coolDownTime;                                          // 0x024C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_amplifiedCoolDownMultiplierTime;                       // 0x0250(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_currentChargeUpTime;                                   // 0x0254(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_currentCoolDownTime;                                   // 0x0258(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_maxWeaponsFiringAtTheSameTime;                         // 0x025C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYDamageDistanceEntry>                       m_distanceDamageEntrys;                                  // 0x0260(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDamageDistanceEntry>                       m_distanceHealingEntry;                                  // 0x0270(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UUQE[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_spreadBaseValue;                                       // 0x0290(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_spreadMaxValue;                                        // 0x0294(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_spreadEase;                                            // 0x0298(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_spreadBonusAim;                                        // 0x029C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_spreadPenaltyMovement;                                 // 0x02A0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_spreadPenaltyShooting;                                 // 0x02A4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_spreadPenaltyDamageMultiplier;                         // 0x02A8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CXS0[0xC];                                   // 0x02AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_weaponDataTableRowName;                                // 0x02B8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              m_projectileDataTableRowName;                            // 0x02C8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PZ33[0xD0];                                  // 0x02D8(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYAkComponentMultiSource*                            m_multiSourceAudioComponent;                             // 0x03A8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USkeletalMeshComponent*                              m_mergedMeshComponent;                                   // 0x03B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ONW5[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void TriggerCameraShake(class UClass* Shake, float Delay);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeaponManagerComponent
	 * Size -> 0x0138 (FullSize[0x0230] - InheritedSize[0x00F8])
	 */
	class UYWeaponManagerComponent : public UActorComponent
	{
	public:
		TArray<struct FYWeaponFireInfo>                            m_weaponGroupFireInfos;                                  // 0x00F8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		struct FYTargetInfo                                        m_targetInfo;                                            // 0x0108(0x0054) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2V3T[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYReplicatedTargetInfo                              m_repTargetInfo;                                         // 0x0160(0x0020) Net, Transient, RepNotify, NativeAccessSpecifierPrivate
		struct FYAmmoCounterReplicationData                        m_ammoCounterRepData;                                    // 0x0180(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		struct FYAmmoReloadReplicationData                         m_ammoReloadRepData;                                     // 0x0188(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JVP2[0xC];                                   // 0x0194(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_currentWeaponGroupIdx;                                 // 0x01A0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYTeam                                                     m_team;                                                  // 0x01A4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WF14[0xB];                                   // 0x01A5(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYWeaponGroupInfo>                           m_weaponGroups;                                          // 0x01B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L60E[0x8];                                   // 0x01C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYWeaponGroup*>                               m_weaponGroupImp;                                        // 0x01C8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadingChanged;                                      // 0x01D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadingStartedDuration;                              // 0x01E8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAmmoChanged;                                           // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActiveWeaponSpreadChanged;                             // 0x0208(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponGroupsInitialized;                               // 0x0218(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZUAK[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetTeam(EYTeam Team);
		void ServerStopFireAllWeaponGroups();
		void ServerStopFireActiveWeaponGroup();
		void ServerStartReloadActiveWeaponGroup();
		void ServerStartFireActiveWeaponGroup(const struct FYTargetInfo& targetInfo);
		void ServerSetTargetInfo(const struct FYTargetInfo& targetInfo, int32_t weaponGroup);
		void ServerSetActiveTargetInfoUnreliable(const struct FYTargetInfo& targetInfo);
		void ServerSetActiveTargetInfoReliable(const struct FYTargetInfo& targetInfo);
		void ServerActivateWeaponGroup(int32_t weaponGroup);
		void OnSpreadChanged(float newSpread, int32_t GroupIndex);
		void OnRep_WeaponGroupNetData();
		void OnRep_WeaponAmmoCounter();
		void OnRep_TargetInfo();
		void OnRep_CurrentWeaponGroupIdx();
		void OnRep_CurrentReloadingWeaponIndex();
		void NotifyAimStateServer(bool moving, bool aiming);
		bool IsReloading(int32_t weaponGroupIdx);
		class FString GetWeaponName(int32_t groupIdx);
		EYTeam GetTeam();
		float GetSpread(int32_t groupIdx);
		int32_t GetMaxAmmo(int32_t groupIdx);
		float GetCurrentSpread();
		int32_t GetCurrentMaxAmmoAmount();
		int32_t GetCurrentAmmoAmount();
		int32_t GetAmmo(int32_t groupIdx);
		int32_t GetActiveWeaponGroup();
		void ClientOnStartReloadActiveWeaponGroup();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityAltWeapon
	 * Size -> 0x0040 (FullSize[0x0368] - InheritedSize[0x0328])
	 */
	class UYAbilityAltWeapon : public UYAbility
	{
	public:
		class UYProjectileContentReferenceTracker*                 m_projectileContentReferenceTracker;                     // 0x0328(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M5YV[0x10];                                  // 0x0330(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_altFireModeGroupIdx;                                   // 0x0340(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0CMO[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYWeaponGroupInfo                                   m_altFireModeWeaponGroupInfo;                            // 0x0348(0x0018) Edit, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_16AU[0x8];                                   // 0x0360(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectile
	 * Size -> 0x03B0 (FullSize[0x0770] - InheritedSize[0x03C0])
	 */
	class AYProjectile : public AActor
	{
	public:
		unsigned char                                              UnknownData_3E0U[0x1D0];                                 // 0x03C0(0x01D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            m_projectileParticlesComponent;                          // 0x0590(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_usedMinimumUpdate;                                     // 0x0598(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V9ZX[0x4];                                   // 0x059C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        m_audioComponent;                                        // 0x05A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O8RE[0x10];                                  // 0x05A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_traveledDistance;                                      // 0x05B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             m_velocity;                                              // 0x05BC(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_health;                                                // 0x05C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QUWL[0x6];                                   // 0x05CC(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_canBeTargeted;                                         // 0x05D2(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_shouldDetectCollision;                                 // 0x05D3(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_shouldDisplayMarker;                                   // 0x05D4(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N6G8[0x3];                                   // 0x05D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          m_projectileOfflineDataTable;                            // 0x05D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_dataRowName;                                           // 0x05E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          m_abilityDataTable;                                      // 0x05E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5MAH[0x7C];                                  // 0x05F0(0x007C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_initalSpeed;                                           // 0x066C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxTravelDistance;                                     // 0x0670(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_inheritStartVelocity;                                  // 0x0674(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2EP4[0x3];                                   // 0x0675(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYWeapon*                                            m_owningWeapon;                                          // 0x0678(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A6GJ[0x8];                                   // 0x0680(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AController*                                         m_owningController;                                      // 0x0688(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_instigatorIgnoreTime;                                  // 0x0690(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_hitImpactForce;                                        // 0x0694(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_fireRecoilForce;                                       // 0x0698(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_hitzoneDamageMultiplier;                               // 0x069C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_abilityDamage;                                         // 0x06A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_hitzonePenetrationDistance;                            // 0x06A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYDamageLevel>                               m_damageLevel;                                           // 0x06A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<float>                                              m_amplifiedDamageLevels;                                 // 0x06B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    m_damageRadius;                                          // 0x06C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYCachedDamageModifierData                          m_cachedDamageModifierData;                              // 0x06CC(0x000C) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       m_ignoreShields;                                         // 0x06D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_friendlyFire;                                          // 0x06D9(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_exactHitDetection;                                     // 0x06DA(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_armed;                                                 // 0x06DB(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    m_randomSeed;                                            // 0x06DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NHZ6[0x9];                                   // 0x06E0(0x0009) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_replicateMaxDistanceReachedToClients;                  // 0x06E9(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1I5W[0x1];                                   // 0x06EA(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_detonateOnProximity;                                   // 0x06EB(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_proximityCheckAgainstCreep;                            // 0x06EC(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LVDG[0xB];                                   // 0x06ED(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_proximityDistance;                                     // 0x06F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ATNP[0x74];                                  // 0x06FC(0x0074) MISSED OFFSET (PADDING)

	public:
		bool ShouldDamageOwner();
		void SetMaxTravelDistance(float maxTravelDistance, bool skipImmediateDistanceCheck);
		void OnUpdateVelocity(float DeltaSeconds);
		void OnUpdateCollision(const struct FVector& deltaMovement, float DeltaSeconds);
		void OnReachedProximityRange();
		void OnProjectileInitialized();
		void OnMaxDistanceReached();
		void OnImpact(const struct FHitResult& HitResult);
		void OnForceExplosion();
		void OnExploding();
		void OnDealRadialDamageToPawn(class AYPawn* Pawn, bool isShieldActive, float currentExplosionLifeTime);
		void OnCleanUpProjectile();
		bool IsStoppingSimulation();
		EYTeam GetTeam();
		struct FYProjectileOfflineDataTableRow GetProjectileOfflineData();
		float GetModifiedMaxTravelDistance();
		void CollideProjectile(const struct FHitResult& OutHit);
		void CleanUpProjectile();
		bool CanBeTargeted(bool canTargetDuringInstigatorIgnoreTime);
		float CalculateDamageForDistance(float traveledDistance);
		void ApplyDamage(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityBatteringRam
	 * Size -> 0x0068 (FullSize[0x0390] - InheritedSize[0x0328])
	 */
	class UYAbilityBatteringRam : public UYAbility
	{
	public:
		unsigned char                                              UnknownData_ZLES[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_socketTag;                                             // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_overlapRadius;                                         // 0x0338(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HCUD[0x4];                                   // 0x033C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     m_chargeUpParticleEffect;                                // 0x0340(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     m_impactParticleEffect;                                  // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     m_cooldownParticleEffect;                                // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         m_chargeUpCurve;                                         // 0x0358(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_maxDamage;                                             // 0x0360(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZT8L[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_damageType;                                            // 0x0368(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_damageRadius;                                          // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WQBR[0x14];                                  // 0x0374(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_audioEventImpact;                                      // 0x0388(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		struct FVector GetSensorLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityBeamModifier
	 * Size -> 0x00E0 (FullSize[0x0408] - InheritedSize[0x0328])
	 */
	class UYAbilityBeamModifier : public UYAbility
	{
	public:
		unsigned char                                              UnknownData_36YR[0x20];                                  // 0x0328(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYBeamModifierEffects                               m_effects;                                               // 0x0348(0x00B8) Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EYAlternativeBeamType                                      m_alternativeBeamType;                                   // 0x0400(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XNF0[0x7];                                   // 0x0401(0x0007) MISSED OFFSET (PADDING)

	public:
		void CollectOwnedBeamWeapons();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityDeployable
	 * Size -> 0x0010 (FullSize[0x0338] - InheritedSize[0x0328])
	 */
	class UYAbilityDeployable : public UYAbility
	{
	public:
		class UClass*                                              m_deployActorClass;                                      // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxConcurrentActors;                                   // 0x0330(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GE0W[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSoftCollisionComponent
	 * Size -> 0x0170 (FullSize[0x0268] - InheritedSize[0x00F8])
	 */
	class UYSoftCollisionComponent : public UActorComponent
	{
	public:
		class UAkAudioEvent*                                       m_audioEventSoftCollision;                               // 0x00F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventSoftCollisionPawnVsPawn;                     // 0x0100(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYSoftCollisionSpheresSetup                         m_spheresSetup;                                          // 0x0108(0x0028) Edit, NativeAccessSpecifierPublic
		struct FYSoftCollisionBoxesSetup                           m_boxesSetup;                                            // 0x0130(0x0014) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9SWW[0x4];                                   // 0x0144(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYSoftCollisionParticleSystemComponentSetup         m_particleSystemComponentSetup;                          // 0x0148(0x0030) Edit, NativeAccessSpecifierPublic
		bool                                                       m_enableSmoothCollision;                                 // 0x0178(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1RKT[0x3];                                   // 0x0179(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_pushForceAmountRepulsingOtherPawns;                    // 0x017C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_speedUpForceMultiplier;                                // 0x0180(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_softCollisionDebugMode;                                // 0x0184(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q0MP[0x98];                                  // 0x0188(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_owner;                                                 // 0x0220(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             m_entryBoxExtend;                                        // 0x0228(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_50E0[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYSoftCollisionInfo>                         m_softCollisionInfos;                                    // 0x0238(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FYSoftCollisionPSCEntry>                     m_pscPool;                                               // 0x0248(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TQZE[0x10];                                  // 0x0258(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityMovement
	 * Size -> 0x0038 (FullSize[0x0360] - InheritedSize[0x0328])
	 */
	class UYAbilityMovement : public UYAbility
	{
	public:
		TArray<struct FYABilityMovementForce>                      m_forces;                                                // 0x0328(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       m_CancelOnCollision;                                     // 0x0338(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       m_disableControls;                                       // 0x0339(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9A8B[0x1];                                   // 0x033A(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_disableStabilisationSystem;                            // 0x033B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       m_overwriteRigidBodyErrorCorrection;                     // 0x033C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1HCK[0x23];                                  // 0x033D(0x0023) MISSED OFFSET (PADDING)

	public:
		void OnSoftCollisionOverlap(TArray<struct FYSoftCollisionOverlapResult> overlapResults);
		bool IsTurningLeft();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityPulse
	 * Size -> 0x0078 (FullSize[0x03A0] - InheritedSize[0x0328])
	 */
	class UYAbilityPulse : public UYAbility
	{
	public:
		unsigned char                                              UnknownData_RDHV[0x24];                                  // 0x0328(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_radius;                                                // 0x034C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_pulseSpeed;                                            // 0x0350(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_pulseDamage;                                           // 0x0354(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_damagesCreepsAffectedByPulses;                         // 0x0358(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J8CX[0x7];                                   // 0x0359(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_numberOfPulses;                                        // 0x0360(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y6M3[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_damageType;                                            // 0x0368(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     m_particleEffect;                                        // 0x0370(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_pulseAudioEvent;                                       // 0x0378(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPulseTargettingClasses>                     m_targetClasses;                                         // 0x0380(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventImpactFriendly;                              // 0x0390(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_audioEventImpactEnemy;                                 // 0x0398(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnDealDamageToPawn(class AYPawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityWarpJump
	 * Size -> 0x00A0 (FullSize[0x03C8] - InheritedSize[0x0328])
	 */
	class UYAbilityWarpJump : public UYAbility
	{
	public:
		float                                                      m_maxDistance;                                           // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_minDistance;                                           // 0x032C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_searchSpreadMultiplier;                                // 0x0330(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_warpWarmUpTime;                                        // 0x0334(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_shieldDisableTime;                                     // 0x0338(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_damageThreshold;                                       // 0x033C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_damageOnEnemy;                                         // 0x0340(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3NX5[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_targetVolumeClass;                                     // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_dealDamageOnPath;                                      // 0x0350(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LKWL[0x3];                                   // 0x0351(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_pathDamageRadiusModifer;                               // 0x0354(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              m_damageTypeOnPath;                                      // 0x0358(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_damageAmountOnPath;                                    // 0x0360(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_maxTargetDistance;                                     // 0x0364(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_onlyWarpOnTargets;                                     // 0x0368(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       m_warpOnDirection;                                       // 0x0369(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HCCP[0x26];                                  // 0x036A(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYWarpJumpTargetVolume*                              m_TargetVolume;                                          // 0x0390(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_genericVOInvalidJump;                                  // 0x0398(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VK71[0x20];                                  // 0x03A8(0x0020) MISSED OFFSET (PADDING)

	public:
		void TriggerWarpJumpTeleport();
		void TriggerWarpJumpEnd();
		bool IsWarmingUp();
		struct FVector GetTargetLocation();
		float GetCountdown();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityWithWeaponBase
	 * Size -> 0x0048 (FullSize[0x0370] - InheritedSize[0x0328])
	 */
	class UYAbilityWithWeaponBase : public UYAbility
	{
	public:
		bool                                                       m_stopFireOnTargetDead;                                  // 0x0328(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U75K[0x7];                                   // 0x0329(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_weaponSocketTag;                                       // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_weaponClass;                                           // 0x0338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_weaponSocketTagMirrored;                               // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JRAU[0x20];                                  // 0x0348(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_lastLockedValidTarget;                                 // 0x0368(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeaponGroupAbility
	 * Size -> 0x0020 (FullSize[0x03E0] - InheritedSize[0x03C0])
	 */
	class UYWeaponGroupAbility : public UYWeaponGroup
	{
	public:
		unsigned char                                              UnknownData_YPNB[0x20];                                  // 0x03C0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityBroadSide
	 * Size -> 0x0088 (FullSize[0x03F8] - InheritedSize[0x0370])
	 */
	class UYAbilityBroadSide : public UYAbilityWithWeaponBase
	{
	public:
		float                                                      m_maxAngle;                                              // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_maxDistance;                                           // 0x0374(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_volleyTime;                                            // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HB4G[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        m_leftSockets;                                           // 0x0380(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FName>                                        m_rightSockets;                                          // 0x0390(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4GIV[0x38];                                  // 0x03A0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_refreshWeaponDirectionInterval;                        // 0x03D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_refreshWeaponDirectionSubinterval;                     // 0x03DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JHHC[0x18];                                  // 0x03E0(0x0018) MISSED OFFSET (PADDING)

	public:
		TArray<class AYWeapon*> GetLastFiredWeapons();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityFighterDrone
	 * Size -> 0x0098 (FullSize[0x0408] - InheritedSize[0x0370])
	 */
	class UYAbilityFighterDrone : public UYAbilityWithWeaponBase
	{
	public:
		class UClass*                                              m_deployDrone;                                           // 0x0370(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FVector>                                     m_spawnOffset;                                           // 0x0378(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FRotator>                                    m_spawnRelativeRotation;                                 // 0x0388(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<float>                                              m_spawnInitialVelocity;                                  // 0x0398(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       m_inheritStartVelocity;                                  // 0x03A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2CDE[0x7];                                   // 0x03A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_spawnDelay;                                            // 0x03B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HATI[0x10];                                  // 0x03C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            m_startOffsetIndex;                                      // 0x03D0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G1PW[0x4];                                   // 0x03E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_spawnInitialWPDistance;                                // 0x03E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxConcurrentActors;                                   // 0x03E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_droneTimeToLive;                                       // 0x03EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_droneTimeToLiveOwnerDeath;                             // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DBUG[0x14];                                  // 0x03F4(0x0014) MISSED OFFSET (PADDING)

	public:
		void OnOwnerEnergyWheelFunctionActivated(EYEnergyWheelSelection EnergyWheelSelection);
		void OnOwnerDied();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityPerimeterDefense
	 * Size -> 0x0038 (FullSize[0x03A8] - InheritedSize[0x0370])
	 */
	class UYAbilityPerimeterDefense : public UYAbilityWithWeaponBase
	{
	public:
		TArray<struct FAbilityPerimeterClasses>                    m_targetClasses;                                         // 0x0370(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_maxRange;                                              // 0x0380(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_minRange;                                              // 0x0384(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GRSE[0x4];                                   // 0x0388(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_targetFriendlies;                                      // 0x038C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       m_specifyTarget;                                         // 0x038D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8WLG[0x2];                                   // 0x038E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_maxFiringWeapons;                                      // 0x0390(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxTargets;                                            // 0x0394(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_refireTime;                                            // 0x0398(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_refireCoolDown;                                        // 0x039C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9HDB[0x8];                                   // 0x03A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void TargetDamaged(class AActor* DamagedActor, float BaseDamage, class AController* eventInstigator, class AYWeapon* causingWeapon, class UClass* DamageTypeClass);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityRocketSwarm
	 * Size -> 0x0010 (FullSize[0x0380] - InheritedSize[0x0370])
	 */
	class UYAbilityRocketSwarm : public UYAbilityWithWeaponBase
	{
	public:
		float                                                      m_maxDistance;                                           // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_lockOnTime;                                            // 0x0374(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8DD6[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetModifiedMaxDistance();
		class AYWeapon* GetLastFiredWeapon();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAbilityManager
	 * Size -> 0x0130 (FullSize[0x0228] - InheritedSize[0x00F8])
	 */
	class UYAbilityManager : public UActorComponent
	{
	public:
		TArray<class UYAbility*>                                   m_abilities;                                             // 0x00F8(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected
		float                                                      m_globalCooldown;                                        // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RWEJ[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_replicateAbilitiesCountdown;                           // 0x0110(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_66QM[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYReplicatedAbility>                         m_abilitiesRep;                                          // 0x0118(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      m_currentAbilities;                                      // 0x0128(0x0010) Net, ZeroConstructor, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate
		float                                                      m_currentCoolDown;                                       // 0x0138(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NB94[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYWeaponFireInfo>                            m_weaponGroupFireInfos;                                  // 0x0140(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<class UYWeaponGroupAbility*>                        m_weaponGroupAbilityImp;                                 // 0x0150(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		class AYPawn*                                              m_pawnOwner;                                             // 0x0160(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_maxTargetLockAngle;                                    // 0x0168(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_maxTargetLockDistance;                                 // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QUDK[0x70];                                  // 0x0170(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_concurrentDeployables;                                 // 0x01E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1UGK[0x4];                                   // 0x01E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAbilityActivated;                                      // 0x01E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilityIdActivated;                                    // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilityCooldownDone;                                   // 0x0208(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilitiesInitialized;                                  // 0x0218(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetTargetActorsInRange(TArray<struct FAbilityPerimeterTargetInfo> perimeterTargets, int32_t abilityIdx);
		void ServerReleaseAbility(int32_t AbilityId);
		void ServerPressAbility(int32_t AbilityId, class AYPawn* lockedPawn);
		void SendActorList(TArray<class AActor*> Actors, const class FName& abilityName);
		void Reset();
		void OnRep_WeaponGroupFireInfos();
		void OnRep_GlobalCooldown();
		void OnRep_CurrentAbilities();
		void OnRep_Abilities();
		void OnIndividualAbilityCooldownDone(class UYAbility* ability);
		void OnAbilityStartedCooldown(class UYAbility* ability);
		void MulticastAbilityCanceled(const class FName& abilityName);
		float GetGlobalDefaultCooldown();
		float GetGlobalCurrentCooldown();
		TArray<class UYAbility*> GetAbilityItems();
		void ClientTriggerPulseVisualAndSoundActorList(TArray<class AActor*> Actors, const class FName& abilityName);
		void ClientNotifyDeactivation(const class FName& abilityName, bool wasInterrupted, bool triggerVO);
		void ClientNotifyActivation(bool abilitySucceeded, const class FName& abilityName);
		void ClientCooldownCompleted(const class FName& abilityName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAchievementManager
	 * Size -> 0x00F8 (FullSize[0x0120] - InheritedSize[0x0028])
	 */
	class UYAchievementManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_W1TA[0xF8];                                  // 0x0028(0x00F8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YActorPoolManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYActorPoolManager : public UObject
	{
	public:
		TArray<struct FYPooledActors>                              m_pooledActors;                                          // 0x0028(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		class AActor* STATIC_GetPooledActor(class UObject* WorldContext, class UClass* objectClass);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAICollisionComponent
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class UYAICollisionComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_E1WG[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCreepNavigation
	 * Size -> 0x0040 (FullSize[0x0428] - InheritedSize[0x03E8])
	 */
	class AYCreepNavigation : public ANavigationObjectBase
	{
	public:
		TArray<struct FYNavigationNodeData>                        m_NextNavPoints;                                         // 0x03E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_radiusOfBlockByPawn;                                   // 0x03F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_minSpeed;                                              // 0x03FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxSpeed;                                              // 0x0400(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_spawnsContractor;                                      // 0x0404(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9LPC[0x23];                                  // 0x0405(0x0023) MISSED OFFSET (PADDING)

	public:
		bool IsBlockedByPawn();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringDataManager
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UYScoringDataManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_LKJ3[0xB0];                                  // 0x0028(0x00B0) MISSED OFFSET (PADDING)

	public:
		void Initialize();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDamageType
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UYDamageType : public UDamageType
	{
	public:
		class FName                                                m_damageTypeName;                                        // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_physContactTypeName;                                   // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_stopsMovementOnDeath;                                  // 0x0050(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MXR2[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode
	 * Size -> 0x03E8 (FullSize[0x0880] - InheritedSize[0x0498])
	 */
	class AYGameMode : public AGameMode
	{
	public:
		unsigned char                                              UnknownData_FWAM[0x8];                                   // 0x0498(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_friendlyShipScore;                                     // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_friendlyBaseScore;                                     // 0x04A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_hostileShipScore;                                      // 0x04A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_hostileBaseScore;                                      // 0x04AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_neutralBaseScore;                                      // 0x04B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_teamFavouriteScore;                                    // 0x04B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_radiusForScoring;                                      // 0x04B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_radiusForScoringFriendlyShip;                          // 0x04BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_radiusForScoringHostileShip;                           // 0x04C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0R09[0x4];                                   // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYBaseClassShipScoring>                      m_baseClassRadiusOverrides;                              // 0x04C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_997P[0x170];                                 // 0x04D8(0x0170) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYBaseClassShipCenterOfMassWeight>           m_baseClassCenterOfMassWeights;                          // 0x0648(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VGNG[0x38];                                  // 0x0658(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        m_battleUpdatesRulesRow;                                 // 0x0690(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       m_scoreAIShips;                                          // 0x06A0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_scoreCapturePoints;                                    // 0x06A1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_interpolateShipDistances;                              // 0x06A2(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useSpawnScoring;                                       // 0x06A3(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    m_spawnLimit;                                            // 0x06A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxCreepsPerTeam;                                      // 0x06A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxCreepPenaltyPerPlayer;                              // 0x06AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxCreeps;                                             // 0x06B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_kickCreepsWhenOverMax;                                 // 0x06B4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZLYC[0x3];                                   // 0x06B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_respawnTime;                                           // 0x06B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_playerPawnDestroyTime;                                 // 0x06BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonPlayerPawnDestroyTime;                              // 0x06C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JUV8[0x4];                                   // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_analyticsRootFolder;                                   // 0x06C8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_analyticsRemoteFolder;                                 // 0x06D8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_analyticsInfluxDbUrl;                                  // 0x06E8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_analyticsRemoteTelemetryFilter;                        // 0x06F8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TD1Y[0x10];                                  // 0x0708(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isMatchReputationEnabled;                              // 0x0718(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M3UH[0x27];                                  // 0x0719(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYScoringEventManager*                               m_scoringEventManager;                                   // 0x0740(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PHFO[0x10];                                  // 0x0748(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0758(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0828(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKRE[0x5];                                   // 0x082B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0830(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QTST[0x28];                                  // 0x0858(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnPlayerKilled(class AYPawn* Killer, class AYPawn* victim);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventManager
	 * Size -> 0x05D8 (FullSize[0x0600] - InheritedSize[0x0028])
	 */
	class UYScoringEventManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_TJNL[0x5B8];                                 // 0x0028(0x05B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isScoringSystemActive;                                 // 0x05E0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R8LS[0x7];                                   // 0x05E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYScoringDataManager*                                m_scoringInfo;                                           // 0x05E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYPlayerEventInfo>                           m_playerEventInfo;                                       // 0x05F0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YNPCState
	 * Size -> 0x0040 (FullSize[0x0400] - InheritedSize[0x03C0])
	 */
	class AYNPCState : public AInfo
	{
	public:
		float                                                      Score;                                                   // 0x03C0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3COZ[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                m_NPCName;                                               // 0x03C8(0x0018) Net, NativeAccessSpecifierPublic
		class FString                                              m_NPCUniqueId;                                           // 0x03E0(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_rank;                                                  // 0x03F0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    bIsABot;                                                 // 0x03F4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_startTime;                                             // 0x03F8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7WAG[0x4];                                   // 0x03FC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterAssetBase
	 * Size -> 0x0140 (FullSize[0x0168] - InheritedSize[0x0028])
	 */
	class UYBoosterAssetBase : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_URDT[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_activeInGame;                                          // 0x0030(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EYBoosterType                                              m_boosterType;                                           // 0x0031(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZX8Z[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYBoosterEffect>                             m_boosterEffects;                                        // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		class FString                                              m_jsonTableExportPath;                                   // 0x0048(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_jsonTableArray;                                        // 0x0058(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0068(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0138(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EPT7[0x5];                                   // 0x013B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0140(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInterface_PlayerScore
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYInterface_PlayerScore : public UInterface
	{
	public:
		bool WasHealedWithinTimeFrame(float timeFrame, const class FName& Player);
		void UpdateHealingInfo(const class FName& healerPlayer);
		void UpdateDamageInfo(const class FName& damagedPlayer);
		void SetScore(int32_t Score);
		void ScoreMutualSquadAssist();
		void ScoreKillWhileDead();
		void ScoreKillSecondaryWeapon();
		void ScoreKillPrimaryWeapon();
		void ScoreKill(class AController* killed);
		void ScoreFighterJetDeath();
		void ScoreDeath(class AController* Killer);
		void ScoreAssist();
		EYTeam GetTeamIPS();
		float GetRawDamageReceivedTotal();
		float GetRawDamageReceivedThisLife();
		int32_t GetRampageCounter();
		class FString GetPlayerName();
		float GetLastTimeDamagedEnemy(const class FName& Enemy);
		struct FYEventInfo GetLastKill();
		struct FYEventInfo GetLastDeath();
		TArray<struct FYEventInfo> GetKillsList();
		int32_t GetKills();
		float GetHealingDone();
		TArray<struct FYEventInfo> GetDeathsList();
		float GetDamageReceivedOnShieldThisLife();
		float GetDamageDealtWithWeapons();
		float GetDamageDealtWithAbilities();
		void GetAllHealersWithinTimeFrame(TArray<class FName>* outHealers, float timeFrame);
		void DeactivateRampageCounter();
		void DeactivateMayhamEvent();
		bool CanScoreMayham();
		void AwardMVP();
		void AddScore(int32_t Score, EYReputationPoolType reputationSourceType);
		void AddRawDamageReceived(float DamageAmount, float currentHealth);
		void AddHealingDone(float healingAmount);
		void AddDamageReceivedOnShield(float DamageAmount);
		void AddDamageReceived(float DamageAmount);
		void AddDamageDealtWithWeapons(float DamageAmount, class AController* enemyController);
		void AddDamageDealtWithAbilities(float DamageAmount, class AController* enemyController);
		void ActivateRampageCounter();
		void ActivateMayhamEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPawn
	 * Size -> 0x07A8 (FullSize[0x0BC8] - InheritedSize[0x0420])
	 */
	class AYPawn : public APawn
	{
	public:
		unsigned char                                              UnknownData_TVH6[0x8];                                   // 0x0420(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYWeaponAngleInfoOverride>                   m_weaponAngleInfoOverrides;                              // 0x0428(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_conquerCapturePointValue;                              // 0x0438(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P3AN[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECollisionChannel                                          m_usedTargetTraceChannel;                                // 0x0440(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6KYZ[0x7];                                   // 0x0441(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYFeatsComponent*                                    m_featsComponent;                                        // 0x0448(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYBuffsComponent*                                    m_buffsComponent;                                        // 0x0450(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYHitzoneRuntimeComponent*                           m_hitzoneComponent;                                      // 0x0458(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYSoftCollisionComponent*                            m_softCollisionComponent;                                // 0x0460(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYHoveringFXComponent*                               m_hoveringFXComponent;                                   // 0x0468(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipCustomizationComponent*                        m_shipCustomizationComponent;                            // 0x0470(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYWarpingComponent*                                  m_warpingComponent;                                      // 0x0478(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WV9I[0x20];                                  // 0x0480(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_complexVisibilityTestRatio;                            // 0x04A0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M9UJ[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYTargetMarkerProperties                            m_targetMakerProperties;                                 // 0x04A8(0x0020) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FString                                              m_defaultCaptainIconPath;                                // 0x04C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z6D6[0x10];                                  // 0x04D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsDying;                                                // 0x04E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y2J6[0x7];                                   // 0x04E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDied;                                                  // 0x04F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDiedNoParams;                                          // 0x0500(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FYPawnDeathData                                     m_deathData;                                             // 0x0510(0x00A0) Net, Transient, RepNotify, NativeAccessSpecifierPublic
		float                                                      m_finalExplosionDebrisDetachInterval;                    // 0x05B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QF6Z[0x1C];                                  // 0x05B4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_useWarpJumpOnSpawn;                                    // 0x05D0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2C7N[0x7];                                   // 0x05D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     m_warpDeathFX_In;                                        // 0x05D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_soundEnergyOnThrusters;                                // 0x05E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_soundEnergyOnShields;                                  // 0x05E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_soundEnergyOnWeapons;                                  // 0x05F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useWarpJumpOnDeath;                                    // 0x05F8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YRFW[0x3];                                   // 0x05F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_playerDeathFinalExplosionStartTime;                    // 0x05FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_playerDeathMaterialAnimationDelay;                     // 0x0600(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_playerDeathMaterialAnimationDuration;                  // 0x0604(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_playerDeathAnimationDistance;                          // 0x0608(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_applyDeathForcesOnDeath;                               // 0x060C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QDA3[0x3];                                   // 0x060D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYPawnDeathForceParams>                      m_deathForceParams;                                      // 0x0610(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_deathForceBlendoutTime;                                // 0x0620(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_enableHealScoreEvent;                                  // 0x0624(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NSFP[0x13];                                  // 0x0625(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_levelBoundaryHeightForce;                              // 0x0638(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HD1I[0xC];                                   // 0x063C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPawnGetPossessed;                                      // 0x0648(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AYNPCState*                                          m_NPCState;                                              // 0x0658(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_lastTargetAlive;                                       // 0x0660(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PLTO[0x7];                                   // 0x0661(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_defaultAICruise;                                       // 0x0668(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_defaultAIEscort;                                       // 0x0670(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_defaultAIStand;                                        // 0x0678(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonZoomedFOV;                                          // 0x0680(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_playerPossesedID;                                      // 0x0684(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldAttached;                                        // 0x0688(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSoftCollisionOverlap;                                  // 0x0698(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWeaponFired;                                           // 0x06A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAbilityFired;                                          // 0x06B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnergyWheelFunctionActivated;                          // 0x06C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9FXF[0x10];                                  // 0x06D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLoadoutInitializedWithPawn;                            // 0x06E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FYKillAssistData>                            m_killAssistData;                                        // 0x06F8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_cameraPitchPointDistance;                              // 0x0708(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_cameraPitchInterp;                                     // 0x070C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_cameraPitchUpThreshold;                                // 0x0710(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_cameraPitchDownThreshold;                              // 0x0714(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZFXN[0xC];                                   // 0x0718(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxShadowDrawDistance;                                 // 0x0724(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_shadowDrawDistanceUpdateFrequency;                     // 0x0728(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LNML[0x10];                                  // 0x072C(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRigidBodyErrorCorrection                           m_rbErrorCorrection;                                     // 0x073C(0x001C) Transient, NativeAccessSpecifierPublic
		bool                                                       m_bIsAIControlled;                                       // 0x0758(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_isSpectatable;                                         // 0x0759(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EL91[0x73];                                  // 0x075A(0x0073) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_assistedTargeting;                                     // 0x07CD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3R75[0x2];                                   // 0x07CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYShipClass>                                        m_shipClassesToIgnoreAssistedTarget;                     // 0x07D0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      m_assistedTargetingSpeed;                                // 0x07E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_assistedTargetingCorrectionFactor;                     // 0x07E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AYPlayerController*                                  m_playerController;                                      // 0x07E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_updateTargetInfoTimeStamp;                             // 0x07F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_updateTargetInfoThreshold;                             // 0x07F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HHPS[0x8];                                   // 0x07F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    m_pawnMIDs;                                              // 0x0800(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		float                                                      m_shadowDrawDistanceUpdateTimestamp;                     // 0x0810(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ULGZ[0xC];                                   // 0x0814(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_audioCloakingActivated;                                // 0x0820(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_audioCloakingDeactivated;                              // 0x0828(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYCloakSettings*                                     m_cloakSettings;                                         // 0x0830(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7TP2[0x1C];                                  // 0x0838(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_territoryContribution;                                 // 0x0854(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RU0E[0x8];                                   // 0x0858(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYGameplayAttributeComponent*                        m_gameplayAttribComponent;                               // 0x0860(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWeaponManagerComponent*                            m_weaponManager;                                         // 0x0868(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LJX6[0x18];                                  // 0x0870(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYAbilityManager*                                    m_abilityManager;                                        // 0x0888(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYOfficerComponent*                                  m_officerComponent;                                      // 0x0890(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        m_audioComponent;                                        // 0x0898(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYThrusterComponent*                                 m_thrusterComponent;                                     // 0x08A0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_shieldClass;                                           // 0x08A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYEnergyShield*                                      m_shield;                                                // 0x08B0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_shieldTableRowName;                                    // 0x08B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYTeam                                                     m_team;                                                  // 0x08C0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TUM7[0x7];                                   // 0x08C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYShipLoadoutInfo                                   m_loadoutInfo;                                           // 0x08C8(0x0078) Net, Transient, Protected, NativeAccessSpecifierProtected
		EYShipClass                                                m_shipClass;                                             // 0x0940(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipState                                                m_state;                                                 // 0x0941(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L1FZ[0x6];                                   // 0x0942(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYCapturePoint*                                      m_currentCapturePoint;                                   // 0x0948(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_bIsCreep;                                              // 0x0950(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W7EY[0x7];                                   // 0x0951(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              m_mesh;                                                  // 0x0958(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYVehicleMovementComp*                               m_vehicleMovement;                                       // 0x0960(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_linearDeltaThreshold;                                  // 0x0968(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_linearInterpAlpha;                                     // 0x096C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_linearRecipFixTime;                                    // 0x0970(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_angularDeltaThreshold;                                 // 0x0974(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_angularInterpAlpha;                                    // 0x0978(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_angularRecipFixTime;                                   // 0x097C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_bodySpeedThreshold;                                    // 0x0980(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7LJD[0x4];                                   // 0x0984(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYPawn*>                                      m_renderedPawns;                                         // 0x0988(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       m_recordLocationAndRotationEnabled;                      // 0x0998(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LSQE[0x3];                                   // 0x0999(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_recordLocationAndRotationInterval;                     // 0x099C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYEnergyComponent*                                   m_energyComponent;                                       // 0x09A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHealthComponent*                                   m_healthComponent;                                       // 0x09A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_lowDamageCamShake;                                     // 0x09B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_mediumDamageCamShake;                                  // 0x09B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_extremeDamageCamShake;                                 // 0x09C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_baseCamShakeLimit;                                     // 0x09C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_lowerCamShakeLimit;                                    // 0x09CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_upperCamShakeLimit;                                    // 0x09D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RCND[0x1];                                   // 0x09D4(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_hitZonesActive;                                        // 0x09D5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_showHitZoneBoxComponents;                              // 0x09D6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_enableHitZones;                                        // 0x09D7(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_shipProximityCheckDistanceAfterDeath;                  // 0x09D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_environmentTraceDistanceAfterDeath;                    // 0x09DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J75Z[0x2];                                   // 0x09E0(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYEnergyWheelSelection                                     m_activeEnergyWheelFunction;                             // 0x09E2(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AZ2F[0x1];                                   // 0x09E3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYCameraTuningInfo                                  m_gamePlayCamInfo;                                       // 0x09E4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FYCameraTuningInfo                                  m_gameplaySecondaryCameraInformation;                    // 0x09F0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FYCameraTuningInfo                                  m_travelCamInfo;                                         // 0x09FC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FYCameraTuningInfo                                  m_spectatorCamInfo;                                      // 0x0A08(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I552[0x4];                                   // 0x0A14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_switchToSpectatorCamDelay;                             // 0x0A18(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_switchToFriendlySpectator;                             // 0x0A1C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FYCameraPostProcessDefinition                       m_scramblePostProcessFx;                                 // 0x0A20(0x0018) Edit, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SZE8[0x4];                                   // 0x0A38(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_inCombatCoolDown;                                      // 0x0A3C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_62FH[0x4];                                   // 0x0A40(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isInCombat;                                            // 0x0A44(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9LU6[0x63];                                  // 0x0A45(0x0063) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYCameraDeathInfo                                   m_deathCamInfo;                                          // 0x0AA8(0x0010) Edit, NativeAccessSpecifierPublic
		float                                                      m_hitImpactMultiplier;                                   // 0x0AB8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_recoilImpactMultiplier;                                // 0x0ABC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_textureStreamingLocationBufferTime;                    // 0x0AC0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DXUJ[0x4];                                   // 0x0AC4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0AC8(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0B98(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6JUK[0x5];                                   // 0x0B9B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0BA0(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateEnergyWheelOnWeapons(EYEnergyWheelSelection activeEnergyWheelFunction);
		void TurnRightInputChanged(float turnRightInput);
		void TriggerWwiseEvent(class UAkAudioEvent* audioEvent);
		void TriggerShipSound(class UAkAudioEvent* Sound);
		void TriggerKillCameraSequence();
		void ToggleSoftCollision();
		void ToggleHitMaskAddColor();
		void ToggleHitMask();
		void TeleportIntoLevel(float randomJumpInTiming, const struct FVector& teleportingLoc, const struct FRotator& teleportingRot);
		void SwitchForwardAxisToggle();
		void StopShipMovements(bool bDeactivateConstantForce);
		void StartDebrisDetachment(int32_t debrisAmount, float detachingInterval);
		void ShowThruster();
		void ShowMaxPitchRoll();
		void SetTeam(EYTeam Team);
		void SetTargetVolMult(float newMult);
		void SetState(EYShipState State);
		void SetShipHidden(bool hidden);
		void SetLoadout(class UYShipLoadout* loadout);
		void SetLevelDampingOverwrite(float Roll, float Pitch);
		void SetIgnoredByAI(bool weapons, bool babilities, bool behavior);
		void SetCanBeTargeted(bool newTargeted);
		void SetAIControlled(bool isControlledByAI);
		void SetActiveEnergyWheelFunction(EYEnergyWheelSelection activeEnergyWheelFunction);
		void ServerToggleSoftCollision();
		void ServerRequestProjectilesInRange(const struct FVector& Location, float squaredRange, EYProjectileRangeFilter filterType);
		void ServerOnFeat(int32_t nr);
		void RecreatePhysicState();
		void ReceiveShieldSpawnedAndAttached();
		void ReceiveAnyHealth(float HealthAmt, class AController* InstigatedBy, class AActor* HealthCauser);
		void ReceiveActiveWeaponGroupChanged();
		struct FVector PredictPosition(float DeltaTime, int32_t iterations);
		void PlayWarpJumpWarmUp(const struct FVector& warpTargetLocation);
		void PlayWarpJumpOut(bool IsInOrbit, bool suppressGenericAudio);
		void PlayWarpJumpIn(bool IsInOrbit, bool suppressGenericAudio);
		void OnTurnRightInputChanged(float turnRightInput);
		void OnResetAbilityVisuals();
		void OnRep_Team();
		void OnRep_Shield();
		void OnRep_NPCState();
		void OnRep_DeathData();
		void OnReadyToInitHitmask();
		void OnPlayFinalDeathExplosion();
		void OnPlayerDying(float Damage, class APawn* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UDamageType* DamageType, const struct FHitResult& HitInfo, class AActor* DamageCauser);
		void OnMoveUpInputChanged(float moveUpInput);
		void OnMoveRightInputChanged(float moveRightInput);
		void OnMoveForwardInputChanged(float moveForwardInput);
		void OnHitzoneDestroyed(int32_t groupID);
		void OnFinishPlayerDeathAnimation();
		void OnFeat(int32_t nr);
		void OnDetachDebris(float totalDetachingDuration);
		void OnAbilityCooldownFinished(class UYAbility* ability);
		void NotifyOwnerOfHit(const struct FVector& damageDirection, float DamageAmount);
		void MulticastToggleSoftCollision();
		void MulticastOnFeat(int32_t nr);
		void MoveUpInputChanged(float moveUpInput);
		void MoveRightInputChanged(float moveRightInput);
		void MoveForwardInputChanged(float moveForwardInput);
		void ModifyEnergy(float energyModifier);
		bool LoadLoadoutAssets(bool asyncLoad);
		void ItemsAsyncLoaded();
		bool IsTeammateOfLocalPlayer();
		bool IsRendered();
		bool IsPlayingWarpJump();
		bool IsIgnoredByAIWeapons();
		bool IsIgnoredByAIBehaviour();
		bool IsIgnoredByAIAbilities();
		bool IsDead();
		bool IsAbilityTargeted(int32_t index);
		void InitShipCustomisation();
		void InitOfficers();
		void InitializeWeaponsOnManager();
		void InitializeHitMask();
		void InitHud();
		void InitAbilities();
		void HideThruster();
		bool HasLoadoutInfo();
		float GetWorldTimeSeconds();
		class UYWeaponManagerComponent* GetWeaponManager();
		float GetVerticalInput();
		float GetThrottleInput();
		float GetTerritory();
		EYTeam GetTeam();
		TArray<class AActor*> GetTargetedByList();
		float GetSteeringInput();
		EYShipState GetState();
		int32_t GetShipTier();
		class UAkComponent* GetShipSoundComponent();
		bool GetShipHidden();
		EYShipClass GetShipClass();
		float GetShieldMaxHealth();
		float GetShieldHealth();
		TArray<class AYPawn*> GetRenderedPawns();
		int32_t GetPrecastLoadoutID();
		class FString GetPlayerName();
		float GetModifiedMaxHealth();
		float GetModifiedFuelConsumption(float unmodifiedValue);
		void GetMIDs(TArray<class UMaterialInstanceDynamic*>* pawnMIDs);
		float GetMaxHealth();
		float GetMaxEnergy();
		struct FYShipLoadoutInfo GetLoadoutInfoCopy();
		struct FYShipLoadoutInfo GetLoadoutInfo();
		float GetLevelDampingOverwriteRoll();
		float GetLevelDampingOverwritePitch();
		float GetLastRenderTimeFromPawn();
		class AYPawn* GetLastFiredAtPawn();
		class UYHealthComponent* GetHealthComponent();
		float GetHealth();
		class UYFeatsComponent* GetFeatsComponent();
		float GetEnergy();
		class UYShipCustomizationComponent* GetCustomizationComponent();
		float GetCurrentWeaponSpread();
		class AYCapturePoint* GetCurrentCapturePoint();
		struct FVector GetClosestFlank(const struct FVector& fromHere, float flankDistance);
		class UYBuffsComponent* GetBuffsComponent();
		struct FVector GetBackPosition(float backDistance);
		void GetAttachments(TArray<class AActor*>* OutActors);
		int32_t GetActiveWeaponGroup();
		EYEnergyWheelSelection GetActiveEnergyWheelFunction();
		class UYAbilityManager* GetAbilityManager();
		void EnergyRegenerated();
		void EnergyDepleted();
		void EnableWarpJumpOnDeath(bool bEnable);
		void EnableShipHighlighting();
		void EnableGravity();
		void DumpAllHitMask();
		void DisableShipHighlighting();
		void DisableGravity();
		void DevSetIgnoredByAI(bool weapons, bool babilities, bool behavior);
		void DevSetCanBeTargeted(bool newTargeted);
		void DetachCameraUponDeath();
		void DeactivateCloakMulticast();
		void ClientTriggerDamageFeedback(class AActor* hitActor, float DamageAmount, const struct FVector& impactLocation, bool damageFromAbility);
		void ClientReceiveProjectilesInRange(TArray<struct FYProjectileServerData> projectileServerData);
		void ClientNotifyDamageLocation(const struct FVector& damageVector, const struct FVector& damageLocation, TArray<int32_t> hitzonesDestroyed);
		void ClientEnergyDepleted();
		void ClientEnemyGotHit(EYHitIndicatorType Type, bool isBeamWeapon);
		bool CanBeTargeted();
		void CallTeleportIntoLevel(float randomJumpInTiming, const struct FVector& teleportingLoc, const struct FRotator& teleportingRot);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInterface_PlayerInfo
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYInterface_PlayerInfo : public UInterface
	{
	public:
		class AYPawn* RetrieveYPawn();
		EYTeam GetTeam_IPI();
		struct FYShipLoadoutInfo GetShipLoadoutInfo_IPI();
		EYShipClass GetShipClass_IPI();
		int32_t GetScore_IPI();
		class UYReputationManager* GetReputationManager_IPI();
		int32_t GetPrecastLoadoutID_IPI();
		class FString GetPlayerUniqueID_IPI();
		struct FYShipLoadoutInfo GetNextShipLoadoutInfo_IPI();
		int32_t GetNextPrecastLoadoutID_IPI();
		class FString GetName_IPI();
		bool GetFinishedOrbitSelection_IPI();
		class FString GetCaptainIconPath_IPI();
		class FString GetCaptainDisplayInformation_IPI();
		class UYCaptain* GetCaptain_IPI();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityAssetBase
	 * Size -> 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
	 */
	class UYShipVanityAssetBase : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_IGLF[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYVanityItemMenuCategorie                                  m_vanityItemCategory;                                    // 0x0030(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_76RZ[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0038(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0108(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XGCN[0x5];                                   // 0x010B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0110(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityMeshPart
	 * Size -> 0x0010 (FullSize[0x0148] - InheritedSize[0x0138])
	 */
	class UYShipVanityMeshPart : public UYShipVanityAssetBase
	{
	public:
		class USkeletalMesh*                                       m_mesh;                                                  // 0x0138(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYShipClass                                                m_shipType;                                              // 0x0140(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYMeshPartType                                             m_meshType;                                              // 0x0141(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7VF9[0x6];                                   // 0x0142(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipCustomizationComponent
	 * Size -> 0x0070 (FullSize[0x0320] - InheritedSize[0x02B0])
	 */
	class UYShipCustomizationComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_JHDS[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYShipAppeareaceContainer                           m_appearance;                                            // 0x02C0(0x0030) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                m_emblemMesh;                                            // 0x02F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5IDS[0x28];                                  // 0x02F8(0x0028) MISSED OFFSET (PADDING)

	public:
		void UpdatePattern(class UYShipVanityPattern* Pattern);
		void UpdatePaint(class UYShipVanityPaint* paint);
		void UpdateHeroMeshes(TArray<class UYShipVanityMeshPart*> parts, bool enqueue, class UObject* context);
		void UpdateHeroMesh(EYMeshPartType meshType, class UYShipVanityMeshPart* meshPart);
		void UpdateEmblem(class UYShipVanityEmblem* emblem);
		void UpdateDecal(class UYShipVanityDecal* decal);
		void SetShipMesh(class USkeletalMeshComponent* MeshComponent);
		void OnPhysicStateChanged__DelegateSignature();
		void ImportPaintFromShipMesh(class USkeletalMesh* shipMesh);
		void ImportFromShipAppereance(struct FYShipAppeareaceContainer* shipAppeareaceContainer);
		void ImportFromDisplayInfo(const class FString& importString);
		bool HasShipMesh();
		class FString ExportToDisplayInfo();
		void BroadcastApperance(const struct FYShipAppeareaceContainer& m_appearance);
		void AddAdditionalMesh(class USkeletalMeshComponent* MeshComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipLoadout
	 * Size -> 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
	 */
	class UYShipLoadout : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnAsyncLoadedShip;                                       // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FYShipImportLoadoutInfo                             m_cachedInitializationData;                              // 0x0038(0x0070) Protected, NativeAccessSpecifierProtected
		bool                                                       m_isCustom;                                              // 0x00A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2JB4[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_id;                                                    // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_playerID;                                              // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_precastLoadoutID;                                      // 0x00C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TDPP[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_name;                                                  // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipClass                                                m_shipClass;                                             // 0x00D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2T5Z[0x7];                                   // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UClass>                                    m_aiPawnClass;                                           // 0x00E0(0x001C) ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X4T6[0x4];                                   // 0x00FC(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UClass*                                              m_loadedAIPawnClass;                                     // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYShipAppeareaceContainer                           m_appereance;                                            // 0x0108(0x0030) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              m_primaryWeaponClass;                                    // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_secondaryWeaponClass;                                  // 0x0140(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      m_abilities;                                             // 0x0148(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<int32_t>                                            m_abilitiesId;                                           // 0x0158(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            m_perkIds;                                               // 0x0168(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class UYPerk>>                       m_perks;                                                 // 0x0178(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              m_officerFirstPerk;                                      // 0x0188(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_officerWeaponPerk;                                     // 0x0190(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_officerNavigationPerk;                                 // 0x0198(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_officerEngineerPerk;                                   // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T9YP[0x8];                                   // 0x01A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isActiveLoadout;                                       // 0x01B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_isInitializedWithNoAssetData;                          // 0x01B1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_wasInitializedNoAssetLoadData;                         // 0x01B2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_isAsyncLoading;                                        // 0x01B3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_97PY[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLocalServerDataManager
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class UYLocalServerDataManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_K9AE[0xA0];                                  // 0x0028(0x00A0) MISSED OFFSET (PADDING)

	public:
		void SendOTSDataBunch();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDreadnoughtExternalFunctions
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYDreadnoughtExternalFunctions : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_ForceUpdateComponentToWorld(class USceneComponent* Component);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerMatchStatisticsManager
	 * Size -> 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
	 */
	class UYPlayerMatchStatisticsManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_845Y[0x80];                                  // 0x0028(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYPlayerMatchStatisticsCategory>             m_categories;                                            // 0x00A8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FStringAssetReference                               m_categoryDTPath;                                        // 0x00B8(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_maxNumStatsToShowInEOM;                                // 0x00C8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_useTopMatchComparison;                                 // 0x00CC(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_useTopTeamComparison;                                  // 0x00CD(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_useAboveAvgMatchComparison;                            // 0x00CE(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_useAboveCareerAvgComparison;                           // 0x00CF(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_usePureStatsComparison;                                // 0x00D0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VZIG[0x57];                                  // 0x00D1(0x0057) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              m_world;                                                 // 0x0128(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RM86[0x8];                                   // 0x0130(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYPlayerMatchStatisticsTestUtils*                    m_testUtils;                                             // 0x0138(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerMatchStatisticsTestUtils
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class UYPlayerMatchStatisticsTestUtils : public UObject
	{
	public:
		unsigned char                                              UnknownData_0GDX[0xB8];                                  // 0x0028(0x00B8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerReplicationInfo
	 * Size -> 0x0490 (FullSize[0x0960] - InheritedSize[0x04D0])
	 */
	class AYPlayerReplicationInfo : public APlayerState
	{
	public:
		unsigned char                                              UnknownData_KIUO[0x88];                                  // 0x04D0(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_lastTimeDealtDamage;                                   // 0x0558(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GIN9[0xF8];                                  // 0x055C(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_precastLoadoutID;                                      // 0x0654(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_nextPrecastLoadoutID;                                  // 0x0658(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0HDX[0x4];                                   // 0x065C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYShipLoadoutInfo                                   m_shipLoadoutInfo;                                       // 0x0660(0x0078) Net, Transient, NativeAccessSpecifierPublic
		struct FYShipLoadoutInfo                                   m_nextShipLoadoutInfo;                                   // 0x06D8(0x0078) Net, Transient, NativeAccessSpecifierPublic
		class UYProjectileReplicator*                              m_projReplicator;                                        // 0x0750(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_captainDisplayInformation;                             // 0x0758(0x0010) Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_finishedOrbitSelection;                                // 0x0768(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0H2Y[0x7];                                   // 0x0769(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYCaptain*                                           m_captain;                                               // 0x0770(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringAssetReference                               m_captainBP;                                             // 0x0778(0x0010) Edit, ZeroConstructor, Config, NoClear, NativeAccessSpecifierPublic
		bool                                                       m_isReconnectingPlayer;                                  // 0x0788(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AMM5[0x17];                                  // 0x0789(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYPlayerReplicationInfo*>                     m_squadmatesWhoHaveAssistedList;                         // 0x07A0(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_fullRecoveryMinHealthAmt;                              // 0x07B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OHF7[0x14];                                  // 0x07B4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_canScoreFullRecovery;                                  // 0x07C8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRWC[0x33];                                  // 0x07C9(0x0033) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_score;                                                 // 0x07FC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYCreditsInfo                                       m_creditsInfo;                                           // 0x0800(0x0028) Net, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<struct FYEventInfo>                                 m_killsList;                                             // 0x0828(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYEventInfo>                                 m_deathsList;                                            // 0x0838(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_kills;                                                 // 0x0848(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_fighterJetKills;                                       // 0x084C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_deaths;                                                // 0x0850(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_fighterJetDeaths;                                      // 0x0854(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_assists;                                               // 0x0858(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_rampageCounter;                                        // 0x085C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_canScoreMayham;                                        // 0x0860(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N5ZO[0xA7];                                  // 0x0861(0x00A7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_totalDamageDealtWithWeapons;                           // 0x0908(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalDamageDealtWithAbilities;                         // 0x090C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalDamageReceived;                                   // 0x0910(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_damageReceivedOnShieldThisLife;                        // 0x0914(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_rawDamageReceivedTotal;                                // 0x0918(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_rawDamageReceivedThisLife;                             // 0x091C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalDamageReceivedOnShield;                           // 0x0920(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalHealingDone;                                      // 0x0924(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYScoringEventComponent*                             m_scoringEventComponent;                                 // 0x0928(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYXPManager*                                         m_xpManager;                                             // 0x0930(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYReputationManager*                                 m_reputationManager;                                     // 0x0938(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYTeam                                                     m_team;                                                  // 0x0940(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipClass                                                m_heroShipClass;                                         // 0x0941(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipClass                                                m_nextShipClass;                                         // 0x0942(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QLOP[0x1];                                   // 0x0943(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_playedShipClasses;                                     // 0x0944(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYFleetType                                                m_highestFleetUnlocked;                                  // 0x0948(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_usedTraderShip;                                        // 0x0949(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isSpotted;                                             // 0x094A(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KALA[0x5];                                   // 0x094B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYPlayerMatchStatisticsTestUtils*                    m_matchStatisticsTestUtils;                              // 0x0950(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RJFY[0x8];                                   // 0x0958(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateTeammatesList();
		void ServerReceiveLocalServerOTSData(TArray<struct FYJsonObjectRep> Data, EYTuneRepState State);
		void ServerInitializeScoringData(TArray<struct FYScoringEvent> scoringEvents);
		void OnRep_Team();
		void OnRep_Spotted();
		void OnRep_ShipClass();
		void OnRep_Kills();
		void OnRep_FinishedOrbitSelection();
		void OnRep_Deaths();
		void OnRep_Credits();
		void OnRep_CaptainData();
		void OnRep_Assists();
		void OnPlayerUniqueNetIDSignature__DelegateSignature();
		EYTeam GetTeam();
		EYShipClass GetShipClass();
		int32_t GetScore();
		float GetRawDamageReceivedTotal();
		float GetRawDamageReceivedThisLife();
		int32_t GetRampageCounter();
		float GetLastTimeDamagedEnemy(const class FName& enemyDamaged);
		struct FYEventInfo GetLastKill();
		struct FYEventInfo GetLastDeath();
		TArray<struct FYEventInfo> GetKillsList();
		int32_t GetKills();
		class FString GetHumanReadableName();
		float GetHealingDone();
		int32_t GetFighterJetKills();
		int32_t GetFighterJetDeaths();
		TArray<struct FYEventInfo> GetDeathsList();
		int32_t GetDeaths();
		float GetDamageReceivedOnShieldThisLife();
		float GetDamageReceived();
		float GetDamageDealtWithWeapons();
		float GetDamageDealtWithAbilities();
		int32_t GetAssists();
		void ClientSetTopPlayerMatchStats(TArray<struct FYPlayerMatchStat> playerMatchStats);
		void ClientSetEliteSharePlayers(TArray<class FString> playerNames);
		void ClientSetActiveBoosterIDs(TArray<int32_t> activeBoosterIDs);
		void ClientRequestOTSBunch();
		void ClientEventResult(const struct FYEventResponse& response);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YNPCReplicationInfo
	 * Size -> 0x0270 (FullSize[0x0670] - InheritedSize[0x0400])
	 */
	class AYNPCReplicationInfo : public AYNPCState
	{
	public:
		unsigned char                                              UnknownData_JEWE[0x90];                                  // 0x0400(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_currentPawn;                                           // 0x0490(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TSDX[0x8];                                   // 0x0498(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_captainDisplayInformation;                             // 0x04A0(0x0010) Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_precastLoadoutID;                                      // 0x04B0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2AD7[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYShipLoadoutInfo                                   m_shipLoadoutInfo;                                       // 0x04B8(0x0078) Net, Transient, NativeAccessSpecifierPublic
		class UYCaptain*                                           m_captain;                                               // 0x0530(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringAssetReference                               m_captainBP;                                             // 0x0538(0x0010) Edit, ZeroConstructor, Config, NoClear, NativeAccessSpecifierPublic
		bool                                                       m_npcFinishedOrbitSelection;                             // 0x0548(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IDXL[0x7];                                   // 0x0549(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYShipClass                                                m_currentShipClass;                                      // 0x0550(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipBaseClass                                            m_currentBaseClass;                                      // 0x0551(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IF98[0x2];                                   // 0x0552(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_shipTier;                                              // 0x0554(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_score;                                                 // 0x0558(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YLF4[0x4];                                   // 0x055C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYEventInfo>                                 m_killsList;                                             // 0x0560(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYEventInfo>                                 m_deathsList;                                            // 0x0570(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_kills;                                                 // 0x0580(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_fighterJetKills;                                       // 0x0584(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_deaths;                                                // 0x0588(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_fighterJetDeaths;                                      // 0x058C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_assists;                                               // 0x0590(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_rampageCounter;                                        // 0x0594(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_canScoreMayham;                                        // 0x0598(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SL7L[0xA7];                                  // 0x0599(0x00A7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_totalDamageDealtWithWeapons;                           // 0x0640(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalDamageDealtWithAbilities;                         // 0x0644(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalDamageReceived;                                   // 0x0648(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalDamageReceivedOnShieldThisLife;                   // 0x064C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_rawDamageReceivedTotal;                                // 0x0650(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_rawDamageReceivedThisLife;                             // 0x0654(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_totalHealingDone;                                      // 0x0658(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LZ2A[0x4];                                   // 0x065C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYScoringEventComponent*                             m_scoringEventComponent;                                 // 0x0660(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYTeam                                                     m_team;                                                  // 0x0668(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isSpotted;                                             // 0x0669(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U2VH[0x6];                                   // 0x066A(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnRep_Team();
		void OnRep_Spotted();
		void OnRep_ShipClass();
		void OnRep_Score();
		void OnRep_NPCFinishedOrbitSelection();
		void OnRep_Kills();
		void OnRep_Deaths();
		void OnRep_CaptainData();
		void OnRep_Assists();
		EYTeam GetTeam();
		int32_t GetScore();
		float GetRawDamageReceivedTotal();
		float GetRawDamageReceivedThisLife();
		int32_t GetRampageCounter();
		struct FYEventInfo GetLastKill();
		struct FYEventInfo GetLastDeath();
		TArray<struct FYEventInfo> GetKillsList();
		int32_t GetKills();
		class FString GetHumanReadableName();
		float GetHealingDone();
		int32_t GetFighterJetKills();
		int32_t GetFighterJetDeaths();
		TArray<struct FYEventInfo> GetDeathsList();
		int32_t GetDeaths();
		float GetDamageReceivedOnShieldThisLife();
		float GetDamageReceived();
		float GetDamageDealtWithWeapons();
		float GetDamageDealtWithAbilities();
		int32_t GetAssists();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAICombatSceneManager
	 * Size -> 0x00C0 (FullSize[0x0480] - InheritedSize[0x03C0])
	 */
	class AYAICombatSceneManager : public AActor
	{
	public:
		TArray<struct FYCombatSceneSpawnData>                      m_sceneSpawns;                                           // 0x03C0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UDataAsset*                                          m_NPCSet;                                                // 0x03D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TAssetPtr<class UDataAsset>                                m_NPCSetPtr;                                             // 0x03D8(0x001C) ELEMENT_SIZE_MISMATCH Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ARW0[0x4];                                   // 0x03F4(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		bool                                                       m_isNPCSetLoaded;                                        // 0x03F8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YF1R[0x3];                                   // 0x03F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_refreshShipListsInterval;                              // 0x03FC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q42R[0x8];                                   // 0x0400(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      m_heroClasses;                                           // 0x0408(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4W4C[0x2C];                                  // 0x0418(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_paused;                                                // 0x0444(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WUPW[0x3B];                                  // 0x0445(0x003B) MISSED OFFSET (PADDING)

	public:
		void StandaloneStartCombat();
		class AActor* SpawnTurret(const struct FVector& Location, class UClass* turretClass, EYTeam Team, int32_t scriptId);
		class AYPawn* SpawnCreep(class UClass* creepClass, class AYCreepNavigation* spawnPoint, EYTeam Team);
		TArray<int32_t> ShowHUDNPCs();
		void SetOnlyTarget(class AActor* targetActor, class AActor* turretActor);
		void SetHUDmisc(int32_t npcIndex, const class FName& mistText);
		void SetFavorTarget(class AActor* targetActor, class AActor* turretActor);
		TArray<class AController*> SendTeamShortCommand(class AActor* commander, EYUIShortCommands shortCommandId, class AYPawn* targetPawn, EYTeam Team, int32_t Priority, int32_t desiredComplyCount, float desiredComplyDuration);
		void ReplacePawnNPCBehaviours(class AYPawn* Pawn, TArray<struct FYCombatSceneBehaviorData> newBehaviors, bool disabeBehaviourTree);
		void ReplaceNPCBehaviours(int32_t ID, TArray<struct FYCombatSceneBehaviorData> newBehaviors, bool disabeBehaviourTree);
		void OnAsyncLoadedNPCSet();
		void LoadNPCSet(bool loadAsync);
		bool IsNPCDead(int32_t ID);
		TArray<int32_t> InstancedTeamNPCs(int32_t Team);
		TArray<int32_t> InstancedNPCs();
		class FString GetNPCLoadoutUINameByDataset(const class FName& pawnid);
		int32_t GetNPCId(class AYPawn* Pawn);
		class AYPawn* GetNPC(int32_t ID);
		struct FYnpcHUD GetHUDNPC(int32_t npcIndex);
		void Cleanup();
		int32_t AddNPCSpawnByDataset(const class FName& pawnid, const class FName& spawnName, class AActor* spawnPoint, EYTeam Team, const class FName& uiName);
		int32_t AddNPCSpawn(const struct FYCombatSceneSpawnData& spawnData);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAimAssistComponent
	 * Size -> 0x0098 (FullSize[0x0190] - InheritedSize[0x00F8])
	 */
	class UYAimAssistComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_62T4[0x98];                                  // 0x00F8(0x0098) MISSED OFFSET (PADDING)

	public:
		void OnMovementInput(float Val);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAnimInstanceCharacter
	 * Size -> 0x0020 (FullSize[0x0498] - InheritedSize[0x0478])
	 */
	class UYAnimInstanceCharacter : public UAnimInstance
	{
	public:
		TArray<struct FYAnimationsForEndOfMatchEntry>              m_animationsForEndOfMatch;                               // 0x0478(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		struct FYAnimationsForEndOfMatchEntry                      m_animationsSingleView;                                  // 0x0488(0x0010) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		TArray<TAssetPtr<class UAnimSequence>> RetrieveEndOfMatchAnimations();
		void OnSelectAnimationSequencesForEndOfMatch(int32_t index, TArray<class UAnimSequence*>* outAnimationSequences);
		void OnRetriveAnimationsFromEndOfMatchEntry(const struct FYAnimationsForEndOfMatchEntry& entry, TArray<class UAnimSequence*>* outAnimationSequences);
		void OnPlayFacialAnimation(class UAnimSequence* AnimSequence, float AnimProgress);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YContractsManager
	 * Size -> 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
	 */
	class UYContractsManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_JNQP[0x108];                                 // 0x0028(0x0108) MISSED OFFSET (PADDING)

	public:
		void HandleOnPlayerControllerSet(class AYPlayerControllerBase* PlayerController);
		void HandleOnPlayerContractsUpdated();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAnnouncementManager
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UYAnnouncementManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_B0N7[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (PADDING)

	public:
		void HandleRefreshGoalAnnouncements();
		void HandleOnSquadInvitesUpdated();
		void HandleOnRewardUpdated(const class FName& goalId, bool succeed, const class FString& message);
		void HandleOnPlayerDataLoaded();
		void HandleOnPlayerControllerSet(class AYPlayerControllerBase* PlayerController);
		void HandleOnFriendlistRefreshed();
		void HandleOnCustomMatchInviteListRefreshed(TArray<struct FYCustomMatchInvite> invites);
		void HandleOnCompletedContractsFromRecentGame();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAnnouncementManagerPS4
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UYAnnouncementManagerPS4 : public UYAnnouncementManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAssetLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYAssetLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAStar
	 * Size -> 0x00D8 (FullSize[0x0498] - InheritedSize[0x03C0])
	 */
	class AYAStar : public AActor
	{
	public:
		unsigned char                                              UnknownData_RRPX[0xD8];                                  // 0x03C0(0x00D8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBaseCharacter
	 * Size -> 0x0110 (FullSize[0x04D0] - InheritedSize[0x03C0])
	 */
	class AYBaseCharacter : public AActor
	{
	public:
		unsigned char                                              UnknownData_TXCR[0x70];                                  // 0x03C0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isUsingAnimationBlueprintFromCharacterTemplate;        // 0x0430(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N4YM[0x7];                                   // 0x0431(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYCharacterAppearance                               m_characterAppearance;                                   // 0x0438(0x0068) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              m_characterMesh;                                         // 0x04A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYCharacterSpawner*                                  m_owningSpawner;                                         // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RZZ3[0x20];                                  // 0x04B0(0x0020) MISSED OFFSET (PADDING)

	public:
		void PlayAnimation(class UAnimationAsset* anim, bool bLooping, bool initAnim);
		void OnAsyncLoadCharacterItemsDone(int32_t loadRequestID);
		void ApplyCharacterAppearance();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterTemplate
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UYCharacterTemplate : public UDataAsset
	{
	public:
		TArray<class UYCharacterCustomizationMesh*>                m_meshes;                                                // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYCharacterCustomizationMaterial*>            m_materials;                                             // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UYCharacterCustomizationGender*                      m_gender;                                                // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimBlueprintGeneratedClass*                        m_animationBlueprint;                                    // 0x0050(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class FName GetGenderTag();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInterface_Character
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYInterface_Character : public UInterface
	{
	public:
		class USkeletalMesh* RetrieveMesh();
		bool HasOnlySubtitlesInComWindow();
		class FName GetGender();
		class FName GetCharacterTag();
		class FString GetCharacterName();
		class UTexture* GetCharacterImage();
		struct FYCharacterAppearance GetCharacterAppearance();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YStaticCharacter
	 * Size -> 0x0030 (FullSize[0x0500] - InheritedSize[0x04D0])
	 */
	class AYStaticCharacter : public AYBaseCharacter
	{
	public:
		class FName                                                m_characterTag;                                          // 0x04D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                m_characterName;                                         // 0x04D8(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FName                                                m_gender;                                                // 0x04F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_hasOnlySubtitlesInComWindow;                           // 0x04F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ET2E[0x7];                                   // 0x04F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDeployableActor
	 * Size -> 0x0070 (FullSize[0x0430] - InheritedSize[0x03C0])
	 */
	class AYDeployableActor : public AActor
	{
	public:
		struct FVector                                             m_deployactorVelocity;                                   // 0x03C0(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_launchSpeed;                                           // 0x03CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_inheritStartVelocity;                                  // 0x03D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5546[0x3];                                   // 0x03D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_breakSpeed;                                            // 0x03D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_disableTickWhenStoped;                                 // 0x03D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_ownerAbilityClassID;                                   // 0x03DC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_lifeTime;                                              // 0x03E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_lifetimeAfterOwnerDeath;                               // 0x03E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_health;                                                // 0x03E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R5PA[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_deploymentTime;                                        // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_maxConcurrentActors;                                   // 0x03F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H06S[0x8];                                   // 0x03F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTeam                                                     m_teamID;                                                // 0x0400(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipClass                                                m_hudTargetMarkerClass;                                  // 0x0401(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WK5U[0xE];                                   // 0x0402(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYCachedDamageModifierData                          m_cachedDamageModifierData;                              // 0x0410(0x000C) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AWFH[0xC];                                   // 0x041C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_audioExplodeEvent;                                     // 0x0428(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ReceiveOnRepTeamID(EYTeam teamID);
		void OnRep_TeamID();
		void OnOwningActorDeath();
		void OnOwnerEnergyWheelFunctionActivated(EYEnergyWheelSelection EnergyWheelSelection);
		float GetHealth();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSupportStationActor
	 * Size -> 0x0030 (FullSize[0x0460] - InheritedSize[0x0430])
	 */
	class AYSupportStationActor : public AYDeployableActor
	{
	public:
		class UDataTable*                                          m_abilityDataTable;                                      // 0x0430(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LBD3[0x18];                                  // 0x0438(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_lifeRegenInterval;                                     // 0x0450(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_healingRadius;                                         // 0x0454(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_lifePerInterval;                                       // 0x0458(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1XLT[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnHealWaveTriggered();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSettingsDataAsset
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UYSettingsDataAsset : public UDataAsset
	{
	public:
		TArray<struct FYUIUserSetting>                             m_graphicsSettings;                                      // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIUserSetting>                             m_scalabilitySettings;                                   // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIUserSetting>                             m_advGraphicsSettings;                                   // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIUserSetting>                             m_audioSettings;                                         // 0x0058(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIUserSetting>                             m_gameSettings;                                          // 0x0068(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIUserSetting>                             m_controlSettings;                                       // 0x0078(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIUserSetting>                             m_matchmakingSettings;                                   // 0x0088(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3FIA[0x10];                                  // 0x0098(0x0010) MISSED OFFSET (PADDING)

	public:
		float GetUniqueSettingValue(const struct FYUIUserSetting& userSetting);
		struct FYUIUserSetting GetUniqueSettingByCategory(EYUISettingCategory Category, EYUISettingCategory uniqueCategory);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCustomMatchSettingsDataAsset
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UYCustomMatchSettingsDataAsset : public UDataAsset
	{
	public:
		class FString                                              m_defaultGameMode;                                       // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_defaultMapName;                                        // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYUICustomMatchSetting>                      m_settings;                                              // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDreadGameUserSettings
	 * Size -> 0x0108 (FullSize[0x0210] - InheritedSize[0x0108])
	 */
	class UYDreadGameUserSettings : public UGameUserSettings
	{
	public:
		unsigned char                                              UnknownData_XQE8[0x4];                                   // 0x0108(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DNVersion;                                               // 0x010C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              userLoginName;                                           // 0x0110(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       rememberMe;                                              // 0x0120(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LSX7[0x7];                                   // 0x0121(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                pinnedGoal;                                              // 0x0128(0x0008) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       crossTeamVoiceChatEnabled;                               // 0x0130(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1HGN[0x7];                                   // 0x0131(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FStringAssetReference                               m_settingsDataAssetPath;                                 // 0x0138(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		struct FStringAssetReference                               m_settingsDataAssetPath_PS4;                             // 0x0148(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPeripheralEffectsChanged;                              // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3AQR[0x80];                                  // 0x0168(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYSettingsDataAsset*                                 m_settingsDataAsset;                                     // 0x01E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DA2P[0x20];                                  // 0x01F0(0x0020) MISSED OFFSET (PADDING)

	public:
		void YDreadGameUserSettingsAndValueDelegate__DelegateSignature(class UYDreadGameUserSettings* source, float Value);
		bool IsMinimapRotationAllowed();
		float GetWeaponShootSoundRelevancyDistance();
		bool GetShowSubtitles();
		bool GetShowAimVignette();
		class FString GetScreenResolution();
		float GetProjectileTickFrequencyMedium();
		float GetProjectileTickFrequencyFar();
		float GetProjectileTickFrequencyDistanceMedium();
		float GetProjectileTickFrequencyDistanceFar();
		float GetProjectileThrusterSoundRelevancyDistance();
		float GetProjectileForceUpdateOnDistance();
		bool GetPeripheralEffects();
		float GetMuzzleFXCullDist();
		float GetImpactFxRelevancyDistance();
		float GetHitMaskRelevancyDistance();
		bool GetFilterChat();
		float GetDecalRelevancyDistance();
		class UYSettingsDataAsset* GetDataAsset();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_YLineTraceSingle(const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, bool bDrawDebug, struct FHitResult* OutHit, class AActor* IgnoreActor);
		void STATIC_YApplyRadialDamage(const struct FVector& Origin, float BaseDamage, float Radius, class AController* eventInstigator, class UObject* DamageCauser, class UClass* DamageTypeClass, bool ignoreShield, bool friendlyFire, class UCurveFloat* damageDistanceCurve, class AActor* directHitActor, bool exactHitDetection);
		void STATIC_YApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* eventInstigator, class UObject* DamageCauser, class UClass* DamageTypeClass, bool ignoreShield, bool friendlyFire, bool radial);
		void STATIC_TriggerVoiceLineByID(int32_t uid, class AYPlayerController* Player, const struct FLatentActionInfo& LatentInfo);
		void STATIC_TriggerVoiceLine(class UYVoiceLineUnique* voiceLine, class AYPlayerController* Player, const struct FLatentActionInfo& LatentInfo);
		void STATIC_TriggerAudioFeedbackOnPlayer(const class FName& voiceID, class AYPawn* Pawn);
		void STATIC_TriggerAudioFeedbackOnAllPlayerTeamBased(EYTeam teamFriendly, const class FName& voiceIDFriendly, const class FName& voiceIDEnemy);
		void STATIC_TriggerAudioFeedbackOnAllPlayer(const class FName& voiceID);
		void STATIC_TravelBackToOutpost(class AYPlayerController* owningController);
		class FString STATIC_StringReplaceUnderscoreWithSpace(const class FString& inString);
		class AYProjectile* STATIC_SpawnProjectile(class UObject* WorldContextObject, class UBlueprint* projectileBlueprint, const class FName& projectileDataRowName, bool loadContent, const struct FTransform& projectileTransform, class AYWeapon* firingWeapon, int32_t projectileID, const struct FYCachedDamageModifierData& damageModifierData, int32_t randomSeed);
		class AActor* STATIC_SpawnDecalAtLocationReturnActor(class UObject* WorldContextObject, class UBlueprint* decalBlueprint, const struct FVector& Location, const struct FRotator& Rotation);
		void STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UBlueprint* decalBlueprint, const struct FVector& Location, const struct FRotator& Rotation);
		float STATIC_SizeSquared(const struct FVector& inVector);
		void STATIC_ShowHUDMessageForController(float TimeSeconds, const class FString& headLine, const class FString& message, class AYPlayerControllerBase* onlyThisController);
		bool STATIC_ShouldTickProjectile(const struct FVector& Location, float timeSinceLastTick, float distanceSinceLastUpdate);
		void STATIC_SetWwiseAudioEnabled(bool turnOn);
		void STATIC_SetPPF(const class FName& progressionFlagName, bool Value);
		void STATIC_SetLoadoutFilterForPlayer(class UYLoadoutFilter* loadoutFilter, class APlayerController* PC);
		class AYPawn* STATIC_QuickOverlapTest(class AActor* actorToCheck, float radiusSqr);
		TArray<class AYPawn*> STATIC_QuickOverlapAllTest(class AActor* actorToCheck, float radiusSqr);
		void STATIC_OpenLoadingScreen(class UTexture2D* Texture, const class FText& titleText, const class FText& descriptionText, const class FText& gameModeText);
		bool STATIC_NetModeIsStandalone(class UObject* WorldContextObject);
		bool STATIC_NetModeIsServer(class UObject* WorldContextObject);
		bool STATIC_NetModeIsListen(class UObject* WorldContextObject);
		bool STATIC_NetModeIsDedicatedServerWorld(class UObject* WorldContextObject);
		bool STATIC_NetModeIsDedicatedServer(class UObject* WorldContextObject);
		bool STATIC_NetModeIsClientOrStandalone(class UObject* WorldContextObject);
		bool STATIC_NetModeIsClient(class UObject* WorldContextObject);
		struct FYTargetInfo STATIC_MakeTargetInfo(class AActor* Actor, const struct FVector& StartLocation, const struct FVector& endLocation, bool hasHit);
		TArray<class FString> STATIC_LinebreakString(const class FString& str, float targetWidth, class UFont* Font, float Scale);
		bool STATIC_IsWeaponShootSoundRelevant(const struct FVector& SpawnLocation);
		bool STATIC_IsProjectileThrusterSoundRelevant(const struct FVector& SpawnLocation, class UObject* WorldContextObject);
		bool STATIC_IsNearlyEqual(float ValueA, float ValueB);
		bool STATIC_IsMuzzleFlashRelevant(const struct FVector& SpawnLocation, class UObject* WorldContextObject);
		bool STATIC_IsMultiplayerGame();
		bool STATIC_IsImpactFxRelevant(const struct FVector& SpawnLocation, class UObject* WorldContextObject);
		bool STATIC_IsHitMaskRelevant(const struct FVector& SpawnLocation);
		bool STATIC_IsHitmaskEnabled();
		bool STATIC_IsFriendlyTeam(EYTeam teamOne, EYTeam teamTwo);
		bool STATIC_IsFriendly(class AYPawn* pawnOne, class AYPawn* pawnTwo);
		bool STATIC_IsDecalRelevant(const struct FVector& SpawnLocation);
		bool STATIC_IsAVSMSupported();
		bool STATIC_IsAVSMEnabled();
		TArray<class AYPlayerController*> STATIC_GetYPlayerControllerList();
		TArray<class AYPawn*> STATIC_GetYPawnsInRange(class AActor* contextActor, const struct FVector& Location, float Radius, EYTeam Team, EYTeam excludeTeam, bool includeRespawnJets, bool includeCreeps);
		TArray<class AYPawn*> STATIC_GetYPawns(class AActor* contextObject, EYTeam Team, bool includeFighterJets, bool includeCreeps);
		class AYMenu* STATIC_GetYMenu();
		float STATIC_GetWorldGravityZ(class AActor* referenceActor);
		struct FVector STATIC_GetWorldGravityVector(class AActor* referenceActor);
		class UWorld* STATIC_GetWorldFromActor(class AActor* referenceActor);
		class UTexture2D* STATIC_GetTexture2DFromPath(const class FString& Path);
		TArray<class AYSupportStationActor*> STATIC_GetSupportStationList();
		float STATIC_GetSquaredDistToShield(class AYEnergyShield* shieldToCheck, const struct FVector& checkLocation, bool exactCheck);
		float STATIC_GetSquaredDistToPawn(class AYPawn* pawnToCheck, const struct FVector& checkLocation, bool exactCheck);
		TArray<struct FYSquadUserDataBP> STATIC_GetSquadList();
		class FText STATIC_GetShipVanityTypeAsText(EYVanityItemMenuCategorie shipVanityItemCategory);
		class FText STATIC_GetShipClassNameAsText(EYShipClass shipSubClass);
		class FString STATIC_GetShipClassName(EYShipClass shipSubClass);
		class FText STATIC_GetShipBaseClassNameAsText(EYShipBaseClass shipBaseClass);
		class FString STATIC_GetShipBaseClassName(EYShipBaseClass shipBaseClass);
		EYShipBaseClass STATIC_GetShipBaseClassForShipClass(EYShipClass shipclass);
		bool STATIC_GetPPF(const class FName& progressionFlagName);
		class UYPerkManager* STATIC_GetPerkManager(class AYPawn* Pawn);
		TArray<class APawn*> STATIC_GetPawnList(const struct FVector& Location, float Radius);
		TArray<struct FYFriendDataBP> STATIC_GetOnlineFriendList();
		class UYOfficerManager* STATIC_GetOfficerManager(class AYPawn* Pawn);
		class FString STATIC_GetOfficerClassName(EYOfficerType officerType);
		class UYOfficer* STATIC_GetOfficerByType(EYOfficerType Type);
		void STATIC_GetObjectiveComponent(class AActor* Actor, class UYObjectiveComponent** objectiveComponent, bool* isExist);
		EYShipClass STATIC_GetMediumShipClassForShipBaseClass(EYShipBaseClass shipBaseClass);
		int32_t STATIC_GetMaxInitialDeathDebris();
		bool STATIC_GetIsInSquad();
		TArray<struct FYFriendDataBP> STATIC_GetFriendList();
		float STATIC_GetFPS();
		class FText STATIC_GetFleetTypeName(EYFleetType fleetType);
		class APlayerController* STATIC_GetFirstLocalPlayerControllerInWorld(class UObject* WorldContextObject);
		class APlayerController* STATIC_GetFirstLocalPlayerController(class UObject* WorldContextObject);
		TArray<struct FYDamageableActorInfo> STATIC_GetDamagableActorList(class AActor* referenceActor, const struct FVector& Location, float Radius, bool exactHitDetection);
		class FName STATIC_GetCurrentPlayerPID();
		class AYAICombatSceneManager* STATIC_GetCombatSceneManager();
		struct FVector STATIC_GetClosestPointOnLineSegment(const struct FVector& testPos, const struct FVector& LineStart, const struct FVector& LineEnd);
		TArray<class AYPawn*> STATIC_GetClosestPair(TArray<class AYPawn*> Actors);
		EYCharacterRenderingLOD STATIC_GetCharacterRenderingLOD();
		class FText STATIC_GetCaptainVanityTypeAsText(EYCharacterVanityItemMenuCategory characterVanityItemCategory);
		class UYCaptain* STATIC_GetCaptain();
		class UClass* STATIC_GetCappedByTierAbility(int32_t maxTier, class UClass* ability, bool mustFind);
		class FString STATIC_GetBestMatchingString(TArray<class FString> sourceStrings, const class FString& stringToTest);
		TArray<class APawn*> STATIC_GetAllPawns();
		TArray<class AActor*> STATIC_GetActorListByDistanceAndClass(const struct FVector& Location, float Radius, class UClass* cls);
		TArray<class AActor*> STATIC_GetActorListByClass(class UClass* cls);
		TArray<class AActor*> STATIC_GetActorList(const struct FVector& Location, float Radius);
		void STATIC_FlushAnalyticsEvents();
		void STATIC_FinishedLoading();
		class FString STATIC_ExtractClassStringFromPath(const class FString& Path);
		EYShipBaseClass STATIC_ExtractClassFromPath(const class FString& Path);
		void STATIC_ExitGame(class AYPlayerController* owningController);
		bool STATIC_DotShipAndRay(class AYPawn* pawnToCheck, const struct FVector& rayOrigin, const struct FVector& normalizedRayDirection, float* outDotProduct);
		void STATIC_DisableAllPS4Callouts();
		class FText STATIC_Conv_StringToTextNonPlayerFacing(const class FString& inString);
		class FText STATIC_Conv_NameToTextNonPlayerFacing(const class FName& InName);
		bool STATIC_ComponentIsVisibleFrom(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, class AActor* IgnoredActor, struct FHitResult* OutHitResult);
		void STATIC_CloseLoadingScreen();
		void STATIC_ClearLoadoutFilterForPlayer(class APlayerController* PC);
		int32_t STATIC_CalloutButtonEnableSlot(EYUILoadoutItemType loadoutType, EYButtonStateAfterClick handleClickState, bool preserveScreenLockState);
		int32_t STATIC_CalloutButtonEnableByString(const class FString& Name, EYButtonStateAfterClick handleClickState, bool preserveScreenLockState);
		int32_t STATIC_CalloutButtonEnableByName(class UYUINavigationElement* element, EYButtonStateAfterClick handleClickState, bool preserveScreenLockState);
		int32_t STATIC_CalloutButtonEnableByIDWithoutInflatedIDs(class UClass* element, EYButtonStateAfterClick handleClickState, bool preserveScreenLockState);
		int32_t STATIC_CalloutButtonEnableByID(class UClass* element, EYButtonStateAfterClick handleClickState, bool preserveScreenLockState);
		void STATIC_CalloutButtonDisableByString(const class FString& Name);
		void STATIC_CalloutButtonDisableByName(class UYUINavigationElement* element);
		void STATIC_CalloutButtonDisableByIntegerItemID(int32_t itemID);
		void STATIC_CalloutButtonDisableByID(class UClass* element);
		int32_t STATIC_CalloutButtonByIntegerItemID(int32_t itemID, EYButtonStateAfterClick handleClickState, bool preserveScreenLockState);
		void STATIC_CalloutButtonByHowToStepEnum(EYCareerProgressionHowToStepEnum_PS4 howToStep);
		int32_t STATIC_CalloutAlwaysUnlockButtonEnableSlot(EYUILoadoutItemType loadoutType);
		int32_t STATIC_CalloutAlwaysUnlockButtonEnableByString(const class FString& Name);
		int32_t STATIC_CalloutAlwaysUnlockButtonEnableAddLoadout();
		void STATIC_CalloutAlwaysUnlockButtonDisableSlot(EYUILoadoutItemType loadoutType);
		void STATIC_CalloutAlwaysUnlockButtonDisableByString(const class FString& Name);
		void STATIC_CalloutAlwaysUnlockButtonDisableByName(class UYUINavigationElement* element);
		void STATIC_CalloutAlwaysUnlockButtonDisableByID(class UClass* element);
		void STATIC_CalloutAlwaysUnlockButtonDisableAddLoadout();
		void STATIC_BreakTargetInfo(const struct FYTargetInfo& targetInfo, class AActor** Actor, struct FVector* StartLocation, struct FVector* endLocation, bool* hasHit);
		bool STATIC_ApplyRadialHealth(class UObject* WorldContextObject, float BaseHealth, const struct FVector& Origin, float HealthRadius, class UClass* DamageTypeClass, class AActor* HealingCauser, class AController* InstigatedByController, bool bDoFullHealing);
		void STATIC_ApplyPointHealth(class AActor* HealedActor, float BaseHealth, const struct FVector& HealFromDirection, const struct FHitResult& HitInfo, class AController* eventInstigator, class AActor* HealCauser, class UClass* DamageTypeClass);
		void STATIC_ApplyHealth(class AActor* HealedActor, float BaseHealth, class AController* eventInstigator, class AActor* HealCauser, class UClass* DamageTypeClass);
		void STATIC_AnalyticsSendTutorialEvent(class AYGameMode* GameMode, int32_t stepId, const class FString& stepName);
		void STATIC_AnalyticsSendButtonEvent(const class FString& Name, const class FString& parentName);
		void STATIC_AddMapCheck(EYE_MCType MessageType, class UObject* Owner, const class FString& Text, const class FString& URL);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterAssetConditional
	 * Size -> 0x0008 (FullSize[0x0170] - InheritedSize[0x0168])
	 */
	class UYBoosterAssetConditional : public UYBoosterAssetBase
	{
	public:
		class UClass*                                              m_conditionClass;                                        // 0x0168(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGoldMembership
	 * Size -> 0x0000 (FullSize[0x0168] - InheritedSize[0x0168])
	 */
	class UYGoldMembership : public UYBoosterAssetBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLEDPeripheralEffectActor
	 * Size -> 0x0000 (FullSize[0x03C0] - InheritedSize[0x03C0])
	 */
	class AYLEDPeripheralEffectActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerControllerBase
	 * Size -> 0x03D0 (FullSize[0x0AC0] - InheritedSize[0x06F0])
	 */
	class AYPlayerControllerBase : public APlayerController
	{
	public:
		class FScriptMulticastDelegate                             OnGamePaused;                                            // 0x06F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameResumed;                                           // 0x0700(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerAvailable;                                  // 0x0710(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerAway;                                            // 0x0720(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerReturned;                                        // 0x0730(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9VL7[0x8];                                   // 0x0740(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYInputDescription>                          m_inputDescriptions;                                     // 0x0748(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8LUX[0xE8];                                  // 0x0758(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAnyKeyPressed;                                         // 0x0840(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SSPO[0xE0];                                  // 0x0850(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYLEDLightingComponent*                              m_ledLightingComponent;                                  // 0x0930(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UInputComponent*                                     m_promptInputComponent;                                  // 0x0938(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HQUM[0x18];                                  // 0x0940(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYFleetManager*                                      m_fleetManager;                                          // 0x0958(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYProgressionManagerBase*                            m_progressionManager;                                    // 0x0960(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYInventoryManager*                                  m_inventoryManager;                                      // 0x0968(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYOfficerManager*                                    m_officerManager;                                        // 0x0970(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYBoosterComponent*                                  m_boosterComponent;                                      // 0x0978(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYGoldMembershipComponent*                           m_goldMembershipComponent;                               // 0x0980(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYCaptain*                                           m_captain;                                               // 0x0988(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FStringAssetReference                               m_captainBP;                                             // 0x0990(0x0010) Edit, ZeroConstructor, Config, NoClear, Protected, NativeAccessSpecifierProtected
		class UYComVOComponent*                                    m_comVOComponent;                                        // 0x09A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYLoadoutManagerComponent*                           m_loadoutManager;                                        // 0x09A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_soundEventPauseSound;                                  // 0x09B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_soundEventResumeSound;                                 // 0x09B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_soundEventMuteMusicBus;                                // 0x09C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_soundEventUnMuteMusicBus;                              // 0x09C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_playerIsAway;                                          // 0x09D0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isLateJoiner;                                          // 0x09D1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_63KX[0xE];                                   // 0x09D2(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_peripheralEffectActorClassToSpawn;                     // 0x09E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPawnChanged;                                           // 0x09E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateAvaiable;                                   // 0x09F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerDataAvaiable;                                    // 0x0A08(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDataManagerInitialized;                                // 0x0A18(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PYD0[0x78];                                  // 0x0A28(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYPlayerMPQuestCycle*                                m_multiplayerQuestCycle;                                 // 0x0AA0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6R5Y[0x8];                                   // 0x0AA8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYDreadnoughtLocalPlayer*                            m_localPlayer;                                           // 0x0AB0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IF2M[0x8];                                   // 0x0AB8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnMuteMusicBus();
		void TutorialFinished();
		void SubtractFromPlayerCurrency(EYCurrency currency, int32_t amount, const class FString& transactionName);
		void StopRemainingGameTime();
		void StopMovieExec();
		void StopMovie();
		void StartRemainingGameTime();
		void ShowTargetDebugAI();
		void SetRemainingGameTime(int32_t newRemainingTime);
		void SetLateJoiner();
		void ServerShowTargetDebugAI(const struct FVector& viewPos, const struct FVector& viewDir);
		void ServerSetPlayerAway(bool away, bool idleKickEnabled);
		void ServerEnableScoringSystem(bool bEnable);
		void Server_ClientFinishedPath(int32_t pathId, TArray<struct FVector> resultPath, bool reachedGoal, float timeCalculating);
		void ResetOnboardingEventManager();
		void RefreshGoalUIGuideEvent();
		void PrintFeats();
		void PlayMovieExec(const class FName& ID);
		void PlayMovieByID(const class FName& movieID, bool loop, const struct FLatentActionInfo& LatentInfo);
		void PauseMovie();
		void OnPreSendPlayerData();
		void OnPlayerStateAvaiable__DelegateSignature();
		void OnPlayerReturned__DelegateSignature();
		void OnPlayerDataAvailable();
		void OnPlayerDataAvaiable__DelegateSignature();
		void OnPlayerAway__DelegateSignature();
		void OnPawnChanged__DelegateSignature(class AYPawn* NewPawn);
		void OnOnboardingInitialized();
		void OnOnboardingEvent(const class FName& trigeredRule);
		void OnOfficerManagerInitializationComplete();
		void OnMovieStopped();
		void OnMovieStarted(const class FString& URL);
		void OnLocalPlayerSet();
		void OnLocalPlayerAvailable__DelegateSignature();
		void OnGoalUIGuideEvent(const class FName& goalId);
		void OnGoalRewardEvent(const class FName& goalId);
		void OnGoalReadyToBeClaimedEvent(const class FName& goalId);
		void OnGoalPinnedEvent(const class FName& goalId);
		void OnGoalManagerInitialized();
		void OnGoalCategoryUnlockedEvent(EYGoalCategory Category);
		void OnFleetInitializationComplete();
		void OnDataManagerInitialized__DelegateSignature();
		bool OnCalloutButtonClicked(int32_t calloutButtonClicked);
		void OnAnyKeyPressed__DelegateSignature();
		void NotifyOnboardingTutorialFinished();
		void NotifyGamePause__DelegateSignature();
		void MuteMusicBus();
		void MinimapZoomCycle();
		void MarkTarget();
		bool IsSinglePlayerController();
		bool IsPlayerAway();
		bool IsMoviePlaying();
		bool IsLateJoiner();
		void InitDataManager();
		void HandleLeftMouseButtonReleased();
		void HandleLeftMouseButtonPressed();
		void HandleGamepadInputPressed();
		void HandleAnyKeyReleased();
		void HandleAnyKeyPressed();
		void GiveCurrency(int32_t currency, int32_t amount);
		class UYPlayerInput* GetYPlayerInput();
		class AYPawn* GetYPawn();
		class UYXPManager* GetXPManager();
		class UYDreadnoughtLocalPlayer* GetSPLocalPlayer();
		class UYScoringEventComponent* GetScoringComponent();
		class UYReputationManager* GetReputationManager();
		class UYProgressionManagerClient* GetProgressionManagerClient();
		class UYProgressionManagerBattleServer* GetProgressionManagerBattleServer();
		class UYProgressionManagerBase* GetProgressionManagerBase();
		class AYPlayerReplicationInfo* GetPlayerReplicationInfo();
		int32_t GetPlayerCurrency(EYCurrency currency);
		class UYPeripheralEventMgr* GetPeripheralEventMgr();
		class AYCheatManager* GetOrCreateCheatManager();
		class UYOnboardingManager* GetOnboardingEventManager();
		class UYOfficerManager* GetOfficerManager();
		class UYMovieManager* GetMovieManager();
		class UMediaPlayer* GetMediaPlayer();
		class UYLoadoutManagerComponent* GetLoadoutManager();
		class UYInventoryManager* GetInventoryManager();
		class UYGoldMembershipComponent* GetGoldMembershipComponent();
		class UYGoalManager* GetGoalManager();
		class UYFleetManager* GetFleetManager();
		class UClass* GetDefaultPeripheralEffectsClassForBattle();
		class FString GetCurrentMapName();
		class AYAICombatSceneManager* GetCombatManager();
		class UYCaptain* GetCaptain();
		class UYBoosterComponent* GetBoosterComponent();
		void ForceUnloadLevel(const class FName& LevelName);
		void ForceUnloadAllLevels();
		void ForceLoadLevel(const class FName& LevelName);
		void ForceLoadAllLevels();
		void EnableScoringSystem(bool bEnable);
		void DumpOnboardingStates();
		void DumpOnboardingQueue();
		void DumpGoals();
		void ClientSetActiveFleetId(const class FName& fleetId);
		void Client_StartDistributedPath(int32_t pathId, int32_t maxPathSize, const struct FVector& Start, float filterCloserThanSqr, int32_t tunnelSize, const struct FVector& Target, int32_t maxExpansions, float targetCover, float coverPenalty, float awayFromGoal, bool awayFromGoalXYAxesOnly, float turnPenalty, float turnPenaltyDPD, float turnPenaltyMaxD, const struct FVector& turnStart, const struct FVector& avoidActorLocation, float avoidActorRadius, float avoidActorPenalty, int32_t smoothMaxConsecutiveNodes, float smoothShipRadius, float smoothAllowAvoidAreaLoss, int32_t smoothAllowCoverLoss);
		void ClaimGoal(const class FName& goaldID);
		void CallSoundResumeEvent();
		void CallSoundPauseEvent();
		void AddPlayerCurrency(EYCurrency currency, int32_t amount, const class FString& transactionName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterComponentBase
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYBoosterComponentBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_7PDM[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYBoosterContainer>                          m_activeBoosters;                                        // 0x0030(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void RemoveBooster(int32_t itemID, const class FName& ownerID);
		void OnTeamBoosterRemoved(EYTeam Team, const struct FYBoosterContainer& booster);
		void OnTeamBoosterAdded(EYTeam Team, const struct FYBoosterContainer& booster);
		void AddBooster(int32_t itemID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterComponent
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UYBoosterComponent : public UYBoosterComponentBase
	{
	public:
		TArray<int32_t>                                            m_activeCommonBoosters;                                  // 0x0040(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate

	public:
		void UpdateBoosterConditions();
		void OnPlayerLeftMatch(class APlayerState* playerLeaving);
		void InitializeFromTeammatesPool();
		void InitializeFromInventory();
		void InitializeBoosters();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGoldMembershipComponent
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UYGoldMembershipComponent : public UYBoosterComponentBase
	{
	public:
		int32_t                                                    m_goldMembershipBoosterID;                               // 0x0040(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_25MU[0x14];                                  // 0x0044(0x0014) MISSED OFFSET (PADDING)

	public:
		void InitializeTeammatesGoldMembershipBonus();
		void InitializePlayerGoldMembership();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYBoosterCondition : public UObject
	{
	public:
		TWeakObjectPtr<class AYPlayerControllerBase>               m_owner;                                                 // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KT0G[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_AFK
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_AFK : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_BattleReadyLegendary
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_BattleReadyLegendary : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_BattleReadyRecruit
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_BattleReadyRecruit : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_BattleReadyVeteran
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_BattleReadyVeteran : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_FirstWinOfTheDay
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_FirstWinOfTheDay : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_GoldMember
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_GoldMember : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_LeaveMatch
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_LeaveMatch : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_MatchOutcome
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_MatchOutcome : public UYBoosterCondition
	{
	public:
		EYMatchOutcome                                             m_result;                                                // 0x0038(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7T70[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_TimeSinceLastMatch
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_TimeSinceLastMatch : public UYBoosterCondition
	{
	public:
		float                                                      m_hours;                                                 // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NXAK[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBoosterCondition_UsedTraderShip
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYBoosterCondition_UsedTraderShip : public UYBoosterCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBuffsComponent
	 * Size -> 0x0010 (FullSize[0x0108] - InheritedSize[0x00F8])
	 */
	class UYBuffsComponent : public UActorComponent
	{
	public:
		TArray<struct FYBuff>                                      m_activeBuffs;                                           // 0x00F8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void BuffEffectDeactivated(struct FYBuff* buff);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBugReporter
	 * Size -> 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
	 */
	class UYBugReporter : public UObject
	{
	public:
		unsigned char                                              UnknownData_86IT[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_bugReporterDataBaseAdress;                             // 0x00A0(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O3A0[0x90];                                  // 0x00B0(0x0090) MISSED OFFSET (PADDING)

	public:
		void OnBugReportCreated();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCachedItemIDData
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class UYCachedItemIDData : public UObject
	{
	public:
		TArray<struct FCachedItemIDDataEntry>                      m_cachedData;                                            // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, int32_t>                                     m_cachedDataLookup;                                      // 0x0038(0x0050) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void STATIC_FindItemIdsOfType(int32_t tier, EYCachedItemType Type, TArray<int32_t>* outIds, bool inflate);
		void STATIC_FindInflatedItemIDs(int32_t itemID, TArray<int32_t>* outIds);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterCustomizationAssetBase
	 * Size -> 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
	 */
	class UYCharacterCustomizationAssetBase : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_K9OS[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYCharacterCustomizationAssetBase*>           m_additionalSelectItems;                                 // 0x0030(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		EYCharacterVanityItemMenuCategory                          m_vanityItemCategory;                                    // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYCharacterGender                                          m_applicableGender;                                      // 0x0041(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5X3I[0x6];                                   // 0x0042(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0048(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0118(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ATT9[0x5];                                   // 0x011B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0120(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterCustomizationGender
	 * Size -> 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
	 */
	class UYCharacterCustomizationGender : public UYCharacterCustomizationAssetBase
	{
	public:
		class FName                                                m_genderTag;                                             // 0x0148(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCaptain
	 * Size -> 0x0138 (FullSize[0x0160] - InheritedSize[0x0028])
	 */
	class UYCaptain : public UObject
	{
	public:
		unsigned char                                              UnknownData_DRPB[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_jsonExportPath;                                        // 0x0030(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JAKM[0x90];                                  // 0x0040(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_thumbnailSize;                                         // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                m_characterTag;                                          // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYPlayerControllerBase*                              m_owner;                                                 // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYCharacterAppearance                               m_appearance;                                            // 0x00E8(0x0068) Protected, NativeAccessSpecifierProtected
		TArray<class UYCharacterTemplate*>                         m_characterBaseTemplates;                                // 0x0150(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void PlayerDisplayDataUpdated();
		void OnCaptainUpdateFailedSignature__DelegateSignature();
		void OnCaptainUpdatedSignature__DelegateSignature();
		void InitializeFromPlayerData();
		bool HasOnlySubtitlesInComWindow();
		class FName GetGender();
		class FName GetCharacterTag();
		class FString GetCharacterName();
		class UTexture* GetCharacterImage();
		struct FYCharacterAppearance GetCharacterAppearance();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerStart
	 * Size -> 0x0058 (FullSize[0x0448] - InheritedSize[0x03F0])
	 */
	class AYPlayerStart : public APlayerStart
	{
	public:
		EYTeam                                                     m_team;                                                  // 0x03F0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYShipClass                                                m_shipClass;                                             // 0x03F1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8XMY[0x6];                                   // 0x03F2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UClass>                                    m_shipLoadout;                                           // 0x03F8(0x001C) ELEMENT_SIZE_MISMATCH Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GBM2[0x4];                                   // 0x0414(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		EYGameModeFavourite                                        m_gameMode;                                              // 0x0418(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y4LT[0x3];                                   // 0x0419(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_radiusOfBlockByPawn;                                   // 0x041C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_teamFavourite;                                         // 0x0420(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_active;                                                // 0x0424(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_onlyFighterJets;                                       // 0x0425(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RQBQ[0x2];                                   // 0x0426(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               m_actorLinkedTo;                                         // 0x0428(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic
		struct FTimerHandle                                        m_timerHandle_CoolDown;                                  // 0x0430(0x0008) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EOXB[0x8];                                   // 0x0438(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPlayerController*                                  m_inUseByPlayer;                                         // 0x0440(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetPlayerStartTeam(EYTeam newTeam);
		void SetActive(bool Value);
		void OnPlayerSpawned();
		bool IsBlockedByPawn(const struct FVector& Location);
		bool IsActive();
		EYTeam GetPlayerStartTeam();
		class AActor* GetActorLinkedTo();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCapturePoint
	 * Size -> 0x0128 (FullSize[0x04E8] - InheritedSize[0x03C0])
	 */
	class AYCapturePoint : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnObjectiveCompleted;                                    // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FString                                              m_UILetter;                                              // 0x03D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_showInHUD;                                             // 0x03E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useAsSpawn;                                            // 0x03E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LXSL[0x2];                                   // 0x03E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_stationIndex;                                          // 0x03E4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_spawnPriority;                                         // 0x03E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_69H5[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYPlayerStart*>                               m_spawnPoints;                                           // 0x03F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2JO6[0x1];                                   // 0x0400(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bIsLocked;                                             // 0x0401(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		EYTeam                                                     m_initialOwningTeam;                                     // 0x0402(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X515[0x1];                                   // 0x0403(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_overlapRadius;                                         // 0x0404(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     m_rootComponent;                                         // 0x0408(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent*                                    m_collisionSphere;                                       // 0x0410(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_58NN[0x8];                                   // 0x0418(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYPawn*>                                      m_pawnsWithinRange;                                      // 0x0420(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0L4O[0x20];                                  // 0x0430(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTeam                                                     m_ownedByTeam;                                           // 0x0450(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ILRY[0x7];                                   // 0x0451(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTeam                                                     m_capturingTeam;                                         // 0x0458(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EYTeam                                                     m_prevCapturingTeam;                                     // 0x0459(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7ITL[0x6];                                   // 0x045A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_captureReductionTimePerSecond;                         // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H1FK[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYTeam>                                             m_defaultObjectiveTeams;                                 // 0x0468(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<EYTeam>                                             m_currentObjectiveTeams;                                 // 0x0478(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		EYCapturePointObjective                                    m_objective;                                             // 0x0488(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0KY8[0x3];                                   // 0x0489(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_captureSupply;                                         // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MTLY[0xC];                                   // 0x0490(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_captureSpeedUpTimePerSecond;                           // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_beingCaptured;                                         // 0x04A0(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       m_isContestedByBothTeams;                                // 0x04A1(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1K8V[0x2];                                   // 0x04A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_currentTimeToOwn;                                      // 0x04A4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_timeToOwn;                                             // 0x04A8(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_timeToNeutralize;                                      // 0x04AC(0x0004) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_isActive;                                              // 0x04B0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RQLA[0x3];                                   // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_health;                                                // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_currentHealth;                                         // 0x04B8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_pointsPerTickUndercontrol;                             // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_pointsOnComplete;                                      // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_canBeNeutralized;                                      // 0x04C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2TAE[0x3];                                   // 0x04C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_friendlyName;                                          // 0x04C8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CLBW[0x10];                                  // 0x04D8(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetTeamOwningSpawnPointsActive(EYTeam Team, bool Value);
		void SetTeamOwnerSpawnPoints(EYTeam Team);
		void SetObjectiveTeams(TArray<EYTeam> teams);
		void SetLocked(bool bIsLocked);
		void SetCapturePoint(EYTeam Team);
		void SetAllSpawnPointsActive(bool Value);
		void ResetCapturePoint();
		void ReceiveOnRepStationOwnerChange();
		void ReceiveOnRepStationCapturingTeam(bool beingCaptured);
		void OnSetLocked(bool bIsLocked);
		void OnRep_StationOwner();
		void OnRep_StationIndex();
		void OnRep_StationCapturingTeam();
		void OnRep_objectiveTeams();
		void OnRep_LockTime();
		void OnRep_CurrentHealth();
		void OnRep_ContestedByBothTeamsChanged();
		void OnRep_ActiveChanged();
		void OnObjectiveTeamsChanged();
		void OnHealthChanged(float healthPercent);
		void OnActiveStatusChanged(bool newStatus);
		bool HasSpawnPointsForTeam(EYTeam Team);
		float GetTimeToOwn();
		int32_t GetSpawnPriority();
		float GetRemainingCaptureTime();
		float GetPointsPerTickUnderControl();
		int32_t GetOwningTeamColorIndex();
		TArray<EYTeam> GetObjectiveTeams();
		EYCapturePointObjective GetObjective();
		int32_t GetNumberOfPawnsInRange(EYTeam Team);
		class AYPlayerStart* GetNextSpawnPoint(EYTeam Team);
		bool GetIsContestedByBothTeams();
		EYTeam GetInitialOwningTeam();
		int32_t GetIndex();
		bool GetCurrentStatus();
		EYTeam GetCurrentOwningTeam();
		int32_t GetCapturingTeamColorIndex();
		EYTeam GetCapturingTeam();
		TArray<class AYPawn*> GetCapturingPawns();
		bool GetBeingCaptured();
		void DecreaseCaptureSupply();
		void Deactivate();
		void ActorEndOverlapBP();
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCapturePoint_TER
	 * Size -> 0x0018 (FullSize[0x0500] - InheritedSize[0x04E8])
	 */
	class AYCapturePoint_TER : public AYCapturePoint
	{
	public:
		TArray<class AYCapturePoint_TER*>                          m_linkableCPs;                                           // 0x04E8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    m_territoryContribution;                                 // 0x04F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_territoryInfluenceRadius;                              // 0x04FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPawnAIController
	 * Size -> 0x02B0 (FullSize[0x06D8] - InheritedSize[0x0428])
	 */
	class AYPawnAIController : public AController
	{
	public:
		unsigned char                                              UnknownData_GVHY[0x8];                                   // 0x0428(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_faction;                                               // 0x0430(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_isElite;                                               // 0x0438(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_respondToShortCommands;                                // 0x0439(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_shortCommandCanComply;                                 // 0x043A(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RS1T[0x1];                                   // 0x043B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_shortCommandEfficiency;                                // 0x043C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R6HM[0x8];                                   // 0x0440(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYPerceptedPawnData>                         m_perceptedEnemyPlayers;                                 // 0x0448(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FYPerceptedPawnData>                         m_perceptedAllyPlayers;                                  // 0x0458(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    m_maxPerceptedEnemyPlayerData;                           // 0x0468(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxPerceptedAllyPlayerData;                            // 0x046C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYPerceptedPawnData>                         m_perceptedEnemyCreeps;                                  // 0x0470(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FYPerceptedPawnData>                         m_perceptedAllyCreeps;                                   // 0x0480(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    m_maxPerceptedEnemyCreepData;                            // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxPerceptedAllyCreepData;                             // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_specialHandleRespawnJets;                              // 0x0498(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XSQV[0x17];                                  // 0x0499(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYPerceptedPawnData>                         m_squad;                                                 // 0x04B0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_perceptReactTimeBase;                                  // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_perceptReactTimeRand;                                  // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_perceptCloakChanceBase;                                // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_perceptCloakBonusMaxDist;                              // 0x04CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_perceptCloakChanceDist;                                // 0x04D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_perceptCloakChanceFire;                                // 0x04D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_perceptCloakChanceNoFire;                              // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_perceptCloakChanceFrontFacing30;                       // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_PerceptCloakChanceCurrBehaviorTargetMod;               // 0x04E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_PerceptCloakChanceCurrWeaponTargetMod;                 // 0x04E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_forgetCloakChanceBase;                                 // 0x04E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_forgetCloakBonusStartDist;                             // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_forgetCloakChanceDist;                                 // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_forgetCloakChanceCurrBehaviorTargetMod;                // 0x04F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_forgetCloakChanceCurrWeaponTargetMod;                  // 0x04F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QKBG[0x14];                                  // 0x04FC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_primaryWeaponFireAngle;                                // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_preferedFireAngle;                                     // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HNTK[0x4];                                   // 0x0518(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_secondaryWeaponFireAngle;                              // 0x051C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_rankedTargetDamageToDistance;                          // 0x0520(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_43Q4[0x50];                                  // 0x0524(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_minTimeBeforeReplan;                                   // 0x0574(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5T9B[0x8];                                   // 0x0578(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_debugSteering;                                         // 0x0580(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7CKK[0x4];                                   // 0x0584(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_cruiseTargetSpeed;                                     // 0x0588(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0N1C[0x4];                                   // 0x058C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_useExtendedTunnelSteer;                                // 0x0590(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_topTargetSpeed;                                        // 0x05A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2KU4[0x4];                                   // 0x05A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_topTargetSpeedA;                                       // 0x05A8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_maxthrottleChange;                                     // 0x05B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxthrottleOnFrontSoftCollision;                       // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useBackThrust;                                         // 0x05C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KFVN[0x3];                                   // 0x05C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_useNoSterringToBreakTurn;                              // 0x05C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3TCJ[0x10];                                  // 0x05C8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_degreesSecSoftCurve;                                   // 0x05D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5DWK[0x4];                                   // 0x05DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_degreesSecSoftCurveA;                                  // 0x05E0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_degreesSecHardCurve;                                   // 0x05F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OU9S[0x4];                                   // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_degreesSecHardCurveA;                                  // 0x05F8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_degreesAbsoluteSoftCurve;                              // 0x0608(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X8P1[0x4];                                   // 0x060C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_degreesAbsoluteSoftCurveA;                             // 0x0610(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_degreesAbsoluteHardCurve;                              // 0x0620(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q8OU[0x4];                                   // 0x0624(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_degreesAbsoluteHardCurveA;                             // 0x0628(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_degreesAbsoluteHardCurveMinSpeed;                      // 0x0638(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q09Z[0x4];                                   // 0x063C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_degreesAbsoluteHardCurveMinSpeedA;                     // 0x0640(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_maxMomentumCompensation;                               // 0x0650(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N59J[0x4];                                   // 0x0654(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_maxMomentumCompensationA;                              // 0x0658(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_undoCurveAngle;                                        // 0x0668(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RC66[0x4];                                   // 0x066C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              m_undoCurveAngleA;                                       // 0x0670(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_undoCurveMinSpeedRatio;                                // 0x0680(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_xPow;                                                  // 0x0684(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QV4D[0xC];                                   // 0x0688(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxDistanceAvoid;                                      // 0x0694(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IASP[0x4];                                   // 0x0698(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_minDistanceAvoid;                                      // 0x069C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y8N9[0x4];                                   // 0x06A0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxThrustCompensation;                                 // 0x06A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                m_defaultHUDName;                                        // 0x06A8(0x0018) Edit, NativeAccessSpecifierPublic
		class FName                                                m_currControllerDebugName;                               // 0x06C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_scriptControllerDebugName;                             // 0x06C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_showDebugVisibility;                                   // 0x06D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T1Q3[0x4];                                   // 0x06D4(0x0004) MISSED OFFSET (PADDING)

	public:
		void QueryShortCommandEvent(class AActor* commander, EYUIShortCommands shortCommandId, class AYPawn* targetPawn, int32_t Priority);
		void ProcessShortCommandEvent(class AActor* commander, EYUIShortCommands shortCommandId, class AYPawn* targetPawn, int32_t Priority, float duration);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCreepAIController
	 * Size -> 0x0130 (FullSize[0x0808] - InheritedSize[0x06D8])
	 */
	class AYCreepAIController : public AYPawnAIController
	{
	public:
		int32_t                                                    m_supressFireOnGlobalProjectileCount;                    // 0x06D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_showDebug;                                             // 0x06DC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YBOY[0x5B];                                  // 0x06DD(0x005B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_jumpOutFF;                                             // 0x0738(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_jumpOutVF;                                             // 0x073C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_jumpOutStartPullUpTime;                                // 0x0740(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_jumpOutAscendTime;                                     // 0x0744(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     m_evasiveManeuverThrust;                                 // 0x0748(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_evasiveManeuverOnEnemyDistance;                        // 0x0758(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveManeuverOnWaypointDistance;                     // 0x075C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5QM3[0xC];                                   // 0x0760(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_avoidSampleRate;                                       // 0x076C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_avoidSampleCounter;                                    // 0x0770(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_avoidThrust;                                           // 0x0774(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_avoidThrustTime;                                       // 0x0778(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_avoidPullUp;                                           // 0x077C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_avoidPullDown;                                         // 0x0780(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_steeringFPS;                                           // 0x0784(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H4MH[0x4];                                   // 0x0788(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_waypointProximity;                                     // 0x078C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_46BV[0x4];                                   // 0x0790(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_breakDistanceToPlayer;                                 // 0x0794(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JG0W[0xC];                                   // 0x0798(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_navigationOffsetRandom;                                // 0x07A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5K1Z[0xC];                                   // 0x07A8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxPerceptDistance;                                    // 0x07B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VRLF[0x4];                                   // 0x07B8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxFireDistance;                                       // 0x07BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XSBO[0x4];                                   // 0x07C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxFireDistanceCreeps;                                 // 0x07C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZBVU[0x4];                                   // 0x07C8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_updateTargetingFrequency;                              // 0x07CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYFireAtTargetType                                         m_weaponTargetType;                                      // 0x07D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4885[0x37];                                  // 0x07D1(0x0037) MISSED OFFSET (PADDING)

	public:
		void ForceJumpOut();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCreepFactory
	 * Size -> 0x00B8 (FullSize[0x05A0] - InheritedSize[0x04E8])
	 */
	class AYCreepFactory : public AYCapturePoint
	{
	public:
		struct FYControlTower                                      m_debugControlTower;                                     // 0x04E8(0x0020) Edit, NativeAccessSpecifierPrivate
		struct FYCreepSpawn                                        m_creepSpawn;                                            // 0x0508(0x0040) Edit, NativeAccessSpecifierPrivate
		struct FYCreepControl                                      m_creepControl;                                          // 0x0548(0x0018) Edit, NativeAccessSpecifierPrivate
		struct FYCreepGuide                                        m_creepGuide;                                            // 0x0560(0x0028) Edit, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A9Z2[0x18];                                  // 0x0588(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetPatrolCreepSpeedLimit(float speedLimit);
		void SetCreepMaxSpawns(int32_t MaxValue);
		void SetAttackCreepSpeedLimit(float speedLimit);
		void SendAttackWave(int32_t targetFactory);
		class AYPawn* GetPatrolCreep(int32_t index);
		class AYPawn* GetAttackCreep(int32_t index);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterCustomizationMaterial
	 * Size -> 0x0010 (FullSize[0x0158] - InheritedSize[0x0148])
	 */
	class UYCharacterCustomizationMaterial : public UYCharacterCustomizationAssetBase
	{
	public:
		TArray<struct FYCharacterCustomizationMaterialSet>         m_materialSets;                                          // 0x0148(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterCustomizationMesh
	 * Size -> 0x0030 (FullSize[0x0178] - InheritedSize[0x0148])
	 */
	class UYCharacterCustomizationMesh : public UYCharacterCustomizationAssetBase
	{
	public:
		TAssetPtr<class USkeletalMesh>                             m_mesh;                                                  // 0x0148(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_86EX[0x4];                                   // 0x0164(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TArray<TAssetPtr<class USkeletalMesh>>                     m_additionalMeshes;                                      // 0x0168(0x0010) Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UYCharacterManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_AH4B[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterPreset
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UYCharacterPreset : public UDataAsset
	{
	public:
		struct FYCharacterUIData                                   m_uiData;                                                // 0x0028(0x0020) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FYCharacterCustomizationData                        m_customizationData;                                     // 0x0048(0x0058) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class UYCharacterCustomizationGender*                      m_gender;                                                // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class FString ExportAppearance();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterRenderLevelManager
	 * Size -> 0x01D8 (FullSize[0x0200] - InheritedSize[0x0028])
	 */
	class UYCharacterRenderLevelManager : public UBlueprintFunctionLibrary
	{
	public:
		unsigned char                                              UnknownData_H60O[0x48];                                  // 0x0028(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYCharacterRenderLevelData                          m_characterRenderLevelData[0xA];                         // 0x0070(0x0140) Config, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y05P[0x50];                                  // 0x01B0(0x0050) MISSED OFFSET (PADDING)

	public:
		bool STATIC_SwitchToSceneCapture(class UWorld* World, const class FName& Tag);
		void STATIC_LoadCustomCharacterRenderLevel(const class FString& levelPath, class UWorld* World);
		class AYLevelScriptActor_CharRenderLevel* STATIC_GetCharacterRenderLevelScriptActor(class UWorld* World);
		class AYBaseCharacter* STATIC_GetCharacterByTag(class UWorld* World, const class FName& Tag);
		class AYBaseCharacter* STATIC_GetCharacterBySpawnerNoReset(class UWorld* World, const struct FYCharacterDescription& characterDescription, const class FName& Tag);
		class AYBaseCharacter* STATIC_GetCharacterBySpawner(class UWorld* World, const struct FYCharacterDescription& characterDescription, const class FName& Tag);
		class AActor* STATIC_GetActor(class UWorld* World, const class FName& Tag);
		EYCharacterRenderLevelType STATIC_EnableCharacterRenderLevel(class UWorld* World, EYCharacterRenderLevelType Type);
		void STATIC_DisableAllSceneCaptures(class UWorld* World);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInterface_ThumbnailRenderableActor
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYInterface_ThumbnailRenderableActor : public UInterface
	{
	public:
		void InitForRendering(class AActor* creatingActor);
		class UCameraComponent* GetCameraComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterSpawner
	 * Size -> 0x0030 (FullSize[0x03F0] - InheritedSize[0x03C0])
	 */
	class AYCharacterSpawner : public AActor
	{
	public:
		unsigned char                                              UnknownData_CMK0[0x8];                                   // 0x03C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLightingChannels                                   m_lightingChannelOverride;                               // 0x03C8(0x0003) Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZDCG[0x5];                                   // 0x03CB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYBaseCharacter*>                             m_spawnedCharacters;                                     // 0x03D0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UCameraComponent*                                    m_viewCameraComponent;                                   // 0x03E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_69VF[0x8];                                   // 0x03E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnCharacterSpawned(class AYBaseCharacter* spawnedCharacter);
		void InitForRendering(class AActor* creatingActor);
		void HideCharacters(bool clear);
		class AYBaseCharacter* GetCharacter(const struct FYCharacterDescription& characterDescription, bool forceRefresh, bool bInvisibleAfterCreation, bool resetExisting);
		class UCameraComponent* GetCameraComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCharacterVanityItemPreview
	 * Size -> 0x0010 (FullSize[0x03D0] - InheritedSize[0x03C0])
	 */
	class AYCharacterVanityItemPreview : public AActor
	{
	public:
		class UYCharacterCustomizationMesh*                        m_vanityItem;                                            // 0x03C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              m_itemMesh;                                              // 0x03C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOfficer
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UYOfficer : public UObject
	{
	public:
		unsigned char                                              UnknownData_1A48[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                m_officerName;                                           // 0x0030(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FYCharacterAppearance                               m_appearance;                                            // 0x0048(0x0068) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EYOfficerType                                              m_type;                                                  // 0x00B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MUMO[0xB];                                   // 0x00B1(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_rank;                                                  // 0x00BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CYWU[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_characterTag;                                          // 0x00C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_selectedAppearanceIndex;                               // 0x00D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_171U[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (PADDING)

	public:
		bool HasOnlySubtitlesInComWindow();
		EYOfficerType GetType();
		int32_t GetRP();
		int32_t GetRank();
		class UYPerk* GetPerk();
		class FString GetOfficerName();
		class FName GetGender();
		class FName GetCharacterTag();
		class FString GetCharacterName();
		class UTexture* GetCharacterImage();
		struct FYCharacterAppearance GetCharacterAppearance();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCheatManager
	 * Size -> 0x0028 (FullSize[0x03E8] - InheritedSize[0x03C0])
	 */
	class AYCheatManager : public AActor
	{
	public:
		class ADebugCameraController*                              m_debugCameraControllerRef;                              // 0x03C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_debugCameraControllerClass;                            // 0x03C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bHasMegaDamage;                                        // 0x03D0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JT64[0x17];                                  // 0x03D1(0x0017) MISSED OFFSET (PADDING)

	public:
		void VOTriggerByID(int32_t Val);
		void VOTriggerByEvent(const class FName& Val);
		void VOPrintListOfLoadedEvents();
		void UseDebugMmogClientCodeToSwap(bool useIt);
		void ToggleProjectileCloseInRange();
		void ToggleHitzoneDebug();
		void ToggleDebugCamera();
		void TestSpecificControlRestrictions(int32_t idx);
		void TestLocalization();
		void TestAnalyticsTutorialEvent(int32_t stepId, const class FString& stepName);
		void STResetToObjective(int32_t idx);
		void STDumpObjectives();
		void StartMatchCustomRoom();
		void StartMatchCountdownCustomRoom();
		void SquadEnterMatchmaking(int32_t fleetType, const class FString& GameMode, const class FString& mapName);
		void SkipShelteredGames();
		void SkipRecruitGoals();
		void SkipProvingGrounds();
		void SimulateNetworkDisconnect(bool turnOn);
		void ShowPromotionPack(int32_t itemID);
		void ShowMultiplePromotionPack(int32_t itemIDOne, int32_t itemIDTwo, int32_t itemIDThree, int32_t itemIDFour, int32_t itemIDFive);
		void ShowLoadingScreenData(bool State, int32_t mapIndex, int32_t gameModeIndex);
		void ShowLoadingScreen(bool State);
		void SetUpStandardRoom();
		void SetSpeakerChannelSetup(const class FString& setupName);
		void SetMyselfAsHost();
		void SetHost(const class FName& userId);
		void SetDumpStackTraceOnFlushAsyncLoading(bool printStackTrace);
		void SetAIFleetType(EYFleetType fleetType);
		void SetActiveLoadoutByName(const class FString& loadoutName);
		void ServerLogBoostersInfo(class AYPlayerController* PC);
		void ServerDebugPVEFinishMatch(bool isWin, int32_t Score);
		void ServerDebugHavocWaveModifierRandomize(int32_t wave);
		void ServerDebugHavocAddXP(int32_t xp);
		void ServerDebugActivateHavocWaveModifier(const class FName& modifierName);
		void ServerActivateBooster(int32_t boosterID);
		void Server_SetYPawnInvincible(class AYPawn* YPawn, bool invincible);
		void Server_SetYPawnForceStayAlive(class AYPawn* YPawn, bool forceStayAlive);
		void Server_SetYPawnCurrentHealthLocked(class AYPawn* YPawn, bool currentHealthLocked);
		void Server_RunAuthorityConsoleCommand(const class FString& Command);
		void SendSquadInvite(const class FString& friendId);
		void SendNaNToAudio();
		void SendHardwareAnalytics();
		void SendFriendInvite(const class FString& friendId);
		void SendAnnouncementWithDuration(int32_t durationInSecs, const class FString& message);
		void SendAnnouncement(const class FString& message);
		void SearchForFriends(const class FString& searchStr);
		void RequestCareerProgressionData();
		void ReplaceShipWithActiveLoadout();
		void RemoveCustomRoomUser(const class FName& pid);
		void RemoveAllAIFromRoom();
		void LogBoostersInfo();
		void LogBattleReadyFleetsInfo();
		void LeaveCustomRoom();
		void IncrementCareerCounterNoSub(const class FString& counterId, int32_t increment);
		void IncrementCareerCounter(const class FString& counterId, const class FString& subId, int32_t increment);
		void ForceMarketFakeReload(const class FString& campaignToRemove);
		void ForceActivateFeat(const class FString& featName);
		void FillRoomWithAI();
		void ExitFleetSelectCustomRoom();
		void EoMSetDebugStatsDisplay(const class FString& ImportFilePath);
		void EoMResetDebugStatsDisplay();
		void EnterFleetSelectCustomRoom();
		void DumpSquadInfo();
		void DumpMarketData(const class FString& fileName);
		void Disconnect();
		void DebugShowSimulatedBackendTime();
		void DebugSendBusinessAnalyticsEvent(const class FString& Name, const class FString& Category, const class FString& userId);
		void DebugRenameShipLoadout(const class FName& loadoutId, const class FString& newName);
		void DebugPVEFinishMatch(bool isWin, int32_t Score);
		void DebugPVEClientSetActiveEvent(const class FName& ID);
		void DebugPVEClientPrintActiveEventToLog();
		void DebugPVEBackendSetActiveEvent(const class FString& EventName, int32_t durationMinutes, int32_t startOffsetMinutes);
		void DebugPVEBackendResetSeasonProgress();
		void DebugPVEBackendReloadSeasonConfig();
		void DebugPVEBackendGrantSeasonReward(int32_t rewardLevel);
		void DebugPVEBackendGrantEventReward(int32_t fleetType, int32_t rewardLevel);
		void DebugPurchaseOffer(const class FString& offerId, int32_t amount);
		void DebugCustomRoomTrySwapTeams(int32_t teamIndex);
		void DebugCustomRoomStartMatchCountdown(int32_t fleetIndex);
		void DebugCustomRoomStartMatch();
		void DebugCustomRoomShowInviteCandidates();
		void DebugCustomRoomShow();
		void DebugCustomRoomSetTeamSize(int32_t teamSize);
		void DebugCustomRoomSetTeam2AiSpawn(bool enable);
		void DebugCustomRoomSetTeam1AiSpawn(bool enable);
		void DebugCustomRoomSetMap(const class FString& Map);
		void DebugCustomRoomSetGameMode(const class FString& GameMode);
		void DebugCustomRoomSendChatMessage(const class FString& message);
		void DebugCustomRoomListInvites();
		void DebugCustomRoomLeave();
		void DebugCustomRoomKickPlayer(int32_t teamIndex, int32_t SlotIndex);
		void DebugCustomRoomJoin(const class FString& ID);
		void DebugCustomRoomInvitePlayer(const class FString& pid);
		void DebugCustomRoomHostSwapPlayers(int32_t sourceSlotIndex, int32_t targetSlotIndex);
		void DebugCustomRoomHostChangeTeam(int32_t SlotIndex, int32_t sourceTeamIndex, int32_t targetTeamIndex);
		void DebugCustomRoomExitFleetSelect();
		void DebugCustomRoomEnterFleetSelect();
		void DebugCustomRoomDeclineInvite(const class FString& roomId);
		void DebugCustomRoomCreate(int32_t teamSize, bool team1Ai, bool team2Ai, const class FString& GameMode, const class FString& Map);
		void DebugCustomRoomChangeHost(int32_t teamIndex, int32_t SlotIndex);
		void DebugCustomRoomCancelMatchCountdown();
		void DebugBuyGP2CreditsPack(int32_t idx, int32_t amount);
		void CreateCustomRoom();
		void CrashMe(const class FString& msg);
		void CloseAnnouncement();
		void ClientShowDebugMessage(const class FString& message, float duration, const struct FColor& Color, int32_t messageCode);
		void ClearStats();
		void ClaimCareerGoal(const class FString& goalId, int32_t stage);
		void CancelMatchCountdownCustomRoom();
		void BugReportTest();
		void BatchExecuteConsoleCommands(const class FString& FilePath);
		void AuthConsole(const class FString& Command);
		void AddMyselfToCustomRoom();
		void AddCustomRoomUsers(int32_t numOfPlayers, int32_t highestFleet);
		void AddCustomRoomUser(const class FName& userId, int32_t highestFleet);
		void ActivateBooster(int32_t boosterID);
		void AccountUnlockTechTree();
		void AcceptSquadInvite(const class FString& friendId);
		void AcceptFriendInvite(const class FString& friendId);
		void AcceptAllPendingFriendInvites();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPCheatManager
	 * Size -> 0x0050 (FullSize[0x0438] - InheritedSize[0x03E8])
	 */
	class AYMPCheatManager : public AYCheatManager
	{
	public:
		TArray<struct FYProjectileDebugInfo>                       m_projectileDebugInfos;                                  // 0x03E8(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7QLA[0x40];                                  // 0x03F8(0x0040) MISSED OFFSET (PADDING)

	public:
		void ToggleTerritoryLinking(float linkRangeMulti, float linkExponent);
		void ToggleTerritoryDebugServer(int32_t mode);
		void TogglePVEOrbitTimer();
		void TogglePVEDifficulty();
		void ToggleOutpostTransitionsInfo();
		bool ToggleForceHeroCombat();
		void ToggleEnableEndOfRound();
		bool ToggleDebugSpawnAI();
		void ToggleDebugger();
		void TestCustomAnalyticsEvent();
		void StartHordeWave(int32_t waveIndex);
		bool StartDebugCombat(int32_t teamSize);
		bool StartCreeps();
		bool StartCombat();
		bool SpawnGuideCreeps();
		bool SpawnAITeams(int32_t team1Size, int32_t team2Size);
		bool SpawnAI(int32_t teamSize);
		void Simulate5VS5Match(int32_t team1_NumPlayers, int32_t team1_SkillSeed, int32_t team2_NumPlayers, int32_t team2_SkillSeed, int8_t winner_1_OR_3);
		void Simulate1VS1Match(float player1Team1_SKILL, float player1Team1_DEVIATION, float player2Team2_SKILL, float player2Team2_DEVIATION, int8_t winner_1_OR_3);
		void ShowTeamRatingUpdate();
		void ShowTeamRatings();
		bool ShowTargetDebugAI(const struct FVector& viewPos, const struct FVector& viewDir);
		bool ShowNPCDebugAI(int32_t Team);
		void ShowMissileMarkers(int32_t option);
		void ShowMinimapMarkers(int32_t option);
		void ShowMaxMarkers(int32_t option);
		void ShowEOMInfo();
		bool ShowDebugAI(const class FString& aiName, bool only);
		bool ShowAllDebugTurret(bool Show);
		bool ShowAllDebugAI();
		void setVelSpring(float Min, float Max, float strenght);
		void SetTeamName(int32_t Team, const class FString& newName);
		void SetTargetVolMult(float newMult);
		void setSpring(float snap, float Min, float Max, float maxDistance, float strenght, float dump);
		void SetShipIndexMegaDamage(int32_t index, bool hasMegaDamage);
		void SetShipIndexInvincible(int32_t index, bool isInvincible);
		void SetShipIndexForceStayAlive(int32_t index, bool isPreventDeath);
		void SetShipIndexCurrentHealthLocked(int32_t index, bool isPreventHealthChange);
		void SetRemainingRoundTime(float Time);
		void SetCreepManagerTrail(int32_t maxTrails, int32_t maxLodedTrails);
		void SetCreepManagerTick(int32_t tickLODs, int32_t maxInstancesPerTickLOD, int32_t outOfSightTickLOD);
		void SetCreepManagerRender(int32_t maxRenderDist, int32_t maxRenderDist_fromPawnNumber, int32_t maxPawnsRenderedTotal);
		void SetCreepManagerQuality(int32_t quality);
		void SetCreepManagerMaxCreeps(int32_t MaxCount);
		void SetCreepManagerFlock(int32_t maxClientFlock);
		void SetCreepManagerEnabled();
		void ServerToggleTerritoryLinking(float linkRangeMulti, float linkExponent);
		void ServerTogglePVEOrbitTimer();
		void ServerTogglePVEDifficulty();
		void ServerToggleForceHeroCombat();
		void ServerToggleEnableEndOfRound();
		void ServerTestCustomAnalyticsEvent(class AYPlayerController* PC);
		void ServerStartHordeWave(int32_t waveIndex);
		void ServerStartDebugCombat(int32_t teamSize);
		void ServerStartCreepManager();
		void ServerStartCombatManager();
		void ServerSpawnGuideCreeps();
		void ServerSimulate5VS5Match(int32_t player1Team1_SKILL, int32_t player1Team1_DEVIATION, int32_t player2Team2_SKILL, int32_t player2Team2_DEVIATION, int8_t winner_1_OR_3);
		void ServerSimulate1VS1Match(float player1Team1_SKILL, float player1Team1_DEVIATION, float player2Team2_SKILL, float player2Team2_DEVIATION, int8_t winner_1_OR_3);
		void ServerShowTeamRatings();
		void ServerShowEOMInfo(class AYPlayerController* PC);
		void ServerSetRemainingRoundTime(float Time);
		void ServerScoreOtherTeam(class AYPlayerController* PC, int32_t amount);
		void ServerScoreMyTeam(class AYPlayerController* PC, int32_t amount);
		void ServerScoreMe(float amount);
		void ServerScoreEvent(int32_t eventID);
		void ServerScoreAchievement(float achievementReputation, bool playerAchievement);
		void ServerPrintPlayerStateInfo();
		void ServerLogUpdateComponentTransforms();
		void ServerLogContractsInfo();
		void ServerLogContractsData();
		void ServerKillMe();
		void ServerKillAllEnemiesInPVE();
		void ServerHealMe(float amount);
		void ServerGetCreepCPU();
		void ServerForceFleetsMaintenance();
		void ServerDebugHavocJumpToWave(int32_t wave);
		void ServerDebugGetRoomFleets();
		void ServerDebugCompleteContracts(int32_t numContracts);
		void ServerDamageMe(float amount);
		void ServerBroadcastCommand(const class FString& Command);
		void ScoreOtherTeam(int32_t amount);
		void ScoreMyTeam(int32_t amount);
		void ScoreMe(float amount);
		void ScoreEventsMultiple(int32_t numEvents, int32_t randSeed);
		void ScoreEventHelp();
		void ScoreEvent(int32_t eventID);
		void ScoreAchievement(float achievementReputation, bool playerAchievement);
		void ProfileHUD();
		void PrintPlayerStateInfo();
		bool LogUpdateComponentTransforms();
		void LogScoringAchievements();
		void LogPersistentScoringAchievements();
		void LogMatchXPInfo();
		void LogMatchCreditsInfo();
		void LogContractsInfo();
		void LogContractsData();
		void KillPawn(class AYPawn* Pawn);
		void KillOther(int32_t Team);
		void KillMe();
		void KillAllEnemiesInPVE();
		void HealMe(float amount);
		void GetSpawnNearActors();
		class AYPawn* GetPlayerShipByIndex(int32_t index);
		class APlayerController* GetPlayerControllerByIndex(int32_t index);
		void ForceFleetsMaintenance();
		void EoMResetMatchStatsOverride();
		void EoMOverrideMatchStats(const class FString& Path);
		bool DebugRenderUpdateOverlaps();
		bool DebugOverlapMulti();
		void DebugMousePosition();
		void DebugHavocJumpToWave(int32_t wave);
		void DebugGetRoomFleets();
		void DebugCompleteContracts(int32_t numContracts);
		bool DebugBotAI();
		bool DebugAI();
		void DamageMe(float amount);
		void CreepLogPhys();
		void CliShowAIDebugInfo(const class FString& debugStr, const struct FVector& strLocation, TArray<struct FVector> nextWaypoints);
		void ClientSetCreepCPU(int32_t Count, float Total, float Perception, float serverFPS);
		void ClientExecuteCommand(const class FString& Command);
		void ClientDrawnDebugString(const class FString& debugStr, const struct FVector& strLocation, const struct FColor& Color, float Time);
		void ClientDrawnDebugBox(const struct FVector& boxLocation, const struct FVector& BoxSize, const struct FColor& Color, float Time);
		void BroadcastStringMulticast(const class FName& String, float Time);
		void BroadcastCommand(const class FString& Command);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YChunkInstallDataAsset
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYChunkInstallDataAsset : public UDataAsset
	{
	public:
		TArray<class UObject*>                                     m_assetToInclude;                                        // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YChunkManager
	 * Size -> 0x0148 (FullSize[0x0170] - InheritedSize[0x0028])
	 */
	class UYChunkManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_M1FB[0x148];                                 // 0x0028(0x0148) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YClientCreepPawn
	 * Size -> 0x0160 (FullSize[0x0520] - InheritedSize[0x03C0])
	 */
	class AYClientCreepPawn : public AActor
	{
	public:
		struct FVector                                             m_linSpeedMult;                                          // 0x03C0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             m_angSpeedMult;                                          // 0x03CC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_drawDebug;                                             // 0x03D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SXE0[0x57];                                  // 0x03D9(0x0057) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_snapToFormation;                                       // 0x0430(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YC48[0x3];                                   // 0x0431(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_nonSnapSpringDump;                                     // 0x0434(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonSnapMaxDistance;                                    // 0x0438(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonSnapSpringForce;                                    // 0x043C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonSnapSpringMin;                                      // 0x0440(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonSnapSpringMax;                                      // 0x0444(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonSnapSpringVelForce;                                 // 0x0448(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonSnapSpringVelMin;                                   // 0x044C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_nonSnapSpringVelMax;                                   // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ADOA[0x54];                                  // 0x0454(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                m_mesh;                                                  // 0x04A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D5H7[0x70];                                  // 0x04B0(0x0070) MISSED OFFSET (PADDING)

	public:
		void ReceiveOnRepTeamChange();
		void OnKilled();
		bool IsMyTeam();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCloakingComponent
	 * Size -> 0x00B8 (FullSize[0x01B0] - InheritedSize[0x00F8])
	 */
	class UYCloakingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JMTQ[0x8];                                   // 0x00F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AYPawn>                               m_pawnOwner;                                             // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EYGW[0xA8];                                  // 0x0108(0x00A8) MISSED OFFSET (PADDING)

	public:
		void WeaponFired(class AYPawn* firingPawn);
		void TriggerCloakingModifier(EYShipCloakingModifier modifier, float percentage);
		void OnTakeDamage(float amount, float newHealth, class AController* instigatorController);
		void OnOverlap(TArray<struct FYSoftCollisionOverlapResult> overlapResults);
		EYShipCloakingState GetCloakingState();
		void DeactivateCloaking();
		bool ActivateCloaking(float shipMatlFalloff, float cloakedMatlFalloff, class UMaterialInstance* cloakingMID, TArray<struct FYShipCloakingModifier>* cloakingModifiers);
		void AbilityActivated(class AYPawn* firingPawn, class UYAbility* ability);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCloakSettings
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYCloakSettings : public UDataAsset
	{
	public:
		TArray<struct FYCloakSetting>                              m_cloakSettings;                                         // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayVoiceLinesComponent
	 * Size -> 0x0070 (FullSize[0x0410] - InheritedSize[0x03A0])
	 */
	class UYPlayVoiceLinesComponent : public UAkComponent
	{
	public:
		float                                                      m_switchToRadioDistance;                                 // 0x03A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C2L9[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnVoiceLineFinished;                                     // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UYGenericVoiceLineLoader*                            m_genericVoiceLineLoader;                                // 0x03B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UYVoiceLine*>                                 m_currentVoiceLinesBlocked;                              // 0x03C0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		class UYVoiceLine*                                         m_currentVoiceLineOriginal;                              // 0x03D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYVoiceLineUnique*                                   m_currentVoiceLineToPlay;                                // 0x03D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EYVoiceLineAudioTemplate                                   m_currentVoiceLineAudioTemplate;                         // 0x03E0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_currentVoiceLineAudioFinished;                         // 0x03E1(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UGLY[0x2];                                   // 0x03E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_currentVoiceLineEstimatedDuration;                     // 0x03E4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_currentVoiceLineSubtitleEndTime;                       // 0x03E8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D3UU[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYS_PlayVoiceLinesQueueEntry>                m_queue;                                                 // 0x03F0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		float                                                      m_playbackStartTime;                                     // 0x0400(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z8D5[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_voiceOverCharacterName;                                // 0x0408(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void StopVoiceLine(class UYVoiceLine* voiceLine);
		void StopCurrentVoiceLine(bool clearAllQueuedVoiceLines);
		void SetGenericVoiceOverCharacterName(const class FName& voCharacterName);
		bool PlayVoiceLineImmediately(class UYVoiceLine* voiceLine, EYVoiceLineAudioTemplate audioTemplate);
		bool PlayVoiceLineForEvent(const class FName& voiceLineName, class UYKismetGameplayConditionQueryContext* queryContext);
		void PlayVoiceLine(class UYVoiceLine* voiceLine, EYVoiceLineAudioTemplate audioTemplate);
		bool IsPlaying(class UYVoiceLine* voiceLine);
		class FName GetGenericVoiceOverCharacterName();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVoiceLineCategory
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UYVoiceLineCategory : public UObject
	{
	public:
		int32_t                                                    m_priority;                                              // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxWaitTime;                                           // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_globalCooldownTime;                                    // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYE_VoiceLinePlaybackBehavior                              m_playbackBehavior;                                      // 0x0034(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYE_VoiceLineInterruptBehavior                             m_interruptBehavior;                                     // 0x0035(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8N3E[0x2];                                   // 0x0036(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_audioEvent;                                            // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_mayPlayAfterDeath;                                     // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TZPD[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YComVOComponent
	 * Size -> 0x0220 (FullSize[0x05C0] - InheritedSize[0x03A0])
	 */
	class UYComVOComponent : public UAkComponent
	{
	public:
		class FScriptMulticastDelegate                             OnVoiceLineFinished;                                     // 0x03A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVoiceLineStarted;                                      // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      m_currentVoiceLineEstimatedDuration;                     // 0x03C0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5T68[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_VOConfigTablePath;                                     // 0x03C8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_assetFolderPath;                                       // 0x03D8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N6A6[0x40];                                  // 0x03E8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_minComWindowDisplayTime;                               // 0x0428(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_comWindowBlockingTime;                                 // 0x042C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FOKR[0x68];                                  // 0x0430(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AYPlayerControllerBase>               m_owningPlayerController;                                // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate
		float                                                      m_playbackStartTime;                                     // 0x04A0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8QUH[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYVoiceLineUnique*                                   m_currentVoiceLineOriginal;                              // 0x04A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYVoiceLineUnique*                                   m_currentVoiceLineToPlay;                                // 0x04B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYVoiceLineUnique*                                   m_triggerFinishedVoiceLine;                              // 0x04B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UYVoiceLineUnique*>                           m_currentVoiceLinesBlocked;                              // 0x04C0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FYVoiceLinesQueueEntry>                      m_queue;                                                 // 0x04D0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class UObject*                                             m_currentCharacterToPlay;                                // 0x04E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UYVoiceLineUnique*>                           m_loadedVoiceLines;                                      // 0x04E8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R4Y2[0xA0];                                  // 0x04F8(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYVOTriggerSystemDebug*                              m_triggerSystemDebug;                                    // 0x0598(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYVOTriggerSystemPlayByPlay*                         m_triggerSystemPlayByPlay;                               // 0x05A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BZ7O[0x18];                                  // 0x05A8(0x0018) MISSED OFFSET (PADDING)

	public:
		void VoiceLineCompleted(int32_t uid);
		void TriggerPlayByPlayEventOnClient(const class FName& triggerType);
		void StopCurrentVoiceLine(bool clearAllQueuedVoiceLines);
		void OnTriggerFacialAnimationLoadCompleted(class AYBaseCharacter* Character, class UYVoiceLineUnique* voLine, float timeTriggered, bool isAnimationLoadCallback);
		void OnComWindowVisibilityUpdated__DelegateSignature(bool visibile);
		void OnComWindowTitleUpdated__DelegateSignature(const class FString& title);
		void OnComWindowTextureUpdated__DelegateSignature(class UTexture* Texture);
		void OnComWindowSubtitleUpdated__DelegateSignature(const class FString& subtitle);
		void ClearQueueOnDeath();
		void CleanComWindow();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YContainerWidget
	 * Size -> 0x0028 (FullSize[0x0260] - InheritedSize[0x0238])
	 */
	class UYContainerWidget : public UUserWidget
	{
	public:
		class UClass*                                              m_contextAudioManagerClass;                              // 0x0238(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_genericAudioManagerClass;                              // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYUIAudioManager*                                    m_contextAudioManager;                                   // 0x0248(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYUIAudioManager*                                    m_genericAudioManager;                                   // 0x0250(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_StyleContainer*                          m_styleContainer;                                        // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayAudioEvent(EYUIAudioEnum audioEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchContainer
	 * Size -> 0x0380 (FullSize[0x05E0] - InheritedSize[0x0260])
	 */
	class UYWidget_EndOfMatchContainer : public UYContainerWidget
	{
	public:
		class UYWidget*                                            m_backToHangarButton;                                    // 0x0260(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_TabSwitcherBar_PC*                       m_navigationTabSwitcher;                                 // 0x0268(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatchRequeueing*                       m_requeueingWidget;                                      // 0x0270(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget*                                            m_skipNotifierWidget;                                    // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatchMatchOutcome*                     m_matchOutcomeWidget;                                    // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatchMVPPage*                          m_mvpPage;                                               // 0x0288(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatchPlayerStatsPage*                  m_statsPage;                                             // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatchRewardsPage*                      m_rewardsPage;                                           // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatch_PVE_TeamPage*                    m_pveTeamPage;                                           // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatch_PVE_RewardsPage*                 m_pveRewardsPage;                                        // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatch_PVE_ScorePage*                   m_pveScorePage;                                          // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYEndOfMatchMode                                           m_endOfMatchMode;                                        // 0x02B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YYJV[0x7];                                   // 0x02B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYEndOfMatchTabs>                                   m_tabOrderOverride;                                      // 0x02C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HOCS[0x310];                                 // 0x02D0(0x0310) MISSED OFFSET (PADDING)

	public:
		void OnPageIntroAnimationFinished();
		void OnPageFadeOutFinished();
		void OnPageFadeInFinished();
		void BroadcastLeaveMatchRequest();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget
	 * Size -> 0x0018 (FullSize[0x0250] - InheritedSize[0x0238])
	 */
	class UYWidget : public UUserWidget
	{
	public:
		class UInputComponent*                                     m_widgetInputComponent;                                  // 0x0238(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JWPE[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (PADDING)

	public:
		void RemoveInputComponent();
		void PlayAudioEvent(EYUIAudioEnum audioEvent);
		void OnAllBlueprintLinksSet();
		class UYHUDWidget_StyleContainer* GetStyleContainerReference();
		void BP_InitializeWidgetLinks();
		void BP_AnimateVisibility(ESlateVisibility newVisibility);
		void AnimateVisibility(ESlateVisibility newVisibility);
		void AddInputComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget
	 * Size -> 0x0040 (FullSize[0x0290] - InheritedSize[0x0250])
	 */
	class UYHUDWidget : public UYWidget
	{
	public:
		class UYHUDWidgetManager*                                  m_widgetManagerReference;                                // 0x0250(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_StyleContainer*                          m_styleContainerReference;                               // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isLocked;                                              // 0x0260(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HHDK[0xF];                                   // 0x0261(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_playerUniqueID;                                        // 0x0270(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SQIN[0x18];                                  // 0x0278(0x0018) MISSED OFFSET (PADDING)

	public:
		bool IsWidgetForPlayer(const class FName& inUniqueID);
		bool HasPlayerUniqueID();
		class UYHUDWidget_StyleContainer* GetStyleContainerReference();
		class FName GetPlayerUniqueID();
		class FText FormatSecondsToCountdownString(int32_t seconds);
		class FText FormatNumberToText(float Number, int32_t decimalPlaces, const class FString& units);
		void BP_SetComponentLockState(unsigned char lockValue, bool lockState);
		void BP_OnPlayerUniqueIDSet(const class FName& inUniqueID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchContainerPS4
	 * Size -> 0x0130 (FullSize[0x0710] - InheritedSize[0x05E0])
	 */
	class UYWidget_EndOfMatchContainerPS4 : public UYWidget_EndOfMatchContainer
	{
	public:
		class UYHUDWidget_ScoreBoard*                              m_scoreboardWidget;                                      // 0x05E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ButtonPrompt*                            m_buttonPrompts;                                         // 0x05E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_TeamVoiceChatMgr*                        m_voiceChatManager;                                      // 0x05F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JJZ9[0xE8];                                  // 0x05F8(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     m_gamepadEOMInputComponent;                              // 0x06E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_UMGPopupClass;                                         // 0x06E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7LQD[0x20];                                  // 0x06F0(0x0020) MISSED OFFSET (PADDING)

	public:
		void BP_EventScoreboardVisible(bool Visible);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCookingFileIncluder
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYCookingFileIncluder : public UObject
	{
	public:
		TArray<class FString>                                      m_includedFiles;                                         // 0x0028(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCreepManager
	 * Size -> 0x0068 (FullSize[0x0428] - InheritedSize[0x03C0])
	 */
	class AYCreepManager : public AActor
	{
	public:
		int32_t                                                    m_maxCreepsPerTeam;                                      // 0x03C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxCreepPenaltyPerPlayer;                              // 0x03C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxCreeps;                                             // 0x03C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_kickCreepsWhenOverMax;                                 // 0x03CC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PKSI[0x3];                                   // 0x03CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_maxClientFlockAmount;                                  // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxCreepsPerTeamInOrbit;                               // 0x03D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxCreepsInOrbit;                                      // 0x03D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3GB7[0x14];                                  // 0x03DC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_sortIterationsPerTick;                                 // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IGV9[0x8];                                   // 0x03F4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_maxTrails;                                             // 0x03FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxLodedTrails;                                        // 0x0400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxClientTickLOD;                                      // 0x0404(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_OutOfSightTickLOD;                                     // 0x0408(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxInstancesPerTickLOD;                                // 0x040C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_tickLODStep;                                           // 0x0410(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxDistanceRender;                                     // 0x0414(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxDistanceRender_minPawnCaunt;                        // 0x0418(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_maxPawnsRendered;                                      // 0x041C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G8OK[0x8];                                   // 0x0420(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCreepNavigationSpawn
	 * Size -> 0x0010 (FullSize[0x0438] - InheritedSize[0x0428])
	 */
	class AYCreepNavigationSpawn : public AYCreepNavigation
	{
	public:
		class UClass*                                              m_spawnClass;                                            // 0x0428(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYTeam                                                     m_spawnTeam;                                             // 0x0430(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_onlyBeginMatchSpawn;                                   // 0x0431(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1I4W[0x2];                                   // 0x0432(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_beginMatchSpawnDelay;                                  // 0x0434(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtA
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class UYCtA : public UDataAsset
	{
	public:
		int32_t                                                    m_id;                                                    // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_groupId;                                               // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                m_text;                                                  // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FURL                                                m_url;                                                   // 0x0048(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      m_priority;                                              // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_isForLocalSessions;                                    // 0x00BC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K4VY[0x3];                                   // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           m_showAfterDateTime;                                     // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    m_showAfterTriggeredCount;                               // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_showFrequency;                                         // 0x00CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtAInterfaceBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYCtAInterfaceBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtACaptainInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYCtACaptainInterface : public UYCtAInterfaceBase
	{
	public:
		class UYCaptain* GetCaptain();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtAInventoryInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYCtAInventoryInterface : public UYCtAInterfaceBase
	{
	public:
		bool HasItem(int32_t itemID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtAManagerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYCtAManagerInterface : public UYCtAInterfaceBase
	{
	public:
		int32_t TriggerQueuedCtAsForGroup(int32_t groupID, int32_t numToTrigger);
		int32_t TriggerQueuedCtAs(int32_t numToTrigger);
		bool TriggerQueuedCtA(class UYCtA* cta);
		void TriggerCtA(class UYCtA* cta);
		void RemoveQueuedCtAsForGroup(int32_t groupID);
		void RemoveCtAFromQueue(class UYCtA* cta);
		bool IsCtAQueued(class UYCtA* cta);
		bool IsCtAManagerReady();
		bool HasCtALinkBeenClicked(class UYCtA* cta);
		TArray<class UYCtA*> GetQueuedCtAs();
		struct FDateTime GetLastTimeCtATriggered(class UYCtA* cta);
		struct FDateTime GetLastTimeCtAShown(class UYCtA* cta);
		int32_t GetCtATriggeredCount(class UYCtA* cta);
		int32_t GetCtAShownCount(class UYCtA* cta);
		void CtAShown(class UYCtA* cta);
		void CtALinkClicked(class UYCtA* cta);
		void AddCtAToQueue(class UYCtA* cta);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtAPlayerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYCtAPlayerInterface : public UYCtAInterfaceBase
	{
	public:
		bool HasEliteStatus();
		int32_t GetStatsCounterValue(EYPlayerStatsCounterId counterId, EYPlayerStatsCounterSubId subId);
		struct FTimespan GetSessionTime();
		struct FTimespan GetEliteStatusTimeRemaining();
		int32_t GetCurrencyAmount(EYCurrency currencyType);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtAProgressionInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYCtAProgressionInterface : public UYCtAInterfaceBase
	{
	public:
		class UYProgressionManagerClient* GetManager();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtATechTreeInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYCtATechTreeInterface : public UYCtAInterfaceBase
	{
	public:
		bool HasResearchedItem(int32_t itemID);
		bool HasPurchasedItem(int32_t itemID);
		int32_t GetUnresearchedModuleXPCostSumForClassTier(int32_t classId, int32_t tier);
		int32_t GetUnresearchedModuleXPCostSumForClass(int32_t classId);
		EYTechTreeItemState GetItemState(int32_t itemID);
		bool CanResearchItem(int32_t itemID);
		bool CanPurchaseItem(int32_t itemID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtAUIInterface
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UYCtAUIInterface : public UYCtAInterfaceBase
	{
	public:
		unsigned char                                              UnknownData_8965[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (PADDING)

	public:
		void OnReturnedToHangarAfterGame__DelegateSignature(EYGameModeType gameModeType);
		void OnPlayerLoggedIn__DelegateSignature();
		void OnPlayerDisconnected__DelegateSignature();
		void OnMenuSectionSelected__DelegateSignature(EYOutpostSection menuSection);
		void HandleOnReturnedToHangarAfterGame(EYGameModeType gameModeType);
		void HandleOnPlayerLoggedIn();
		void HandleOnPlayerDisconnected();
		void HandleOnMenuSectionSelected(EYOutpostSection menuSection);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtASaveData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYCtASaveData : public UObject
	{
	public:
		TArray<struct FYCtASaveEntry>                              m_data;                                                  // 0x0028(0x0010) ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCtAManager
	 * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
	 */
	class UYCtAManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_CYW9[0xE8];                                  // 0x0028(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYCtASaveData*                                       m_saveData;                                              // 0x0110(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_788H[0x38];                                  // 0x0118(0x0038) MISSED OFFSET (PADDING)

	public:
		void HandleOnPlayerStatsCounterDataAvailable(const struct FYPlayerStatsCounterData& counterData);
		void HandleOnPlayerDataLoaded();
		void HandleOnPlayerControllerSet(class AYPlayerControllerBase* PlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCustomMatchManager
	 * Size -> 0x0B48 (FullSize[0x0B70] - InheritedSize[0x0028])
	 */
	class UYCustomMatchManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_YRCO[0xB40];                                 // 0x0028(0x0B40) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYCustomMatchSettingsDataAsset*                      m_defaultRoomSettings;                                   // 0x0B68(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void HandleOnPlayerDataLoaded();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCustomMatchManagerPS4
	 * Size -> 0x0000 (FullSize[0x0B70] - InheritedSize[0x0B70])
	 */
	class UYCustomMatchManagerPS4 : public UYCustomMatchManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLootDropDataTableHelper
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYLootDropDataTableHelper : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDBase
	 * Size -> 0x0080 (FullSize[0x0528] - InheritedSize[0x04A8])
	 */
	class AYHUDBase : public AHUD
	{
	public:
		class FString                                              m_bugReportURL2;                                         // 0x04A8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          m_customerSupportTexture;                                // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_enableUMGPauseMenuOnPC;                                // 0x04C0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_enableUMGPCConversion;                                 // 0x04C1(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SMQT[0x6];                                   // 0x04C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_globalData;                                            // 0x04C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_globalDataPS4;                                         // 0x04D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYGFxMoviePlayer*                                    m_scaleformMovie;                                        // 0x04D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QN7E[0x1];                                   // 0x04E0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bUseControllerAsMouse;                                 // 0x04E1(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JM5Q[0x6];                                   // 0x04E2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_sharedPauseMenuWidgetBlueprint_PS4;                    // 0x04E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_sharedPauseMenuWidgetBlueprint_PC;                     // 0x04F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_PauseMenu*                               m_sharedPauseMenuWidget;                                 // 0x04F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AXWT[0x28];                                  // 0x0500(0x0028) MISSED OFFSET (PADDING)

	public:
		void SetUseControllerAsMouse(bool useAsMouse);
		void OnPurchaseBattleReadyResult();
		class UYUIData* GetGlobalUIData();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenu
	 * Size -> 0x0E08 (FullSize[0x1330] - InheritedSize[0x0528])
	 */
	class AYMenu : public AYHUDBase
	{
	public:
		unsigned char                                              UnknownData_ACA5[0x8];                                   // 0x0528(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYOnboardingHighlightCalloutButtonNames*             m_onboardingCalloutButtonNames;                          // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_mainMenuNavigationTree;                                // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_permanentNavigationTree;                               // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UYUINavigationElement*                               m_captainProfileButton;                                  // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYUINavigationElement*                               m_promotionOkayButton;                                   // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_charScreenOptionButtons;                               // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_logBookNavigationOptions;                              // 0x0578(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_dailyContractsNavigationOptions;                       // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_flagshipDetailsNavigation;                             // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_heroShipDetailsNavigation;                             // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_hangarCustomizationSlotsNavigation;                    // 0x05B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_hangarCustomizationSlotItemsNavigation;                // 0x05C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_hangarClassSelectionNavigation;                        // 0x05D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_hangarClassSelectionDialog;                            // 0x05E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_hangarItemDetailsPopupNavigation;                      // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_itemDetails3DPreviewNavigation;                        // 0x0608(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_itemDetailsVideoPreviewNavigation;                     // 0x0618(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_marketNoYesNavigationButtons;                          // 0x0628(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIManufacturerInformationEntry>            m_manufacturerEntries;                                   // 0x0638(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_progressionClassSelectionNavigation;                   // 0x0648(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_techTreeHeaderPanelNavigation;                         // 0x0658(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_marketFeaturedNavigation;                              // 0x0668(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_marketItemDetailsNavigation;                           // 0x0678(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_marketPayWallNavigation;                               // 0x0688(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYMarketSortingCriteriaData>                 m_marketSortingCriteria;                                 // 0x0698(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FYFilterCategories                                  m_SearchFilters;                                         // 0x06A8(0x0010) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UYUINavigationElement*                               m_marketFeatGoldMembership;                              // 0x06B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYUINavigationElement*                               m_marketFeatCurrencyExchange;                            // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UYUINavigationElement*>                       m_marketPurchaseSuccessNavigation;                       // 0x06C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FYDeveloperCreditsData                              m_developerCreditsData;                                  // 0x06D8(0x0020) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIMetroGridInfo>                           m_homeScreenGrid;                                        // 0x06F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIMetroGridInfo>                           m_marketFrontScreenGrid;                                 // 0x0708(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIMetroGridInfo>                           m_playScreenCategoryGrid;                                // 0x0718(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIMetroGridInfo>                           m_playScreenVersusGrid;                                  // 0x0728(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIMetroGridInfo>                           m_playScreenPvEGrid;                                     // 0x0738(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIMetroGridInfo>                           m_playScreenTrainingGrid;                                // 0x0748(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYUIPopupInfo>                               m_frontEndStockPopups;                                   // 0x0758(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TAssetPtr<class UTexture2D>                                m_defaultCaptainIcon;                                    // 0x0768(0x001C) ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B04F[0x4];                                   // 0x0784(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_PQKJ[0x1E8];                                 // 0x0788(0x01E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnShipSlotSelected;                                      // 0x0970(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CQ46[0x50];                                  // 0x0980(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMenuSectionSelected;                                   // 0x09D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class FString>                                      m_gameModeClassPaths;                                    // 0x09E0(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class FString                                              m_nativeScaleFormFontPackage;                            // 0x09F0(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      m_additionalLocalizationFontPackages;                    // 0x0A00(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		TArray<struct FYGoldMembershipThreshold>                   m_goldMembershipTresholds;                               // 0x0A10(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FString                                              m_singlePlayerMap;                                       // 0x0A20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYSpecialGameMap                                    m_visualAttractionModeMap;                               // 0x0A30(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FYSpecialGameMap                                    m_benchmarkMap;                                          // 0x0AB8(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FYSpecialGameMap                                    m_demoModeMap;                                           // 0x0B40(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FYSpecialGameMap                                    m_playGoTMBasicMap;                                      // 0x0BC8(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FString                                              m_forgotPasswordURL;                                     // 0x0C50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_accountCreationURL;                                    // 0x0C60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_supportURL;                                            // 0x0C70(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYMenuNavigationSlotBase*                            m_customizationRenameButton;                             // 0x0C80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYMenuShopSpecialCategory                           m_shopFeaturedOffersType;                                // 0x0C88(0x0028) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYMenuShopSpecialCategory>                   m_specialCategoryTypes;                                  // 0x0CB0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3680[0x10];                                  // 0x0CC0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_animationOnlyOnMeshInPreview;                          // 0x0CD0(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A30E[0x3];                                   // 0x0CD1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_animationStartDelay;                                   // 0x0CD4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYHUDWidget_Squad*                                   m_squadMenu;                                             // 0x0CD8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYHUDWidget_Squad*                                   m_squadMenuBP;                                           // 0x0CE0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAsyncVideoLoaded;                                      // 0x0CE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N3FE[0x48];                                  // 0x0CF8(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYShop*                                              m_shop;                                                  // 0x0D40(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KD6C[0x40];                                  // 0x0D48(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_uiDebugUseFakeData;                                    // 0x0D88(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_displayDebugUI;                                        // 0x0D89(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HR7H[0x76];                                  // 0x0D8A(0x0076) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_VOTriggerSearchForBattle;                              // 0x0E00(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOStartSingleplayer;                                   // 0x0E08(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOChatMessageReceived;                                 // 0x0E10(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOBackToOutpostAfterMatch;                             // 0x0E18(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOBackToOutpostFromSinglePlayer;                       // 0x0E20(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOLoginAfterLongTime;                                  // 0x0E28(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOLoginAfterShortTime;                                 // 0x0E30(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOQuestCompleted;                                      // 0x0E38(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VONewQuest;                                            // 0x0E40(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOItemUnlocked;                                        // 0x0E48(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_maxDaysForShortTimeWelcomeSound;                       // 0x0E50(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JZSK[0x4];                                   // 0x0E54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYProgressionUnlockContainerFunction*                m_contractsUnlock;                                       // 0x0E58(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2TW6[0x28];                                  // 0x0E60(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYShopPreviewManager                                m_shopPreviewManager;                                    // 0x0E88(0x0058) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ADM6[0x8];                                   // 0x0EE0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UFileMediaSource>                          m_movieMediaSource;                                      // 0x0EE8(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LYHU[0x4];                                   // 0x0F04(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		struct FStringAssetReference                               m_movieAsset;                                            // 0x0F08(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_44IC[0xA8];                                  // 0x0F18(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          m_PayWallTexture;                                        // 0x0FC0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          m_itemsVideoPreviewTexture;                              // 0x0FC8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYShipVideoPreviewInfo>                      m_itemsVideoLinks;                                       // 0x0FD0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYMenuLockedTierInformation>                 m_lockedCustomizationInformationText;                    // 0x0FE0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2FZE[0x10];                                  // 0x0FF0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_scaleformMenuClass;                                    // 0x1000(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_widgetSquadClass;                                      // 0x1008(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYGFxMoviePlayer_YMenu*                              m_scaleformMenu;                                         // 0x1010(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X2RF[0x38];                                  // 0x1018(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_dashboardURL;                                          // 0x1050(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_demoBuildGameModeType;                                 // 0x1060(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EGIL[0x4];                                   // 0x1064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_demoBuildMapName;                                      // 0x1068(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_bUseFirmament;                                         // 0x1078(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_75Y2[0x1BF];                                 // 0x1079(0x01BF) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYLegendButtonMap                                   m_legendButtonTextureDictionary;                         // 0x1238(0x0020) Edit, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J9LQ[0xD8];                                  // 0x1258(0x00D8) MISSED OFFSET (PADDING)

	public:
		void UpdateLoadoutDetail(int32_t itemID);
		void UpdateFleetSlots();
		void UpdateFleetMaintenance();
		void UpdateCurrentPurchaseItemData(bool catalogIsReloaded);
		void UncoverLoginScreenWidget();
		void StartTutorial();
		void StartMatchmaking(int32_t gameModeType, const class FString& mapName);
		void StartBenchmark();
		void ShopRebuilt();
		void ShopCatalogUpdated();
		void SetPreviewActor(class AYShipCustomizationPreview* previewActor, bool renderThumbnail);
		void SetMenuState(EYMenuState menuState, EYMenuSubState menuSubState);
		void SetHideHUD(bool hudIsHidden);
		void SetCaptainBaseTemplate(const class FString& genderTag);
		void SetCalloutAllButtonsEnabled(bool Value);
		void RequestMarketCamera(int32_t itemID);
		void PlayerShipXpUpdated();
		void PlayerFreeXpUpdated();
		void PlayerDisconnected();
		void OnUpdateVanityPurchaseData(const struct FYUIVanityItemPurchaseData& purchaseData);
		void OnUpdateTechTreePurchaseData(const struct FYUITechTreeItemPurchaseData& purchaseData, int32_t missingShipXP, bool isOfficerBriefing);
		void OnUpdateBundlePurchaseData(const struct FYUIBundleItemPurchaseData& purchaseData);
		void OnUIReadyForInit();
		void OnStoredPlayersDisplayInformationUpdatedPS4();
		void OnStoredPlayersDisplayInformationUpdated();
		void OnSkipMaintenance(bool Result);
		void OnShopPurchaseComplete(int32_t purchaseResult, const class FString& offerId, int32_t quantity);
		void OnShipSlotSelected__DelegateSignature(const struct FCachedItemIDDataEntry& cachedItemData, EYUILoadoutItemType itemType, bool bTeleportToSlot);
		void OnShipNameValidationResponse(const class FString& newName, int32_t Result);
		void OnSetPreviewActor__DelegateSignature(class AActor* shipActor);
		void OnReturnedToHangarAfterGame__DelegateSignature(EYGameModeType gameModeType);
		void OnPurchaseBattleReadyResult();
		void OnProgressionInitialized();
		void OnPreviewLoadoutFinishedLoading();
		void OnPreviewActor_LoadoutAsyncLoaded(class UYShipLoadout* loadout);
		void OnPlayerResearchRequestData(int32_t itemID, bool purchaseState);
		void OnPlayerLoggedIn__DelegateSignature();
		void OnPlayerDisconnected__DelegateSignature();
		void OnPlayerDataAvailable();
		void OnPlayerConversionRequestDone(bool Result);
		void OnPlayerContractsUpdated();
		void OnOverlayMenuToggled(bool toggled);
		void OnOverlayMenuButtonPressed(int32_t buttonID);
		void OnOutpostLoadedAndVisible();
		void OnOnboardingInitialized();
		void OnMovieStopped();
		void OnMenuStateChanged_PS4(EYMenuState previousMenuState, EYMenuState newMenuState, EYMenuSubState previousMenuSubState, EYMenuSubState currentMenuSubState);
		void OnMenuStateChanged(EYMenuState previousMenuState, EYMenuState newMenuState);
		void OnMenuSectionSelected__DelegateSignature(EYOutpostSection outpostSelection);
		void OnLoadoutUpdatedInFleet(const class FName& loadoutId);
		void OnLoadoutRemovedFromFleet(bool Result);
		void OnLoadoutAddToFleetFailed();
		void OnLoadoutAddedToFleet(bool Result);
		void OnLoadoutAdded(const class FName& loadoutId);
		void OnLoadoutActivated(class UYLoadoutManagerComponent* loadoutManager, class UYShipLoadout* shipLoadout, class UYLoadoutFilter* Filter);
		void OnItemClaimCompleted(int32_t itemID, bool Result);
		void OnInventoryInitialized();
		void OnInitialCharacterCreationFinished();
		void OnIndividualFleetMaintenanceUpdated(const class FName& fleetId, int32_t maintenanceCost);
		void OnFleetUpdated();
		void OnFleetUnlocked(EYFleetType fleetType);
		void OnDataManagerInitialized();
		void OnCareerProgressionGoalStageRewardUpdated(const class FName& goalId, bool succeed, const class FString& message);
		void OnCareerProgressionGoalProgressChanged(const class FName& goalId, int32_t newProgressValue);
		void OnCaptainUpdated();
		void OnCameraViewShipItem__DelegateSignature(const struct FCachedItemIDDataEntry& cachedItemData, EYUILoadoutItemType itemType, bool bTeleportToSlot);
		void OnBPTutorialClicked(const class FString& mapToTravel);
		void OnBPShipSelected(EYShipClass shipclass);
		void OnBPAbilitiyCategorySelected(EYAbilityCategory Category);
		void OnboardingNotifyShipSlot(const struct FCachedItemIDDataEntry& cachedItemData, EYUILoadoutItemType itemType, bool bTeleport);
		void OnAsyncVideoLoaded__DelegateSignature(class UFileMediaSource* VideoMovieSource);
		void LeaveSquad();
		bool JumpToPreviousMenuState();
		bool IsInEscapeMenu();
		void HandleShopBackendValidationResult(bool Result, EYMenuState menuState, EYMenuSubState menuSubState, int32_t spectateItemID);
		EYTechTreeItemState GetTechTreeItemStateOfItem(int32_t itemID);
		class UYHUDWidget_Squad* GetSquadMenuBP();
		class UYHUDWidget_Squad* GetSquadMenu();
		class UYShop* GetShop();
		class UYGFxMoviePlayer_YMenu* GetScaleformMenu();
		class UFileMediaSource* GetModuleVideoFromPath(const class FString& videoPath, const class FString& directory);
		class UTexture2D* GetModuleStillFromPath(const class FString& imagePath, const class FString& directory);
		int32_t GetCurrentShipResearchTreeItemId();
		int32_t GetCurrentPurchaseItemId();
		TArray<int32_t> GetAssetItemInflatedIds(class UClass* itemAsset);
		int32_t GetAssetItemBaseId(class UClass* itemAsset);
		void ForceStartMatch();
		void ForceLocalServer();
		void CoverLoginScreenWidget();
		void ClearCurrentLoadout();
		void CheckForPromotionItemsNotification();
		void AutoMatchMakeForMatchSoakTest();
		void AttemptPurchase(int32_t itemID);
		void AsyncLoadVideoFromPath(const class FString& videoPath, const class FString& directory);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGoalManager
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class UYGoalManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnGoalCounterUpdate;                                     // 0x0028(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStageUpdated;                                          // 0x0038(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRewardUpdated;                                         // 0x0048(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnlockCategory;                                        // 0x0058(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGoalPinUpdate;                                         // 0x0068(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JW7I[0x30];                                  // 0x0078(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYGoalData>                                  m_goalList;                                              // 0x00A8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VP4A[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateGoals(TArray<class FString> goals);
		void UpdateData();
		void OnGoalsUpdated__DelegateSignature();
		void OnGoalsListUpdated__DelegateSignature();
		bool IsGoalReadyToBeClaimed(const class FName& goalId);
		bool IsGoalCategoryUnlocked(EYGoalCategory Category);
		bool IsGameModesUnlocked();
		void InitializeGoalListFromDataTable(class UDataTable* DataTable);
		bool Initialized();
		void Initialize();
		void HandleOnPlayerControllerSet(class AYPlayerControllerBase* PlayerController);
		int32_t GetLastClaimedStageNumber(const class FName& goalId);
		class FName GetFirstUnclaimedGoalId();
		void ClaimGoalSucceeded(const class FString& ID, int32_t stage);
		void ClaimGoalFailed(const class FString& ID, int32_t stage, const class FString& Error);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDreadnoughtLocalPlayer
	 * Size -> 0x0140 (FullSize[0x02D0] - InheritedSize[0x0190])
	 */
	class UYDreadnoughtLocalPlayer : public ULocalPlayer
	{
	public:
		unsigned char                                              UnknownData_593B[0xA0];                                  // 0x0190(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_movieManagerSettingsPath;                              // 0x0230(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_setDumpStackTraceOnAsyncFlush;                         // 0x0240(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8IJ7[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_noOnboarding;                                          // 0x0248(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CVJH[0x7];                                   // 0x0249(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYMusicManager*                                      m_musicManager;                                          // 0x0250(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UN80[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYMovieManager*                                      m_movieManager;                                          // 0x0260(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYOnboardingManager*                                 m_onboardingManager;                                     // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYGoalManager*                                       m_goalManager;                                           // 0x0270(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R87K[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYAchievementManager*                                m_achievementManager;                                    // 0x0280(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYPeripheralEventMgr*                                m_peripheralEventMgr;                                    // 0x0288(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        m_loadedMaps;                                            // 0x0290(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            m_lastMatchReputation;                                   // 0x02A0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		int32_t                                                    m_lastMatchCredits;                                      // 0x02B0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JOE4[0x1C];                                  // 0x02B4(0x001C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YNPCAIController
	 * Size -> 0x0460 (FullSize[0x0B38] - InheritedSize[0x06D8])
	 */
	class AYNPCAIController : public AYPawnAIController
	{
	public:
		unsigned char                                              UnknownData_PM8Y[0x10];                                  // 0x06D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_evasiveUpDownMaxMaxRandomOffset;                       // 0x06E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveUpDownTimeInterval;                             // 0x06EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveUpDownPauseTime;                                // 0x06F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveUpDownMaxDistance;                              // 0x06F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<EYCombatSceneBehavior>                              m_evasiveUpDownAutoEnableBehaviours;                     // 0x06F8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NFSD[0x40];                                  // 0x0708(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_showDebug;                                             // 0x0748(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I2DA[0x7];                                   // 0x0749(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_debugAbilityActivation;                                // 0x0750(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z10E[0x17];                                  // 0x0751(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_debugEnergyActivation;                                 // 0x0768(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NLRN[0x17];                                  // 0x0769(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_runBehaviourTree;                                      // 0x0780(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7P8B[0x3];                                   // 0x0781(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_findPathTunnelSize;                                    // 0x0784(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<float>                                              m_findPathTunnelSizeA;                                   // 0x0788(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_findPathMaxExpansions;                                 // 0x0798(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTargetCover;                                   // 0x079C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTargetCoverPenalty;                            // 0x07A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTurnPenalty;                                   // 0x07A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTurnPenaltyDegreePerDist;                      // 0x07A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTurnPenaltyMaxDist;                            // 0x07AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_findPathReplan;                                        // 0x07B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxTimeWithoutReplan;                                  // 0x07B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_findPathAvoidIncEscort;                                // 0x07B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S6ZM[0x3];                                   // 0x07B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_findPathAvoidAllyDistance;                             // 0x07BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathAvoidAllyPenalty;                              // 0x07C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathAvoidEnemyDistance;                            // 0x07C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathAvoidEnemyPenalty;                             // 0x07C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_waypointProximity;                                     // 0x07CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<float>                                              m_waypointProximityA;                                    // 0x07D0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OVYA[0x10];                                  // 0x07E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_warpWaypointProximity;                                 // 0x07F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_engageTargetProximity;                                 // 0x07F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GCNI[0x4];                                   // 0x07F8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_engageAllyTargetProximity;                             // 0x07FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_18RM[0x4];                                   // 0x0800(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_pawnProximity;                                         // 0x0804(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T7G1[0x4];                                   // 0x0808(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_pawnProximityDot;                                      // 0x080C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_scrambledFlyDisplacement;                              // 0x0810(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_doScrambleFly;                                         // 0x0814(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_evasiveFlyDisplacementAllways;                         // 0x0815(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TU07[0x2];                                   // 0x0816(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_evasiveFlyDisplacement;                                // 0x0818(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_evasiveFlyDisplacementWPCount;                         // 0x081C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveFlyDisplacementClosestEnemyRange;               // 0x0820(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveFlyDisplacementTakingDamage;                    // 0x0824(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveFlyDisplacementCollisionSphere;                 // 0x0828(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_updateTargetingFrequency;                              // 0x082C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_updateAimingFrequency;                                 // 0x0830(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxFireDistance;                                       // 0x0834(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KA23[0x4];                                   // 0x0838(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxFireDistanceCreeps;                                 // 0x083C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TTSG[0x8];                                   // 0x0840(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_noneEnergyWheelIndex;                                  // 0x0848(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A6S8[0x4];                                   // 0x084C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYAIDirectEnergyWheel>                       m_directEnergyWheelRules;                                // 0x0850(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FYAIFireAbility>                             m_fireAbilities;                                         // 0x0860(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AIFN[0x20];                                  // 0x0870(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_targetOnlyPrimaryBehaviorTarget;                       // 0x0890(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EYAITargetType                                             m_targetingPrimary;                                      // 0x0891(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYAITargetType                                             m_targetingSecondary;                                    // 0x0892(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_favorSecondaryOnRange;                                 // 0x0893(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_useSecondaryStartRange;                                // 0x0894(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_useSecondaryEndRange;                                  // 0x0898(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useSecondaryOnReload;                                  // 0x089C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useSecondaryOnStaticTargets;                           // 0x089D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_INJZ[0x2];                                   // 0x089E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_useSecondaryTreatAsStaticSpeed;                        // 0x08A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_useSecondaryOnStaticTargetsRange;                      // 0x08A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useSecondaryWithTrajectoryCalculation;                 // 0x08A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useAim;                                                // 0x08A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YOR7[0x2];                                   // 0x08AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_shootBaseOffset;                                       // 0x08AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_shootDistOffset;                                       // 0x08B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_shootCloakOffset;                                      // 0x08B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_speedAcuracyErrorBase;                                 // 0x08B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_speedAcuracyErrorRand;                                 // 0x08BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_speedAcuracyOverTime;                                  // 0x08C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_evasiveAcuracyErrorRand;                               // 0x08C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_applyAimScramble;                                      // 0x08C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SRGU[0x3];                                   // 0x08C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_offsetMultiplierScrambled;                             // 0x08CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q32N[0xC];                                   // 0x08D0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_debugTargetingError;                                   // 0x08DC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9ST8[0x1F];                                  // 0x08DD(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_testAccNow;                                            // 0x08FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HFZA[0x3];                                   // 0x08FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_testAccProjSpeed;                                      // 0x0900(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBox                                                m_testAccDreadBox;                                       // 0x0904(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_testAccSpeed;                                          // 0x0920(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBox                                                m_testAccScoutBox;                                       // 0x0924(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FBox                                                m_testAccSniperBox;                                      // 0x0940(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FBox                                                m_testAccSupportBox;                                     // 0x095C(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FBox                                                m_testAccAssaultBox;                                     // 0x0978(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_testAccDist;                                           // 0x0994(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_testAccEvasiveValue;                                   // 0x0998(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_reacquireTargetBaseTime;                               // 0x099C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_reacquireTargetRandomTime;                             // 0x09A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_reacquireTargetDamageTimeConvertion;                   // 0x09A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_reacquireTargetSuspendFireBaseTime;                    // 0x09A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_reacquireTargetSuspendFireRandomTime;                  // 0x09AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_swapWeaponSuspendFireBaseTime;                         // 0x09B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_swapWeaponSuspendFireRandomTime;                       // 0x09B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_customBehaviourSuspendFireTrigerChance;                // 0x09B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_customBehaviourSuspendFireBaseTime;                    // 0x09BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_customBehaviourSuspendFireRandomTime;                  // 0x09C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useContextAbilities;                                   // 0x09C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y6JI[0x27];                                  // 0x09C5(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               m_spawnActor;                                            // 0x09EC(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic
		float                                                      m_shootSecondaryBaseOffset;                              // 0x09F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_shootSecondaryDistOffset;                              // 0x09F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_escortAttackerMaxDistance;                             // 0x09FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_avoidDistance;                                         // 0x0A00(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxPatrolSpotDistance;                                 // 0x0A04(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_escortToSecondaryPositioning;                          // 0x0A08(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_healerRole;                                            // 0x0A0C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_coordinateAproachWithFlanker;                          // 0x0A0D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZOPN[0x2];                                   // 0x0A0E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_minHideDistance;                                       // 0x0A10(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QUH8[0x8];                                   // 0x0A14(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_searchHideCoverRadius;                                 // 0x0A1C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_searchHideCoverIterations;                             // 0x0A20(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A8KE[0xBC];                                  // 0x0A24(0x00BC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AYPawn>                               m_weaponFavorTarget;                                     // 0x0AE0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class AYPawn>                               m_abilityFavorTarget;                                    // 0x0AE8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_189W[0x48];                                  // 0x0AF0(0x0048) MISSED OFFSET (PADDING)

	public:
		void TickBehavior();
		void SetSuspendFire(bool suspendFire, bool suspendFireAbilities);
		void SetStandBehaviorOnPos(class AYCreepNavigation* standLocation);
		void SetStandBehavior();
		void SetSpotBehavior(class AYPawn* Target);
		void SetSkirmishBehavior(class AYPawn* Target);
		void SetRunBehaviourTree(bool Enabled);
		void SetProperties(class UClass* newProperties);
		void SetNewFlightPlan(TArray<struct FVector> newFP, float addToReplanTime);
		void SetMaxFireDistance(float newDistance);
		void SetHideBehavior();
		void SetFiresAbility(int32_t index, bool use);
		void SetFiresAbilities(bool use);
		void SetFireAtActor(class AActor* newTarget);
		void SetFavorWeaponFireAtPawn(class AYPawn* newTarget, bool swapToNewTargetImmediately);
		void SetFavorAbilityFireAtPawn(class AYPawn* newTarget);
		void SetEvasiveUpDown(bool enable);
		void SetEscortShyBehavior(class AYPawn* Target);
		void SetEngageBehavior(class AYPawn* Target);
		void SetAvoidBehavior();
		void SendShortCommandToPlayer(EYUIShortCommands shortCmd, class AYPawn* Target);
		void RemoteControl(float TurnRight, float vertical, float throttle);
		bool IsInOrbit();
		bool IsCurrentBehaviour(EYCombatSceneBehavior behaviour);
		int32_t GetTargetedByCount(bool withCreeps);
		class AYPawn* GetPerceptedIsolatedEnemyInRange(float range, float isolatedRange, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		TArray<class AYPawn*> GetPerceptedEnemiesInRange(float range, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		TArray<class AYPawn*> GetPerceptedEnemies(bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		TArray<class AYPawn*> GetPerceptedAlliesInRange(float range, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeAITargets);
		TArray<class AYPawn*> GetPerceptedAllies(bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeAITargets);
		class AYPawn* GetMostTargetedPerceptedEnemy(float range, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		class AYPawn* GetMostDamagedPerceptedEnemy(float range, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		class AYPawn* GetMostDamagedPerceptedAllyOfBaseClass(TArray<EYShipBaseClass> baseclassList, float range, bool weaponTarget, bool abilityTarget, bool behaviorTarget);
		class AYPawn* GetMostDamagedPerceptedAlly(float range, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeAITargets);
		class AYPawn* GetCurrentBehaviourTarget();
		class AYPawn* GetCommandShip(bool searchAllied, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool* hasLineOfSight);
		class AYPawn* GetClosestStaticPerceptedEnemy(float range, float MaxSpeed, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		class AYPawn* GetClosestPerceptedEnemyOfClass(EYShipClass baseclass, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked);
		class AYPawn* GetClosestPerceptedEnemyOfBaseClass(EYShipBaseClass baseclass, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked);
		class AYPawn* GetClosestPerceptedEnemyInRange(float range, bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		class AYPawn* GetClosestPerceptedEnemy(bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeCloaked, bool includeAITargets);
		class AYPawn* GetClosestPerceptedAllyOfClass(EYShipClass baseclass, bool weaponTarget, bool abilityTarget, bool behaviorTarget);
		class AYPawn* GetClosestPerceptedAllyOfBaseClass(EYShipBaseClass baseclass, bool weaponTarget, bool abilityTarget, bool behaviorTarget);
		class AYPawn* GetClosestPerceptedAlly(bool weaponTarget, bool abilityTarget, bool behaviorTarget, bool includeAITargets, bool excludeJetFighter, bool excludeScouts);
		int32_t GetBehaviourTargetedByCount(bool withCreeps, EYTeam excludeTeam, class AYPawn* Target);
		EYAILevel GetAIDifficultyLevel();
		float GetAbilityCurrentCooldown(int32_t abilityIndex);
		bool currentBehaviourRequiresTargetPawn();
		bool currentBehaviourRequiresTargetAllyPawn();
		void ClearPath();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YAIAbilityActivationRulesDataTable
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class UYAIAbilityActivationRulesDataTable : public UYDataTable
	{
	public:
		class FString                                              m_tablePath;                                             // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBattleReadyUpdateRulesDataTable
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class UYBattleReadyUpdateRulesDataTable : public UYDataTable
	{
	public:
		class FString                                              m_tablePath;                                             // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YClientBotDataTable
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class UYClientBotDataTable : public UYDataTable
	{
	public:
		class FString                                              m_tablePath;                                             // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGlobalGameplayTuningDataTable
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class UYGlobalGameplayTuningDataTable : public UYDataTable
	{
	public:
		class FString                                              m_tablePath;                                             // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDBuffTypeIconDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDBuffTypeIconDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDColorStyleDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDColorStyleDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDEnergySelectionIconDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDEnergySelectionIconDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDHelperOverlayInstructions
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDHelperOverlayInstructions : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDInfoEncountersDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDInfoEncountersDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDInfoPlanetsDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDInfoPlanetsDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDInfoQuestObjectsDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDInfoQuestObjectsDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDInfoSpacePortsDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDInfoSpacePortsDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDInfoWarpGatesDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDInfoWarpGatesDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDOnboardingDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDOnboardingDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDPromptLocalizationDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDPromptLocalizationDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDQuestMarkerDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDQuestMarkerDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDShipClassIconDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDShipClassIconDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDShortCommandIconDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDShortCommandIconDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDTeamEliminationIconDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYHUDTeamEliminationIconDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMENUModuleVideoDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYMENUModuleVideoDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPItemDropDataTable
	 * Size -> 0x0050 (FullSize[0x00D8] - InheritedSize[0x0088])
	 */
	class UYMPItemDropDataTable : public UYDataTable
	{
	public:
		class FString                                              m_itemDropDTPath;                                        // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IF76[0x40];                                  // 0x0098(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YRankDataTable
	 * Size -> 0x0050 (FullSize[0x00D8] - InheritedSize[0x0088])
	 */
	class UYRankDataTable : public UYDataTable
	{
	public:
		TMap<int32_t, class FText>                                 m_cache;                                                 // 0x0088(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYScoringDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSubtitlesDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYSubtitlesDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVOInfoDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYVOInfoDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeaponGroupDataTable
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYWeaponGroupDataTable : public UYDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDefaultMediaPlayer_Widget
	 * Size -> 0x0050 (FullSize[0x0288] - InheritedSize[0x0238])
	 */
	class UYDefaultMediaPlayer_Widget : public UUserWidget
	{
	public:
		class UTextBlock*                                          m_mainLineSubtitles;                                     // 0x0238(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          m_secondaryLineSubtitles;                                // 0x0240(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EFQG[0x40];                                  // 0x0248(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDefendScoringController
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYDefendScoringController : public UObject
	{
	public:
		class AYGameMode_PVE*                                      m_gameMode;                                              // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYDefendScoringData>                         m_scoringList;                                           // 0x0030(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void InitializeScoringFromDataTable(class UDataTable* DataTable);
		struct FYDefendScoringResult GetScore(const class FName& objectID, int32_t Damage);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProximityMineActor
	 * Size -> 0x0058 (FullSize[0x0488] - InheritedSize[0x0430])
	 */
	class AYProximityMineActor : public AYDeployableActor
	{
	public:
		class UDataTable*                                          m_abilityDataTable;                                      // 0x0430(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CXP1[0x8];                                   // 0x0438(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_quickOverlapCheckInterval;                             // 0x0440(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_activateRadius;                                        // 0x0444(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RIV8[0xC];                                   // 0x0448(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_triggerCountDown;                                      // 0x0454(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_damageAmount;                                          // 0x0458(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_damageRadius;                                          // 0x045C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         m_damageDistanceCurve;                                   // 0x0460(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_damageType;                                            // 0x0468(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_damageActivateThreshold;                               // 0x0470(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_exactDistanceDetection;                                // 0x0474(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3IT9[0x13];                                  // 0x0475(0x0013) MISSED OFFSET (PADDING)

	public:
		void OnOverlap(class AActor* OtherActor);
		void OnMineExploded();
		void OnMineActivated(float countdown);
		void OnDealDamageToPawn(class AYPawn* hitPawn);
		void ClientExplodeMine(TArray<class AYPawn*> hitPawns);
		void ClientActivateMine();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YTurretActor
	 * Size -> 0x00C8 (FullSize[0x0550] - InheritedSize[0x0488])
	 */
	class AYTurretActor : public AYProximityMineActor
	{
	public:
		unsigned char                                              UnknownData_YJ3W[0x4];                                   // 0x0488(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bDrawDebug;                                            // 0x048C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KISS[0x3];                                   // 0x048D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_weaponClass;                                           // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYWeapon*                                            m_weapon;                                                // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9IB2[0x7C];                                  // 0x04A0(0x007C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTeam                                                     m_spawnTeamID;                                           // 0x051C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYTargetType                                               m_targetingType;                                         // 0x051D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KTW1[0x2];                                   // 0x051E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_fireRange;                                             // 0x0520(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               m_favorTarget;                                           // 0x0524(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               m_onlyTarget;                                            // 0x052C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       m_bOnlyTarget;                                           // 0x0534(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_01VV[0xB];                                   // 0x0535(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYTargetShipType>                                   m_targetShipTypes;                                       // 0x0540(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void StopFireMulticast();
		void FireMulticast(class AActor* fireTarget, int32_t projectileID, int32_t randomSeed);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDNSearchManager
	 * Size -> 0x1E85058 (FullSize[0x1E85418] - InheritedSize[0x03C0])
	 */
	class AYDNSearchManager : public AActor
	{
	public:
		int32_t                                                    m_versionId;                                             // 0x03C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_lastQuickcheckVersionId;                               // 0x03C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_lastVersionIdChangeCount;                              // 0x03C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             m_findPathStart;                                         // 0x03CC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		struct FVector                                             m_findPathGoal;                                          // 0x03D8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		int32_t                                                    m_findPathMaxExpansions;                                 // 0x03E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_findPathMaxMilliseconds;                               // 0x03E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_findPathTargetCover;                                   // 0x03EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTargetCoverPenalty;                            // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_findPathTargetSpeed;                                   // 0x03F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTargetSpeedPenalty;                            // 0x03F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTurnPenalty;                                   // 0x03FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTurnPenaltyDegreePerDist;                      // 0x0400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTurnPenaltyMaxDist;                            // 0x0404(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             m_findPathTurnPenaltyStartDirection;                     // 0x0408(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KHMJ[0x4];                                   // 0x0414(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     m_findPathAvoidLocations;                                // 0x0418(0x0010) Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic
		TArray<float>                                              m_findPathAvoidLocationRadius;                           // 0x0428(0x0010) Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic
		TArray<float>                                              m_findPathAvoidLocationPenaltys;                         // 0x0438(0x0010) Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_recalculatePath;                                       // 0x0448(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_resumeRecalculatePath;                                 // 0x0449(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_recalculatePathHash;                                   // 0x044A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_resumeRecalculatePathHash;                             // 0x044B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_smoothPath;                                            // 0x044C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TGDF[0x3];                                   // 0x044D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_smoothPathMaxConsecutiveNodes;                         // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_smoothPathShipRadius;                                  // 0x0454(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_allowAvoidAreaSmooth;                                  // 0x0458(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_smoothPathCoverLoss;                                   // 0x045C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxSmoothWaypoints;                                    // 0x0460(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxSmoothWaypointIntervalDistance;                     // 0x0464(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             m_navigationTiles;                                       // 0x0468(0x000C) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             m_navigationMin;                                         // 0x0474(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             m_navigationMax;                                         // 0x0480(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_sweepRadius;                                           // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_calculateToRadiusNumber;                               // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_isActive;                                              // 0x0494(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LZXW[0x3];                                   // 0x0495(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_CoverDistStart;                                        // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_CoverDistLength;                                       // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_CoverDistCount;                                        // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_CoverHeigthStart;                                      // 0x04A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_CoverHeigthLength;                                     // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_CoverHeigthCount;                                      // 0x04AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_CoverSampleYaw;                                        // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYSearchManagerView                                        m_view;                                                  // 0x04B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_recalculateAll;                                        // 0x04B5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_recalculateAABBs;                                      // 0x04B6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_recalculateLandscape;                                  // 0x04B7(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_skipRecalculateLandscapeOnRecalculateAll;              // 0x04B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		ECollisionChannel                                          m_recalculateAABBsChanel;                                // 0x04B9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_recalculateSweeps;                                     // 0x04BA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_playerStartInsideSearchManagerRequired;                // 0x04BB(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_recalculateReachFromDebugPos;                          // 0x04BC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		bool                                                       m_recalculateCover;                                      // 0x04BD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1HZL[0x2];                                   // 0x04BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             m_showDebugPos;                                          // 0x04C0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    m_showDebugRadius;                                       // 0x04CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_showDebugPath;                                         // 0x04D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_hidePawnDebugPathOverride;                             // 0x04D1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0WRR[0xFE];                                  // 0x04D2(0x00FE) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_awayFromGoalTiles;                                     // 0x05D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_awayFromGoalXY;                                        // 0x05D4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YPFQ[0x1E84893];                             // 0x05D5(0x1E84893) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_worldTilesFixedArrayNum;                               // 0x1E84E68(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7ZDS[0x4];                                   // 0x1E84E6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int64_t>                                            m_worldDynamic;                                          // 0x1E84E70(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9RVM[0x584];                                 // 0x1E84E80(0x0584) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_dynamicActorsUpdatedPerFrame;                          // 0x1E85404(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_debugDynamicActorsLevel;                               // 0x1E85408(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             m_navigationTileSize;                                    // 0x1E8540C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate

	public:
		void ReplaceActiveSearchManager(class AYDNSearchManager* newSearchmanager);
		struct FVector GetFreeWorldCoordinates(const struct FVector& worldCoordinates, int32_t tunnelSize);
		struct FVector GetFreeTileCoordinates(const struct FVector& worldCoordinates, int32_t tunnelSize);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDreadnoughtSingleton
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UYDreadnoughtSingleton : public UObject
	{
	public:
		class UObject*                                             m_cachedItemIdObject;                                    // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_cachedItemIDDataPath;                                  // 0x0030(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J4XU[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchDataManager
	 * Size -> 0x01E8 (FullSize[0x0210] - InheritedSize[0x0028])
	 */
	class UYEndOfMatchDataManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_8ZKX[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYEoMRewardData_MP                                  m_rewardData_MP;                                         // 0x00A0(0x0060) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FYEoMRewardData_PVE                                 m_rewardData_PVE;                                        // 0x0100(0x0070) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		TArray<struct FYMVPEntryData>                              m_mvpEntryData;                                          // 0x0170(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QRGF[0x70];                                  // 0x0180(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPlayerController*                                  m_playerController;                                      // 0x01F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5O8F[0x8];                                   // 0x01F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     m_keepAliveObjects;                                      // 0x0200(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStage
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UYEndOfMatchStage : public UObject
	{
	public:
		unsigned char                                              UnknownData_TXO7[0x88];                                  // 0x0028(0x0088) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDummyStatsPage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYDummyStatsPage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDummyMvpPage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYDummyMvpPage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDummyRewardsPage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYDummyRewardsPage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDummyScoreboard
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYDummyScoreboard : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchActivateInputStage
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchActivateInputStage : public UYEndOfMatchStage
	{
	public:
		unsigned char                                              UnknownData_SBTI[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchAsyncLoadContentBaseStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchAsyncLoadContentBaseStage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchAsyncLoadContentPveStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchAsyncLoadContentPveStage : public UYEndOfMatchAsyncLoadContentBaseStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchAsyncLoadContentPvpStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchAsyncLoadContentPvpStage : public UYEndOfMatchAsyncLoadContentBaseStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchFadeFromBlackStage
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchFadeFromBlackStage : public UYEndOfMatchStage
	{
	public:
		unsigned char                                              UnknownData_JMVA[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchFadeToBlackStage
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchFadeToBlackStage : public UYEndOfMatchStage
	{
	public:
		unsigned char                                              UnknownData_V9KB[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchInitStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchInitStage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchLoadLevelStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchLoadLevelStage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchNonSkippableStatsStage
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchNonSkippableStatsStage : public UYEndOfMatchStage
	{
	public:
		class ULevelSequencePlayer*                                m_levelSequencePlayer;                                   // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9M4U[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSequenceFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchSetupSceneBaseStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchSetupSceneBaseStage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchSetupScenePveStage
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchSetupScenePveStage : public UYEndOfMatchSetupSceneBaseStage
	{
	public:
		unsigned char                                              UnknownData_284Y[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchSetupScenePvpStage
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchSetupScenePvpStage : public UYEndOfMatchSetupSceneBaseStage
	{
	public:
		unsigned char                                              UnknownData_3LWX[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchSetupUIWidgetsStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchSetupUIWidgetsStage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchSetupPveUIWidgetsStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchSetupPveUIWidgetsStage : public UYEndOfMatchSetupUIWidgetsStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchSetupPvpUIWidgetsStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchSetupPvpUIWidgetsStage : public UYEndOfMatchSetupUIWidgetsStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchUIBaseStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchUIBaseStage : public UYEndOfMatchStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchBlurSwapStage
	 * Size -> 0x00C0 (FullSize[0x0170] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchBlurSwapStage : public UYEndOfMatchUIBaseStage
	{
	public:
		unsigned char                                              UnknownData_50Q0[0xB0];                                  // 0x00B0(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            m_blurPlaneMaterial;                                     // 0x0160(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D4RF[0x8];                                   // 0x0168(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchCameraSwapStage
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchCameraSwapStage : public UYEndOfMatchUIBaseStage
	{
	public:
		unsigned char                                              UnknownData_D2H2[0xB0];                                  // 0x00B0(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchSkippableTabScreenStage
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchSkippableTabScreenStage : public UYEndOfMatchUIBaseStage
	{
	public:
		unsigned char                                              UnknownData_RQ0Q[0xB0];                                  // 0x00B0(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchNonSkippableMvpStage
	 * Size -> 0x0040 (FullSize[0x01A0] - InheritedSize[0x0160])
	 */
	class UYEndOfMatchNonSkippableMvpStage : public UYEndOfMatchSkippableTabScreenStage
	{
	public:
		unsigned char                                              UnknownData_Y08W[0x20];                                  // 0x0160(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULevelSequencePlayer*                                m_levelSequencePlayer;                                   // 0x0180(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4ME[0x18];                                  // 0x0188(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnSequenceFinished();
		void OnAnimEventTriggered(const class FString& EventName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchNoSkipMvpStage_Custom
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UYEndOfMatchNoSkipMvpStage_Custom : public UYEndOfMatchNonSkippableMvpStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchPveRewardsPageAnimatedStage
	 * Size -> 0x0000 (FullSize[0x0160] - InheritedSize[0x0160])
	 */
	class UYEndOfMatchPveRewardsPageAnimatedStage : public UYEndOfMatchSkippableTabScreenStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchPveScorePageAnimatedStage
	 * Size -> 0x0050 (FullSize[0x01B0] - InheritedSize[0x0160])
	 */
	class UYEndOfMatchPveScorePageAnimatedStage : public UYEndOfMatchSkippableTabScreenStage
	{
	public:
		unsigned char                                              UnknownData_IFLW[0x50];                                  // 0x0160(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchPveTeamPageNonSkippableStage
	 * Size -> 0x0030 (FullSize[0x0190] - InheritedSize[0x0160])
	 */
	class UYEndOfMatchPveTeamPageNonSkippableStage : public UYEndOfMatchSkippableTabScreenStage
	{
	public:
		unsigned char                                              UnknownData_QYZT[0x20];                                  // 0x0160(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULevelSequencePlayer*                                m_levelSequencePlayer;                                   // 0x0180(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XXZH[0x8];                                   // 0x0188(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSequenceFinished();
		void OnAnimEventTriggered(const class FString& EventName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchRewardsPageAnimatedStage
	 * Size -> 0x0000 (FullSize[0x0160] - InheritedSize[0x0160])
	 */
	class UYEndOfMatchRewardsPageAnimatedStage : public UYEndOfMatchSkippableTabScreenStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStatsPageAnimatedStage
	 * Size -> 0x0050 (FullSize[0x01B0] - InheritedSize[0x0160])
	 */
	class UYEndOfMatchStatsPageAnimatedStage : public UYEndOfMatchSkippableTabScreenStage
	{
	public:
		unsigned char                                              UnknownData_53YB[0x50];                                  // 0x0160(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStaticTabScreenStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchStaticTabScreenStage : public UYEndOfMatchUIBaseStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchMvpStaticStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchMvpStaticStage : public UYEndOfMatchStaticTabScreenStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchPveTeamPageStaticStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchPveTeamPageStaticStage : public UYEndOfMatchStaticTabScreenStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchScoreboardStaticStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchScoreboardStaticStage : public UYEndOfMatchStaticTabScreenStage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchUnloadSublevelsStage
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchUnloadSublevelsStage : public UYEndOfMatchStage
	{
	public:
		void OnSublevelsUnloadedContinuation(class UYPlayerOrbitComponent* orbitComp);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStageGraph
	 * Size -> 0x0178 (FullSize[0x01A0] - InheritedSize[0x0028])
	 */
	class UYEndOfMatchStageGraph : public UObject
	{
	public:
		unsigned char                                              UnknownData_43AH[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EYEndOfMatchStages, class UYEndOfMatchStage*>         m_stages;                                                // 0x0078(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		class UInputComponent*                                     m_inputComponent;                                        // 0x00C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FYEndOfMatchStageGraphDataContainer                 m_dataContainer;                                         // 0x00D0(0x00D0) NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStagingManagerBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UYEndOfMatchStagingManagerBase : public UObject
	{
	public:
		class UYEndOfMatchStageGraph*                              m_stageGraph;                                            // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStagingManager
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UYEndOfMatchStagingManager : public UYEndOfMatchStagingManagerBase
	{
	public:
		TAssetPtr<class UClass>                                    m_endOfMatchWidgetContainerClass;                        // 0x0030(0x001C) ELEMENT_SIZE_MISMATCH Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TKB3[0x4];                                   // 0x004C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UClass>                                    m_consoleEndOfMatchWidgetContainerClass;                 // 0x0050(0x001C) ELEMENT_SIZE_MISMATCH Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GPZJ[0x4];                                   // 0x006C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		float                                                      m_scoreboardFadeInTime;                                  // 0x0070(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2UCK[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_mvpCamera;                                             // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_playerStatsCamera;                                     // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_playerCharacterSpawnerTag;                             // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        m_mvpScreenCharacterSpawnerTags;                         // 0x0090(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FName                                                m_levelSequenceTag;                                      // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_customMatchReturnToLobbyTime;                          // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A96A[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStagingManager_Custom
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class UYEndOfMatchStagingManager_Custom : public UYEndOfMatchStagingManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchStagingManagerPve
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UYEndOfMatchStagingManagerPve : public UYEndOfMatchStagingManagerBase
	{
	public:
		TAssetPtr<class UClass>                                    m_endOfMatchWidgetContainerClass;                        // 0x0030(0x001C) ELEMENT_SIZE_MISMATCH Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WNOH[0x4];                                   // 0x004C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		float                                                      m_scoreboardFadeInTime;                                  // 0x0050(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RSLS[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_backgroundCameraActorName;                             // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        m_teamScreenCharacterSpawnerTags;                        // 0x0060(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_minFarBlurSize;                                        // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_maxFarBlurSize;                                        // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_blurTime;                                              // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_blurStep;                                              // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_levelSequenceTag;                                      // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameplayAttributeComponent
	 * Size -> 0x0100 (FullSize[0x01F8] - InheritedSize[0x00F8])
	 */
	class UYGameplayAttributeComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_Z62I[0xA0];                                  // 0x00F8(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYReplicatedAttributeModifierValue>          m_replicatedAttributeModifier;                           // 0x0198(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MCJ3[0x50];                                  // 0x01A8(0x0050) MISSED OFFSET (PADDING)

	public:
		void RemoveAttributeModifer(const class FString& modifierIdentifier);
		bool QueryAttributeForValue(const class FName& attributeName, class UYKismetGameplayConditionQueryContext* queryContext, float* attributeValue);
		bool QueryAttributeForModifierValues(const class FName& attributeName, class UYKismetGameplayConditionQueryContext* queryContext, float* addModifierValue, float* percentageModifierValue, float* outGlobalPercentageModifierValue);
		class UYKismetGameplayConditionQueryContext* CreateQueryContext();
		bool AdjustValueByAttribute(const class FName& attributeName, float InValue, class UYKismetGameplayConditionQueryContext* queryContext, float* outValue);
		bool AddAttributeModifer(const class FString& constructionString, const class FString& modifierIdentifier);
		void AddAttribute(const class FName& attributeName, float neutralValue);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEnergyComponent
	 * Size -> 0x0098 (FullSize[0x0190] - InheritedSize[0x00F8])
	 */
	class UYEnergyComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnEnergyRegenerated;                                     // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnergyDepleted;                                        // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnergyChanged;                                         // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnergyConsumed;                                        // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnergyStateChanged;                                    // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      m_maxEnergy;                                             // 0x0148(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_energyRegenerationRate;                                // 0x014C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_energyConsumptionRate;                                 // 0x0150(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_energyCooldownTime;                                    // 0x0154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYEnergyFeedbackInfo>                        m_enegyConsumingFeedback;                                // 0x0158(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      m_energy;                                                // 0x0168(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_currentEnergyCooldownTime;                             // 0x016C(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EYEnergySystemState                                        m_energySystemState;                                     // 0x0170(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DOWO[0x1F];                                  // 0x0171(0x001F) MISSED OFFSET (PADDING)

	public:
		bool StopEnergyConsumption();
		bool StartEnergyConsumption();
		void OnRep_energySystemState();
		void OnRep_Energy();
		void OnOwningPawnDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const class FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
		void ModifyEnergy(float energyModifier);
		void InterruptEnergyRegeneration();
		bool HasEnergy();
		EYEnergySystemState GetState();
		float GetMaxEnergy();
		float GetEnergyRegenerationRate();
		float GetEnergyConsumptionRate();
		float GetEnergy();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEnergyShield
	 * Size -> 0x0048 (FullSize[0x0408] - InheritedSize[0x03C0])
	 */
	class AYEnergyShield : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnDamageReceived;                                        // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShieldHitByDamageCauser;                               // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      m_damageModifier;                                        // 0x03E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3U8M[0x4];                                   // 0x03E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                m_mesh;                                                  // 0x03E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class AYPawn>                               m_owningPawn;                                            // 0x03F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UDataTable*                                          m_shieldDataTable;                                       // 0x03F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_damagePassThroughFactor;                               // 0x0400(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_isDestroyed;                                           // 0x0404(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8DQZ[0x3];                                   // 0x0405(0x0003) MISSED OFFSET (PADDING)

	public:
		void ReceiveShieldDestroyed();
		void ReceiveAnyHealth(float HealthAmt, class AController* InstigatedBy, class AActor* HealthCauser);
		void OnShieldMeshSet();
		void OnRep_isDestroyed();
		void OnActiveEnergyWheelFunctionChanged(EYEnergyWheelSelection activeEnergyWheelFunction);
		bool IsShieldEnabled();
		bool GetShieldDataRow(const class FName& Name, struct FYEnergyShieldDataTableRow* rowOut);
		class AYPawn* GetOwningPawn();
		float GetMaxHealth();
		float GetHealthQuotient();
		float GetHealth();
		void EnableShield();
		void DisableShield();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEOMWidget_HavocResult
	 * Size -> 0x0010 (FullSize[0x0248] - InheritedSize[0x0238])
	 */
	class UYEOMWidget_HavocResult : public UUserWidget
	{
	public:
		TArray<class UYEOMWidget_HavocRewardElement*>              m_rewardElementWidgets;                                  // 0x0238(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void BP_OnUpdateTimeUntilResetText(const class FText& timeUntilReset);
		void BP_OnUpdateResultLine(int32_t index, int32_t lineValue, bool newRecord);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEOMWidget_HavocRewardElement
	 * Size -> 0x0000 (FullSize[0x0238] - InheritedSize[0x0238])
	 */
	class UYEOMWidget_HavocRewardElement : public UUserWidget
	{
	public:
		void BP_OnUpdateData(EYUICurrency rewardCurrencyType, int32_t scoreRequired, int32_t rewardAmount, bool rewardUnlocked, bool rewardUnlockedThisRound);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YExplosion
	 * Size -> 0x0058 (FullSize[0x0418] - InheritedSize[0x03C0])
	 */
	class AYExplosion : public AActor
	{
	public:
		float                                                      m_baseDamage;                                            // 0x03C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2174[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_damageType;                                            // 0x03C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_ignoreShields;                                         // 0x03D0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_friendlyFire;                                          // 0x03D1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_exactHitDetection;                                     // 0x03D2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BVS7[0x5];                                   // 0x03D3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         m_radialDamageFalloff;                                   // 0x03D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_radius;                                                // 0x03E0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AI4R[0xC];                                   // 0x03E4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_abilityExplosion;                                      // 0x03F0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YNIT[0x3];                                   // 0x03F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_lifeTime;                                              // 0x03F4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6Y58[0x10];                                  // 0x03F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTeam                                                     m_teamID;                                                // 0x0408(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KYIP[0xF];                                   // 0x0409(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEZProfileHelper
	 * Size -> 0x0408 (FullSize[0x0430] - InheritedSize[0x0028])
	 */
	class UYEZProfileHelper : public UObject
	{
	public:
		unsigned char                                              UnknownData_QHFQ[0x348];                                 // 0x0028(0x0348) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_uploadShare;                                           // 0x0370(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_86A3[0xB0];                                  // 0x0380(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YFactionWrapper
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UYFactionWrapper : public UObject
	{
	public:
		class FText                                                m_name;                                                  // 0x0028(0x0018) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                m_describtion;                                           // 0x0040(0x0018) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TAssetPtr<class UTexture2D>                                m_icon;                                                  // 0x0058(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W2C2[0x4];                                   // 0x0074(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		int32_t                                                    m_id;                                                    // 0x0078(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9A1T[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_jsonTableExportPath;                                   // 0x0080(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YFeatsComponent
	 * Size -> 0x0128 (FullSize[0x0220] - InheritedSize[0x00F8])
	 */
	class UYFeatsComponent : public UActorComponent
	{
	public:
		TArray<struct FYFeatDataTableEntry>                        m_featsDataTableEntries;                                 // 0x00F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		class UDataTable*                                          m_featEffectFeedbackDataTable;                           // 0x0108(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYGameplayAttributeComponent*                        m_targetAttrComponent;                                   // 0x0110(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFeatActivated;                                         // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFeatDeactivated;                                       // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RT6N[0x50];                                  // 0x0138(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        m_replicatedFeats;                                       // 0x0188(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        m_featsToEnable;                                         // 0x0198(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VB8I[0x78];                                  // 0x01A8(0x0078) MISSED OFFSET (PADDING)

	public:
		void RemoveFeatServer(const class FName& featName);
		void RemoveFeat(const class FName& featName);
		void OnRep_Feats();
		void OnPlayerRespawned(class AYPlayerController* Player);
		void OnPawnPossessed(class AYPawn* YPawn, class AController* Controller);
		void OnAiEnteredMatch();
		void MulticastOnPawnEnteredMatch();
		bool HasFeat(const class FName& featName);
		void EnableFeatMulticast(const class FName& featName);
		void DisableFeatMulticast(const class FName& featName);
		void DeactivateFeatMulticast(const class FName& featName);
		void AddFeatServer(const class FName& featName);
		bool AddFeat(const class FName& featName);
		void AddDataTable(class UDataTable* newDataTable, bool autoAddfeats);
		void ActivateFeatMulticast(const class FName& featName, const class FName& triggerType, class AYPawn* Instigator, class AYPawn* triggerTarget, float Multiplier);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YFleetManager
	 * Size -> 0x0138 (FullSize[0x0160] - InheritedSize[0x0028])
	 */
	class UYFleetManager : public UObject
	{
	public:
		class UYLoadoutManagerComponent*                           m_loadoutManagerComponent;                               // 0x0028(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FYFleet>                                     m_fleetList;                                             // 0x0030(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class AYPlayerControllerBase*                              m_owner;                                                 // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2WGQ[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYFleetTierConfigData>                       m_fleetEligibiliyConfigTable;                            // 0x0050(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X2AW[0xC0];                                  // 0x0060(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                m_fleetFirstWinOfTheDayMessage;                          // 0x0120(0x0018) Config, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AWUN[0x28];                                  // 0x0138(0x0028) MISSED OFFSET (PADDING)

	public:
		void PlayerDataInitCompleted();
		void OnToggleAutoMaintenanceSignature__DelegateSignature(bool Result);
		void OnStaticDataInitialized();
		void OnSkipMaintenanceSignature__DelegateSignature(bool Result);
		void OnLocalPlayerAvailable();
		void OnLoadoutUpdated(const class FName& loadoutId);
		void OnLoadoutsInstalled();
		void OnLoadoutRemovedFromFleetSignature__DelegateSignature(bool Result);
		void OnLoadoutDataInitialized();
		void OnLoadoutAddedToFleetSignature__DelegateSignature(bool Result);
		void OnLoadoutAdded(const class FName& loadoutId);
		void OnInitializedFromPlayerData__DelegateSignature();
		void OnInitializationCompleted__DelegateSignature();
		void OnIndividualFleetMaintenanceUpdatedSignature__DelegateSignature(const class FName& fleetId, int32_t maintenanceCost);
		void OnFleetUpdatedSignature__DelegateSignature();
		void OnFleetUnlockedSignature__DelegateSignature(EYFleetType fleetType);
		void OnFlagshipUpdated__DelegateSignature(const class FName& flagshipID);
		void HandleMmogbrainToggleAutoMaintenance(bool Result);
		void HandleMmogbrainRemovedFromFleet(bool Result);
		void HandleMmogbrainIndividualFleetMaintenanceUpdated(const class FName& fleetId, int32_t maintenanceCost);
		void HandleMmogbrainFleetUpdated();
		void HandleMmogbrainFleetMaintenance(bool Result);
		void HandleMmogbrainEligibiltyTableUpdate();
		void HandleMmogbrainAddedToFleet(bool Result);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameEngine
	 * Size -> 0x0478 (FullSize[0x1230] - InheritedSize[0x0DB8])
	 */
	class UYGameEngine : public UGameEngine
	{
	public:
		class FScriptMulticastDelegate                             OnLoadingScreenOpen;                                     // 0x0DB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadingScreenClosed;                                   // 0x0DC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchStart;                                            // 0x0DD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchEnd;                                              // 0x0DE8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_78A8[0xC8];                                  // 0x0DF8(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject*                                             m_cachedGameModeClass;                                   // 0x0EC0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WS24[0xC0];                                  // 0x0EC8(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYLocalServerDataManager*                            m_localServerDataManager;                                // 0x0F88(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTexture2D*                                          m_defaultLoadingScreenTexture;                           // 0x0F90(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                m_defaultLoadingScreenTitleText;                         // 0x0F98(0x0018) NativeAccessSpecifierPrivate
		int32_t                                                    m_cachedVSyncVariableState;                              // 0x0FB0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8KFI[0x14];                                  // 0x0FB4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_defaultLoadingScreenPath;                              // 0x0FC8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_primaryFontPath;                                       // 0x0FD8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_secondaryFontPath;                                     // 0x0FE8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_loadingScreenMoviePath;                                // 0x0FF8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SWRZ[0x10];                                  // 0x1008(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          m_loadingScreenTexture;                                  // 0x1018(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                m_loadingScreenTitleText;                                // 0x1020(0x0018) NativeAccessSpecifierPrivate
		class FText                                                m_loadingScreenDescriptionText;                          // 0x1038(0x0018) NativeAccessSpecifierPrivate
		class FText                                                m_loadingScreenGameModeText;                             // 0x1050(0x0018) NativeAccessSpecifierPrivate
		struct FYLoadingScreenInitializationData                   m_cachedLoadingScreenData;                               // 0x1068(0x00E8) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_620W[0x18];                                  // 0x1150(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYItemIDList*                                        m_progressionItemList;                                   // 0x1168(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5HBG[0x10];                                  // 0x1170(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_defaultEZProfileTime;                                  // 0x1180(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_defaultEZNetProfileTime;                               // 0x1184(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYEZProfileHelper*                                   m_ezProfile;                                             // 0x1188(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYChunkManager*                                      m_chunkManager;                                          // 0x1190(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_068W[0x84];                                  // 0x1198(0x0084) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_reconnectAttemptsOnConnectionLoss;                     // 0x121C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z0UB[0x10];                                  // 0x1220(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnStartupMoviesFinished();
		void OnReadyToSendMapLoadingTimesAnalytics();
		void OnPlayerDataLoaded();
		void OnNetworkFailureEvent(const class FString& Category, const class FString& additionalInfo, bool bShouldCauseDisconnection);
		void OnMatchStart__DelegateSignature();
		void OnMatchEnd__DelegateSignature();
		void OnLoadingStarted();
		void OnLoadingScreenOpen__DelegateSignature();
		void OnLoadingScreenClosed__DelegateSignature();
		void OnFinishedLoadingLevel__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameInstance
	 * Size -> 0x03E8 (FullSize[0x04D0] - InheritedSize[0x00E8])
	 */
	class UYGameInstance : public UGameInstance
	{
	public:
		class UYActorPoolManager*                                  m_poolManager;                                           // 0x00E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYTechTreeManager*                                   m_techTreeManager;                                       // 0x00F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_techTreeManagerPath;                                   // 0x00F8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		struct FStringAssetReference                               m_playerProgressionEnumPath;                             // 0x0108(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UUserDefinedEnum*                                    m_playerProgressionEnum;                                 // 0x0118(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7F71[0xA0];                                  // 0x0120(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject*                                             m_globalGameplayTuningVariable;                          // 0x01C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_globalGameplayTuningPath;                              // 0x01C8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_defaultCaptainPath;                                    // 0x01D8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UBlueprintGeneratedClass*                            m_defaultCaptainClass;                                   // 0x01E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYHavocDataManager*                                  m_havocDataManager;                                      // 0x01F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYGameModeSettingsDataManager*                       m_gameModeSettingsDataManager;                           // 0x01F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYSeasonsDataManager*                                m_seasonsDataManager;                                    // 0x0200(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObject*                                             m_weaponDataTable;                                       // 0x0208(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_weaponDataTablePath;                                   // 0x0210(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UObject*                                             m_animationDataTable;                                    // 0x0220(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_animationDataTablePath;                                // 0x0228(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UObject*                                             m_clientBotDataTable;                                    // 0x0238(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_clientBotDataTablePath;                                // 0x0240(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UObject*                                             m_abilityActivationRulesDataTable;                       // 0x0250(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_abilityActivationRulesDataTablePath;                   // 0x0258(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UObject*                                             m_battleReadyUpdateRulesDataTable;                       // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringClassReference                               m_battleReadyUpdateRulesDataTablePath;                   // 0x0270(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UDataTable*                                          m_playerRankTable;                                       // 0x0280(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStringAssetReference                               m_playerRankTablePath;                                   // 0x0288(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X3CP[0x20];                                  // 0x0298(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYGameInstanceLoadingScreenLayoutData               m_loadingScreenData_PS4;                                 // 0x02B8(0x01E0) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FStringAssetReference                               m_soakTestLoadoutFilterPath;                             // 0x0498(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		struct FStringAssetReference                               m_soakTestJetLoadoutFilterPath;                          // 0x04A8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		class UObject*                                             m_soakTestLoadoutFilter;                                 // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObject*                                             m_soakTestJetLoadoutFilter;                              // 0x04C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UA14[0x8];                                   // 0x04C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPlayerDataLoaded();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Menu
	 * Size -> 0x0000 (FullSize[0x0880] - InheritedSize[0x0880])
	 */
	class AYGameMode_Menu : public AYGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Outpost
	 * Size -> 0x0340 (FullSize[0x0BC0] - InheritedSize[0x0880])
	 */
	class AYGameMode_Outpost : public AYGameMode_Menu
	{
	public:
		unsigned char                                              UnknownData_EUQT[0x110];                                 // 0x0880(0x0110) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_tansitionManagerClass;                                 // 0x0990(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AYPlayerController_Outpost*                          m_player;                                                // 0x0998(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYMenu*                                              m_outpostHUD;                                            // 0x09A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYOutpostTransitionManager*                          m_transitionManager;                                     // 0x09A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CWS2[0x28];                                  // 0x09B0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYOfficersOverview                                  m_officersOverview;                                      // 0x09D8(0x0058) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_51K0[0xF0];                                  // 0x0A30(0x00F0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EYOutpostSection, class ACameraActor*>                m_outpostCameras;                                        // 0x0B20(0x0050) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TMap<int32_t, class AMatineeActor*>                        m_shipSelectionAnims;                                    // 0x0B70(0x0050) ZeroConstructor, Transient, NativeAccessSpecifierPrivate

	public:
		void StreamLevel(const struct FYStreamingOperation& streamOperation);
		void SectionSelected(EYOutpostSection newSection);
		void ReloadCaptain();
		void PlayerFlagshipChanged(const class FName& flagshipID);
		void PlayerDisconnected();
		void OnSubLevelLoaded__DelegateSignature();
		void OnOutpostTransitionCompleted__DelegateSignature(EYOutpostSection newSection);
		void OnHudAvailable();
		void LaunchTutorial(const class FName& tutorialMap);
		void InitializeOutpostShipInternal();
		void InitializeOutpostShip();
		void InitAudioEvents();
		void HandleOnLevelStreamed();
		void HandleOnLevelFinalized();
		class AYMenu* GetOutpostHUD();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState
	 * Size -> 0x15C0 (FullSize[0x1A60] - InheritedSize[0x04A0])
	 */
	class AYGameState : public AGameState
	{
	public:
		class FName                                                m_gameModeShortName;                                     // 0x04A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_serverFrameTime;                                       // 0x04A8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_serverProfiling;                                       // 0x04AC(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DYMI[0x3];                                   // 0x04AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMatchStarted;                                          // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchEnded;                                            // 0x04C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerLeaveMatch;                                      // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       m_isPlayingEndOfMatch;                                   // 0x04E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_02T6[0x3];                                   // 0x04E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_remainingTime;                                         // 0x04E4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYMatchResult                                              m_matchResult;                                           // 0x04E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KS4Y[0x7];                                   // 0x04E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYProjectileTracking*                                m_projTracker;                                           // 0x04F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_numPlayersT1;                                          // 0x04F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_numPlayersT2;                                          // 0x04FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYGameModeType                                             m_gameModeType;                                          // 0x0500(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYGameModeType                                             m_gameModeHUDType;                                       // 0x0501(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_showAIonMinimap;                                       // 0x0502(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EYHudState                                                 m_matchStartHUDState;                                    // 0x0503(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U2QE[0x4];                                   // 0x0504(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AYNPCState*>                                  m_npcStateArray;                                         // 0x0508(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		class FString                                              m_gameModeHUDName;                                       // 0x0518(0x0010) ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnyKill;                                               // 0x0528(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerSuicide;                                    // 0x0538(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerMadeKill;                                   // 0x0548(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerWasKilled;                                  // 0x0558(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       m_loadPawnsWhenLoadingLoadouts;                          // 0x0568(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_isMatchStarted;                                        // 0x0569(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isMatchEnded;                                          // 0x056A(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		EYMatchResult                                              m_finalMatchResult;                                      // 0x056B(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S637[0x4];                                   // 0x056C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYTeamsBoosterComponent*                             m_teamsBoosterComponent;                                 // 0x0570(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_allowWarpingOnSpawning;                                // 0x0578(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QRZX[0x14DF];                                // 0x0579(0x14DF) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_haveClassIconHiding;                                   // 0x1A58(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TAZS[0x7];                                   // 0x1A59(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateMusicState();
		void SetRemainingTime(int32_t Time);
		void SetAllowWarpingOnSpawning(bool allowWarping);
		bool RequiresPawnToPlay();
		void OnRep_ServerProfiling();
		void OnRep_ServerFrameTime();
		void OnRep_RemainingTime();
		void OnRep_IsMatchStarted();
		void OnRep_IsMatchEnded();
		void OnRep_FinalMatchResult();
		void OnPlayerLeaveMatch__DelegateSignature(class APlayerState* playerLeaving);
		void OnMatchStarted__DelegateSignature();
		void OnMatchEnded__DelegateSignature();
		void NewPlayerEntersOrbit();
		void KillDelegate__DelegateSignature(class AYPawn* Killer, class AYPawn* victim);
		bool IsWinner(EYTeam Team);
		bool IsWarpingOnSpawningAllowed();
		bool IsWaitingForNewRound();
		bool IsMatchStarted();
		bool IsMatchEnded();
		bool IsInEndOfMatchScreen();
		bool HasEnoughPlayersLeft();
		int32_t GetTeamScore(EYTeam Team);
		class UYTeamsBoosterComponent* GetTeamsBoosterComponent();
		TArray<class APlayerState*> GetPRIArray();
		EYUIOverlayType GetOverlayMenuType();
		class UYMPQuestsCollection* GetMPQuestsCollection();
		int32_t GetMatchTimer();
		EYGameModeType GetGameModeType();
		EYGameModeType GetGameModeHUDType();
		class AGameMode* GetDefaultGameModeClass();
		void ExecuteCleanup();
		void ClientNotifyKill(class AYPawn* Killer, class AYPawn* victim);
		void CleanUpOnMatchEnd();
		bool CanPawnBeDamaged();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Objective
	 * Size -> 0x00E0 (FullSize[0x1B40] - InheritedSize[0x1A60])
	 */
	class AYGameState_Objective : public AYGameState
	{
	public:
		unsigned char                                              UnknownData_K6MN[0x70];                                  // 0x1A60(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_objectiveWidgetClass;                                  // 0x1AD0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_objectivePS4WidgetClass;                               // 0x1AD8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget*                                         m_objectiveWidget;                                       // 0x1AE0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_isVisibilityDistanceOverridden;                        // 0x1AE8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_77PY[0x3];                                   // 0x1AE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_VisibilityDistanceOverride;                            // 0x1AEC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_VisibilityDuration;                                    // 0x1AF0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VT4Q[0x4];                                   // 0x1AF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYObjectiveData>                             m_objectives;                                            // 0x1AF8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WCB9[0x29];                                  // 0x1B08(0x0029) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYMinimapVisibilityRulesByDesign                    m_minimapVisibilityRulesByDesign;                        // 0x1B31(0x000A) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MEZ0[0x5];                                   // 0x1B3B(0x0005) MISSED OFFSET (PADDING)

	public:
		void UpdateUIForCompleted();
		void UpdateRegisteredActor(class AActor* Actor);
		void UpdateObjectiveUI();
		bool ToggleObjectiveUIWidget();
		bool ShowObjectiveUIWidget(bool enable);
		bool SetObjectiveState(const class FName& ID, EYObjectiveState State);
		void SetObjectiveCurrentCountToComplete(const class FName& ID, int32_t Value);
		void SetMainObjective(const class FName& ID, bool isMainObjective);
		void RegisterObjectiveActor(class AActor* Actor);
		void OnRep_Objectives();
		void NotifyObjectiveActors(const class FName& ID, EYObjectiveState State);
		void InitializeObjectivesFromDataTable(class UDataTable* objectivesDataTable);
		class FText GetQuestTextList(bool main);
		EYObjectiveState GetObjectiveState(const class FName& ID);
		int32_t GetIndexOfObjective(const class FName& ID);
		void EventObjectiveStateChange(const class FName& ID, EYObjectiveState State);
		void DumpRegObjectives();
		bool CreateObjectiveUIWidget();
		int32_t AddObjectiveCurrentCountToComplete(const class FName& ID, int32_t Value);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Objective
	 * Size -> 0x0000 (FullSize[0x0880] - InheritedSize[0x0880])
	 */
	class AYGameMode_Objective : public AYGameMode
	{
	public:
		void SetObjectiveState(const class FName& ID, EYObjectiveState State);
		void SetObjectiveCurrentCountToComplete(const class FName& ID, int32_t Value);
		void SetMainObjective(const class FName& ID, bool isMainObjective);
		EYObjectiveState GetObjectiveState(const class FName& ID);
		int32_t AddObjectiveCurrentCountToComplete(const class FName& ID, int32_t Value);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class UYMPQuest : public UObject
	{
	public:
		unsigned char                                              UnknownData_2J63[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                m_name;                                                  // 0x0030(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FString                                              m_id;                                                    // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                m_description;                                           // 0x0058(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FYObjectiveCount                                    m_targetValues;                                          // 0x0070(0x0010) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		TArray<int32_t>                                            m_FPReward;                                              // 0x0080(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       m_enableInGame;                                          // 0x0090(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0QVR[0x3];                                   // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_requiredRank;                                          // 0x0094(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IXZ4[0x8];                                   // 0x0098(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPlayerControllerBase*                              m_playerOwner;                                           // 0x00A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4ZHH[0x18];                                  // 0x00A8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerMPQuestCycle
	 * Size -> 0x0048 (FullSize[0x0140] - InheritedSize[0x00F8])
	 */
	class UYPlayerMPQuestCycle : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_58ND[0x20];                                  // 0x00F8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPlayerControllerBase*                              m_owner;                                                 // 0x0118(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYMPQuestData*                                       m_questData;                                             // 0x0120(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYMPActiveQuest>                             m_activeQuests;                                          // 0x0128(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6AYA[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnQuestsRefresh();
		void OnQuestProgression__DelegateSignature(const class FText& questName, int32_t previousProgress, int32_t currentProgress, int32_t valueForCompleting);
		void OnQuestCompleted__DelegateSignature(const class FText& questName, int32_t previousProgress, int32_t reliableFinalProgress);
		void OnBackendDataAvailable();
		void MatchEnded();
		void InitializeServerQuestCycle();
		void InitializeClientQuestCycle();
		void ClientOnQuestProgression(const class FText& questName, const struct FYMPQuestState& State, int32_t previousProgress, int32_t currentProgress, int32_t valueForCompleting);
		void ClientOnQuestCompleted(const class FText& questName, const struct FYMPQuestState& State, int32_t previousProgress, int32_t reliableFinalProgress);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Multiplayer
	 * Size -> 0x0158 (FullSize[0x09D8] - InheritedSize[0x0880])
	 */
	class AYGameMode_Multiplayer : public AYGameMode_Objective
	{
	public:
		float                                                      m_orbitDurationOverride;                                 // 0x0880(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxMatchTime;                                          // 0x0884(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_postMatchDuration;                                     // 0x0888(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_travelToDefaultMapDelay;                               // 0x088C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_gameTimePctForAcceptingLogins;                         // 0x0890(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_gameScorePctForAcceptingLogins;                        // 0x0894(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_allowCancelWaveSpawning;                               // 0x0898(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useWaveSpawning;                                       // 0x0899(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5MKE[0x3E];                                  // 0x089A(0x003E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYPlayersRatingManager*                              m_playersRatingManager;                                  // 0x08D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LRUP[0x58];                                  // 0x08E0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_VOTriggerWon;                                          // 0x0938(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerLost;                                         // 0x0940(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerDraw;                                         // 0x0948(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CPZ7[0x11];                                  // 0x0950(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_enableSpawnAI;                                         // 0x0961(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KCH4[0x6];                                   // 0x0962(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYTrainingMatchAI>                           m_npcPlayers;                                            // 0x0968(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       m_wereNPCsShuffled;                                      // 0x0978(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKAJ[0x3];                                   // 0x0979(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_maxPlayersPerTeam;                                     // 0x097C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZTDR[0x8];                                   // 0x0980(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_maxSpawnsPerClassInATeam;                              // 0x0988(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_randomizeClassFirst;                                   // 0x098C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_showAISpawnDebug;                                      // 0x098D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MZPJ[0x32];                                  // 0x098E(0x0032) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYAISpawnTier>                               m_aiSpawnTierRules;                                      // 0x09C0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UYPlayerMatchStatisticsManager*                      m_playerMatchStatisticsManager;                          // 0x09D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool SpawnNPC(int32_t npcIndex, bool spawnInGivenLocation, const struct FVector& SpawnLocation, const struct FRotator& spawnRotation);
		void ShuffleNPCPlayerCharacterProfiles();
		void SetTeamSizeAI(EYTeam Team, int32_t teamSize);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_CapturePoints
	 * Size -> 0x0038 (FullSize[0x0A10] - InheritedSize[0x09D8])
	 */
	class AYGameMode_CapturePoints : public AYGameMode_Multiplayer
	{
	public:
		class AYGameState_CP*                                      m_gameState;                                             // 0x09D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AYCapturePoint*>                              m_capturePoints;                                         // 0x09E0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_scoreForWinning;                                       // 0x09F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_territoryScoreMultiplier;                              // 0x09F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_territoryScoreThreshold;                               // 0x09F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_nearlyWonComMessageValue;                              // 0x09FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_ticketGainPerStationDuringSuddenDeath;                 // 0x0A00(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_ticketGainPerKill;                                     // 0x0A04(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_onlyLeadingTeamGainsTickets;                           // 0x0A08(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_onlyGainTicketsIfNoHostilesInRange;                    // 0x0A09(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJ2I[0x2];                                   // 0x0A0A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_scoreUpdateInterval;                                   // 0x0A0C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnObjectiveCompleted(EYTeam Team, int32_t CPIdx, TArray<class AController*> objectiveCompletedController);
		void NotifyObjectiveCompleted(EYTeam objectiveTeam, const class FString& message);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_MP
	 * Size -> 0x02A0 (FullSize[0x1DE0] - InheritedSize[0x1B40])
	 */
	class AYGameState_MP : public AYGameState_Objective
	{
	public:
		class FScriptMulticastDelegate                             OnReadyToStartOrbitTransition;                           // 0x1B40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JQGW[0xE0];                                  // 0x1B50(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_endOfMatchDuration;                                    // 0x1C30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYEOMTime                                           m_EOMTime;                                               // 0x1C34(0x0008) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       m_useWaveSpawning;                                       // 0x1C3C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8FA0[0x3];                                   // 0x1C3D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_levelVariationIndex;                                   // 0x1C40(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_allowCancelWaveSpawning;                               // 0x1C44(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W934[0x3];                                   // 0x1C45(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_waveRespawningTime;                                    // 0x1C48(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SL2L[0x4];                                   // 0x1C4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_teamAName;                                             // 0x1C50(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_teamBName;                                             // 0x1C60(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GUC2[0x50];                                  // 0x1C70(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYOrbitTransitionManager*                            m_orbitTransitionManager;                                // 0x1CC0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_endOfMatchStagingManagerClass;                         // 0x1CC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_endOfMatchCustomRoomStagingManagerClass;               // 0x1CD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYEndOfMatchStagingManagerBase*                      m_endOfMatchStagingManager;                              // 0x1CD8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYMPQuestsCollection*                                m_MPQuestsCollection;                                    // 0x1CE0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TAssetPtr<class UDataAsset>                                m_NPCSetPtrRecruit;                                      // 0x1CE8(0x001C) ELEMENT_SIZE_MISMATCH Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_32SW[0x4];                                   // 0x1D04(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UDataAsset>                                m_NPCSetPtrVeteran;                                      // 0x1D08(0x001C) ELEMENT_SIZE_MISMATCH Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MBOL[0x4];                                   // 0x1D24(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UDataAsset>                                m_NPCSetPtrLegendary;                                    // 0x1D28(0x001C) ELEMENT_SIZE_MISMATCH Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HDTJ[0x4];                                   // 0x1D44(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		EYFleetType                                                m_noMmogbrainFleetType;                                  // 0x1D48(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYAIType                                                   m_noMmogbrainAIType;                                     // 0x1D49(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TKIA[0x1E];                                  // 0x1D4A(0x001E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    m_matchTimeStart;                                        // 0x1D68(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_serverOTSVersion;                                      // 0x1D70(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ML3S[0x10];                                  // 0x1D80(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataAsset*                                          m_cachedNPCSet;                                          // 0x1D90(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HMLO[0x20];                                  // 0x1D98(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAnimEventTriggered;                                    // 0x1DB8(0x0010) ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PV35[0x18];                                  // 0x1DC8(0x0018) MISSED OFFSET (PADDING)

	public:
		void PlayerReplicatedDataChanged(class AYPlayerReplicationInfo* pri);
		void OrbitLevelReady();
		void OnRep_TeamName();
		void OnRep_OTSVersion();
		void OnRep_LevelVariationIndex();
		void OnReadyToStartOrbitTransition__DelegateSignature();
		void OnClientNPCSetLoaded();
		void NPCReplicatedDataChanged(class AYNPCReplicationInfo* npcri);
		void NotifyBackendReceivedEOMData();
		void NewPlayerJoinMatch();
		void LoadNPCSetOnFleetInitialized();
		int32_t GetLevelVariationIndex();
		EYFleetType GetFleetType();
		EYAIType GetAIType();
		void CheckReadyToSetUpLevelsInOrbitManager();
		void CheckOTSDataAvailability();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_CapturePointsGame
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYGameState_CapturePointsGame : public UInterface
	{
	public:
		void IncrementStationCount(EYTeam Team);
		int32_t GetStationCountT2();
		int32_t GetStationCountT1();
		void DecrementStationCount(EYTeam Team);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_TicketsGame
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYGameState_TicketsGame : public UInterface
	{
	public:
		int32_t GetMaxTickets();
		float GetCurrentTicketsPercentageT2();
		float GetCurrentTicketsPercentageT1();
		int32_t GetCurrentTicketCountT2();
		int32_t GetCurrentTicketCountT1();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_CP
	 * Size -> 0x0040 (FullSize[0x1E20] - InheritedSize[0x1DE0])
	 */
	class AYGameState_CP : public AYGameState_MP
	{
	public:
		unsigned char                                              UnknownData_6H58[0x28];                                  // 0x1DE0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_currentTicketCountT1;                                  // 0x1E08(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_currentTicketCountT2;                                  // 0x1E0C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_scoreForWinning;                                       // 0x1E10(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_currentStationCountT1;                                 // 0x1E14(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_currentStationCountT2;                                 // 0x1E18(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SSMM[0x4];                                   // 0x1E1C(0x0004) MISSED OFFSET (PADDING)

	public:
		void TriggerIsCapturingVO(bool Enemy, const class FString& capturePointName, class AYPawn* Pawn);
		void TriggerHasCapturedVO(bool Enemy, const class FString& capturePointName, class AYPawn* Pawn);
		void OnRep_TicketCountChanged();
		void OnRep_ScoreForWining();
		void ObjectiveCompleted(EYTeam objectiveTeam, const class FString& message);
		class AYPawn* GetLocalControlledPawn();
		int32_t GetCurrentTicketCountT2();
		int32_t GetCurrentTicketCountT1();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_TER
	 * Size -> 0x0250 (FullSize[0x2070] - InheritedSize[0x1E20])
	 */
	class AYGameState_TER : public AYGameState_CP
	{
	public:
		float                                                      m_earlyLeadTicketFactorVO;                               // 0x1E20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_winningTicketFactorVO;                                 // 0x1E24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_killingItTicketFactorVO;                               // 0x1E28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RFUU[0x3];                                   // 0x1E2C(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bAllowTerritoryLinking;                                // 0x1E2F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_bAllowLinkBreaking;                                    // 0x1E30(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9Q4A[0x3];                                   // 0x1E31(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_linkBreakingRadius;                                    // 0x1E34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_linkDetectionRadius;                                   // 0x1E38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxLinkInfluence;                                      // 0x1E3C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bCalculateEmptyTerritoryBubbles;                       // 0x1E40(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WZ9K[0x3];                                   // 0x1E41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_linkingExponent;                                       // 0x1E44(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_linkingBonusRadiusMulti;                               // 0x1E4C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_linkingRangeMulti;                                     // 0x1E50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YNLF[0x4];                                   // 0x1E54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYTerritoryShipInfluenceRadius>              m_shipClassInfluences;                                   // 0x1E58(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    m_dominationTimeVO;                                      // 0x1E68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_dominationDeltaVO;                                     // 0x1E6C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bUseRespawnJetWarpInFX;                                // 0x1E70(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G6Y6[0x7];                                   // 0x1E71(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            m_warpInParticle;                                        // 0x1E78(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_currentTerritoryT1;                                    // 0x1E80(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_currentTerritoryT2;                                    // 0x1E84(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W5VH[0x1A8];                                 // 0x1E88(0x01A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYTerritoryVolume*                                   m_gameVolume;                                            // 0x2030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SK3O[0x28];                                  // 0x2038(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        m_timerHandle_Domination;                                // 0x2060(0x0008) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NFQ4[0x8];                                   // 0x2068(0x0008) MISSED OFFSET (PADDING)

	public:
		void OrbitLevelReady();
		void OnRep_TicketCountChanged();
		void OnRep_TerritoryT2();
		void OnRep_TerritoryT1();
		void OnCapturePointHasBeenCaptured(EYTeam Team, int32_t CPIdx, const class FString& capturePointName, TArray<class AController*> objectiveCompletedController);
		bool IsGainingControlOverThreshold(EYTeam Team, float threshold);
		float GetShipClassInfluenceRadius(EYShipClass shipclass);
		int32_t GetCurrentTerritoryT2();
		int32_t GetCurrentTerritoryT1();
		void CheckForAudioFeedbackKillingIt();
		void CheckForAudioFeedbackForWinning();
		void CheckForAudioFeedbackForEarlyLead();
		void CheckForAudioFeedbackForDominating();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Territory
	 * Size -> 0x0020 (FullSize[0x0A30] - InheritedSize[0x0A10])
	 */
	class AYGameMode_Territory : public AYGameMode_CapturePoints
	{
	public:
		float                                                      m_scoringTerritorySecuredUpdateTime;                     // 0x0A10(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_respawningWaveTime;                                    // 0x0A14(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_spawnprotectionBufName;                                // 0x0A18(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_spawnprotectionDebufName;                              // 0x0A20(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxTimeBeforeForcedRespawn;                            // 0x0A28(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CM4I[0x4];                                   // 0x0A2C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnObjectiveCompleted(EYTeam Team, int32_t CPIdx, TArray<class AController*> objectiveCompletedController);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_PVE
	 * Size -> 0x0068 (FullSize[0x0A40] - InheritedSize[0x09D8])
	 */
	class AYGameMode_PVE : public AYGameMode_Multiplayer
	{
	public:
		int32_t                                                    m_maxPlayerTeamRespawns;                                 // 0x09D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_automaticallyAddSpawnedEnemiesToList;                  // 0x09DC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LI4R[0x3];                                   // 0x09DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAnyNPCKilled;                                          // 0x09E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyNPCKilled;                                        // 0x09F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPVEModeStarted;                                        // 0x0A00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AYPVEEventManager*                                   m_pveEventManager;                                       // 0x0A10(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxTimeBeforeForcedRespawn;                            // 0x0A18(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IARZ[0x4];                                   // 0x0A1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYWaveScoringController*                             m_waveScoringController;                                 // 0x0A20(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYKillScoringController*                             m_killScoringController;                                 // 0x0A28(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYMedalScoringController*                            m_medalScoringController;                                // 0x0A30(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYDefendScoringController*                           m_defendScoringController;                               // 0x0A38(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTeamScore(TArray<int32_t> scores);
		void RemoveNPCFromEnemyList(int32_t npcID);
		void PlayersWin();
		void PlayersLose();
		void OnNPCSpawnedEvent(int32_t npcID, class AYPawn* Pawn);
		void InitializeYAICombatSceneManager(class AYAICombatSceneManager* YAICombatSceneManager);
		void InitializeGameModeFromEventManager(class AYPVEEventManager* pveEventManager);
		int32_t GetTeamScore();
		class AYAICombatSceneManager* GetCombatSceneManager();
		void AddWaveTeamKillScore(int32_t Score);
		void AddTeamScore(TArray<int32_t> scores);
		void AddNPCToEnemyList(int32_t npcID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWaveScoringController
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UYWaveScoringController : public UObject
	{
	public:
		unsigned char                                              UnknownData_RSA2[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYGameMode_PVE*                                      m_gameMode;                                              // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYWaveScoringData>                           m_waveScoringList;                                       // 0x0038(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYKillScoringData>                           m_killScoringList;                                       // 0x0048(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYRemainingPlayerScoringData>                m_remainingPlayerScoringList;                            // 0x0058(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FTimerHandle                                        m_timerHandle_WaveScoring;                               // 0x0068(0x0008) Protected, NativeAccessSpecifierProtected

	public:
		void UpdateBonus();
		void StartWave(int32_t idx);
		void InitializeTimeScoringFromDataTable(class UDataTable* DataTable);
		void InitializeRemainingScoringFromDataTable(class UDataTable* DataTable);
		void InitializeKillScoringFromDataTable(class UDataTable* DataTable);
		int32_t GetScoreForRemainingPlayers();
		struct FYWaveScoringResult EndWave();
		void DeductScoreDueToPlayerDeath();
		void ClearTimers();
		void CheckWhetherToDeductKillScore(float killedNPCAliveTime);
		void AddWaveKillScore(int32_t Score);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YKillScoringController
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UYKillScoringController : public UObject
	{
	public:
		class AYGameMode_PVE*                                      m_gameMode;                                              // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void InitializeScoringFromDataTable(class UDataTable* DataTable);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Destroy
	 * Size -> 0x0000 (FullSize[0x0A40] - InheritedSize[0x0A40])
	 */
	class AYGameMode_Destroy : public AYGameMode_PVE
	{
	public:
		void StartWave(int32_t idx);
		void EndWave();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Escort
	 * Size -> 0x0000 (FullSize[0x0A40] - InheritedSize[0x0A40])
	 */
	class AYGameMode_Escort : public AYGameMode_PVE
	{
	public:
		void StartWave(int32_t idx);
		int32_t GetEscortShipPawnID();
		class AYPawn* GetEscortShipPawn();
		void EscortShipSpawned(int32_t escortShipPawnID);
		void EscortShipHealed(float amount, float newHealth, class AController* instigatingController);
		void EscortShipDamaged(float amount, float newHealth, class AController* instigatingController);
		void EndWave();
		void DelegateEscortShipDamaged(float amount, float newHealth, class AController* instigatingController);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMedalScoringController
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYMedalScoringController : public UObject
	{
	public:
		class AYGameMode_PVE*                                      m_gameMode;                                              // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYMedalScoringData>                          m_medalList;                                             // 0x0030(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void InitializeFromDataTable(class UDataTable* DataTable);
		struct FYMedal GetMedal(int32_t teamScore);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_PVE
	 * Size -> 0x0140 (FullSize[0x1F20] - InheritedSize[0x1DE0])
	 */
	class AYGameState_PVE : public AYGameState_MP
	{
	public:
		unsigned char                                              UnknownData_R6OQ[0x70];                                  // 0x1DE0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYLoadoutFilter*                                     m_respawnFighterLoadoutFilter;                           // 0x1E50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_numAliveEnemies;                                       // 0x1E58(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_02PV[0x4];                                   // 0x1E5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_scoringWidgetClass;                                    // 0x1E60(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AYPVEEventManager*                                   m_pveEventManager;                                       // 0x1E68(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_matchTime;                                             // 0x1E70(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetMaxCount;                                      // 0x1E74(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetMaxPoints;                                     // 0x1E78(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetPointsAssault;                                 // 0x1E7C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetPointsDreadnought;                             // 0x1E80(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetPointsDreadnoughtJets;                         // 0x1E84(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetPointsScout;                                   // 0x1E88(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetPointsSniper;                                  // 0x1E8C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetPointsSupport;                                 // 0x1E90(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_aiBudgetPointsTitan;                                   // 0x1E94(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9XBV[0x8];                                   // 0x1E98(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUserWidget*                                         m_scoringWidget;                                         // 0x1EA0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_playerTeamRespawnsLeft;                                // 0x1EA8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W1TK[0x4];                                   // 0x1EAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYWaveScoringResult>                         m_waveScores;                                            // 0x1EB0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_teamScore;                                             // 0x1EC0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z1W3[0x4];                                   // 0x1EC4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            m_teamScoreBuckets;                                      // 0x1EC8(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FYMedal                                             m_medal;                                                 // 0x1ED8(0x0020) Transient, Protected, NativeAccessSpecifierProtected
		struct FYDefendScoringResult                               m_defendingResult;                                       // 0x1EF8(0x0008) Transient, Protected, NativeAccessSpecifierProtected
		EYPVEDifficulty                                            m_pveDifficulty;                                         // 0x1F00(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KYP3[0x7];                                   // 0x1F01(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     m_incomingSpawnParticles;                                // 0x1F08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_12R4[0x10];                                  // 0x1F10(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateWaveScoreResultUI(int32_t waveIdx);
		void UpdateTeamScoreUI();
		void UpdateMedalResultUI();
		void UpdateDefendResultUI();
		bool ToggleScoringUIWidget();
		bool ShowScoringUIWidget(bool enable);
		void ShowIncomingSpawnEffect(class AActor* targetActor);
		void ShowHUDMarkerOnActor(EYUIQuestMarker markerType, class AActor* targetActor);
		void SetTeamScore(TArray<int32_t> scores);
		void SendWaveScoreResult(const struct FYWaveScoringResult& waveResult);
		void SendMedalResult(const struct FYMedal& medal);
		void SendDefendResult(const struct FYDefendScoringResult& defendResult);
		void RemoveIncomingSpawnEffect(class AActor* targetActor);
		void RemoveHUDMarkerOnActor(class AActor* targetActor);
		void PVEMatchEnded(bool playersWon);
		void PlayerLivesChanged(int32_t currentLiveTotal);
		void OnTeamScoreChanged(int32_t Score);
		void OnRep_TeamScoreChanged();
		void OnRep_PlayerTeamRespawnsLeft();
		void OnPVEEventManagerInitialized();
		void MulticastShowIncomingSpawnEffect(class AActor* targetActor);
		void MulticastShowHUDMarkerOnActor(EYUIQuestMarker markerType, class AActor* targetActor);
		void MulticastRemoveIncomingSpawnEffect(class AActor* targetActor);
		int32_t GetTeamScore_PVE();
		int32_t GetRemainingTeamRespawns();
		class FText GetPVEMedal();
		EYPVEDifficulty GetPVEDifficulty();
		bool CreateScoringUIWidget();
		void AddTeamScore(TArray<int32_t> scores);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Horde
	 * Size -> 0x0058 (FullSize[0x1F78] - InheritedSize[0x1F20])
	 */
	class AYGameState_Horde : public AYGameState_PVE
	{
	public:
		class FScriptMulticastDelegate                             OnHordeWaveStateChanged;                                 // 0x1F20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EYUIQuestMarker                                            m_waveMarkerType;                                        // 0x1F30(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CFXZ[0x7];                                   // 0x1F31(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     m_waveMarkerParticle;                                    // 0x1F38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_numEnemiesKilledThisWave;                              // 0x1F40(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxWaveEnemies;                                        // 0x1F44(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxNumberOfWaves;                                      // 0x1F48(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentWaveIndex;                                      // 0x1F4C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYHordeWaveState                                           m_currentWaveState;                                      // 0x1F50(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0QYE[0x3];                                   // 0x1F51(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_numberOfRelevantEnemiesSpawnedFromBridgeheads;         // 0x1F54(0x0004) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_currentWaveDuration;                                   // 0x1F58(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A5R0[0x1C];                                  // 0x1F5C(0x001C) Fix size for supers

	public:
		void SetWaveSpawningComplete();
		void SetWaveIndex(int32_t newIndex);
		void SetSpecialWaveConditionsFulfilled(bool fulfilled);
		void OnRep_WaveStateChanged();
		void OnRep_WaveIndexChanged();
		void OnRep_NumEnemiesKilledThisWave();
		void NumberOfKilledEnemiesChanged(int32_t numberOfKilledEnemiesThisWave);
		void LastWaveEnemyRemaining(int32_t npcID);
		void HordeWaveStateChanged(EYHordeWaveState waveState, int32_t waveIndex);
		void HordeWaveCleared(int32_t waveIndex, float duration);
		bool GetSpecialWaveConditionsFulfilled();
		int32_t GetNumberOfRemainingWaveEnemies();
		EYHordeWaveState GetCurrentWaveState();
		int32_t GetCurrentWaveIndex();
		int32_t GetCurrentWaveDuration();
		void ClientBossEnemySpawned(class AYPawn* enemyPawn);
		void ClientBossEnemyDied(class AYPawn* enemyPawn);
		void BP_UpdateRegainingLivesTextVisibility(bool IsVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Horde
	 * Size -> 0x0020 (FullSize[0x0A60] - InheritedSize[0x0A40])
	 */
	class AYGameMode_Horde : public AYGameMode_PVE
	{
	public:
		bool                                                       m_automaticallyStartFirstWave;                           // 0x0A40(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9QSB[0x3];                                   // 0x0A41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_firstWaveDelay;                                        // 0x0A44(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_waveStartDuration;                                     // 0x0A48(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_waveEndDuration;                                       // 0x0A4C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_canPlayersRespawnAsCapitalShipsAfterWave;              // 0x0A50(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_refillPlayerTeamRespawnsAfterWave;                     // 0x0A51(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KETJ[0x2];                                   // 0x0A52(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_respawnsToRefill;                                      // 0x0A54(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_killFighterJetsOnWaveEnd;                              // 0x0A58(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R9OY[0x7];                                   // 0x0A59(0x0007) MISSED OFFSET (PADDING)

	public:
		void StartFirstWave();
		void EndCurrentWave();
		void CheckWaveOver();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Havoc
	 * Size -> 0x0048 (FullSize[0x0AA8] - InheritedSize[0x0A60])
	 */
	class AYGameMode_Havoc : public AYGameMode_Horde
	{
	public:
		unsigned char                                              UnknownData_8D8O[0x8];                                   // 0x0A60(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_monsterKillXP;                                         // 0x0A68(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_waveScoreXPMultiplier;                                 // 0x0A6C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_waveCompleteDuration;                                  // 0x0A70(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_upgradeSelectionDuration;                              // 0x0A74(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_waveStartDelayDuration;                                // 0x0A78(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L031[0x4];                                   // 0x0A7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYHavocWaveModifierComponent*                        m_waveModifierComponent;                                 // 0x0A80(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHavocRewardsComponent*                             m_rewardComponent;                                       // 0x0A88(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYWaveModifierImpactSetup>                   m_waveModifierImpactSetup;                               // 0x0A90(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OAW6[0x8];                                   // 0x0AA0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnWaveStartDelayTimerOver();
		void OnWaveCompleteTimerOver();
		void OnUpgradeSelectionTimerTick();
		void OnSwitchToState(EYHordeWaveState waveState, int32_t waveIndex);
		void AddXPWithContributerPlayer(int32_t xp, class AController* PC);
		void AddXPWithContributerPawn(int32_t xp, class APawn* Pawn);
		void AddXPForGroup(int32_t xp);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_TeamDeathmatch
	 * Size -> 0x0078 (FullSize[0x0A50] - InheritedSize[0x09D8])
	 */
	class AYGameMode_TeamDeathmatch : public AYGameMode_Multiplayer
	{
	public:
		int32_t                                                    m_maxTimeBeforeForcedRespawn;                            // 0x09D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_killsForWinning;                                       // 0x09DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_dominatingTreshold;                                    // 0x09E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_almostWinLooseTreshold;                                // 0x09E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_stillLeadingUpdateTreshold;                            // 0x09E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_catchingUpTreshold;                                    // 0x09EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HGZG[0x10];                                  // 0x09F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_VOTriggerLoosingLead;                                  // 0x0A00(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerGainingLead;                                  // 0x0A08(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerAlmostLoosingClose;                           // 0x0A10(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerAlmostLoosingDominated;                       // 0x0A18(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerAlmostWinningClose;                           // 0x0A20(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerAlmostWinningDominated;                       // 0x0A28(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerStillWinning;                                 // 0x0A30(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerStillLoosing;                                 // 0x0A38(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerCatchingUpTeam;                               // 0x0A40(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_VOTriggerCatchingUpEnemy;                              // 0x0A48(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Benchmark
	 * Size -> 0x0000 (FullSize[0x0A50] - InheritedSize[0x0A50])
	 */
	class AYGameMode_Benchmark : public AYGameMode_TeamDeathmatch
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Bootcamp
	 * Size -> 0x0000 (FullSize[0x0A50] - InheritedSize[0x0A50])
	 */
	class AYGameMode_Bootcamp : public AYGameMode_TeamDeathmatch
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Invasion
	 * Size -> 0x0070 (FullSize[0x0AC0] - InheritedSize[0x0A50])
	 */
	class AYGameMode_Invasion : public AYGameMode_TeamDeathmatch
	{
	public:
		bool                                                       m_triggerVOforCommandShipKill;                           // 0x0A50(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_triggerVOforCommandShipSpawn;                          // 0x0A51(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G3EG[0x6];                                   // 0x0A52(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_smallCreepClass;                                       // 0x0A58(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_smallCreepMaxCount;                                    // 0x0A60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_smallCreepMaxSpawnInterval;                            // 0x0A64(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_midCreepClass;                                         // 0x0A68(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_midCreepMaxCount;                                      // 0x0A70(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_midCreepMaxSpawnInterval;                              // 0x0A74(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_bigCreepClass;                                         // 0x0A78(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_bigCreepClassVet;                                      // 0x0A80(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_bigCreepClassLeg;                                      // 0x0A88(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_bigCreepMaxCount;                                      // 0x0A90(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_bigCreepMaxSpawnInterval;                              // 0x0A94(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_trafficControlRange;                                   // 0x0A98(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_trafficControlNodeRadius;                              // 0x0A9C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_trafficControlSkipAICapitalShips;                      // 0x0AA0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8D8E[0x3];                                   // 0x0AA1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_trafficControlSameTeamPoints;                          // 0x0AA4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_trafficControlOtherTeamPoints;                         // 0x0AA8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_debugTrafficControl;                                   // 0x0AAC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_debugAISpawn;                                          // 0x0AAD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EGUE[0x2];                                   // 0x0AAE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_respawningWaveTime;                                    // 0x0AB0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_respawningWaveGracePeriodTime;                         // 0x0AB4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_forceRespawnInWave;                                    // 0x0AB8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EQ90[0x4];                                   // 0x0ABC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetSpawnWaveTimeStamp();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_PodTDM
	 * Size -> 0x0000 (FullSize[0x0A50] - InheritedSize[0x0A50])
	 */
	class AYGameMode_PodTDM : public AYGameMode_TeamDeathmatch
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_TeamElimination
	 * Size -> 0x0048 (FullSize[0x0A98] - InheritedSize[0x0A50])
	 */
	class AYGameMode_TeamElimination : public AYGameMode_TeamDeathmatch
	{
	public:
		int32_t                                                    m_numberOfRoundsToWin;                                   // 0x0A50(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxRoundTime;                                          // 0x0A54(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_postRoundInitialDelay;                                 // 0x0A58(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_postRoundDuration;                                     // 0x0A5C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_preRoundStartDuration;                                 // 0x0A60(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_timeToShowLastTarget;                                  // 0x0A64(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_timeSinceDamageToShowLastTarget;                       // 0x0A68(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_disableShipSelectionForWinningTeam;                    // 0x0A6C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_swapTeamsOnNewRound;                                   // 0x0A6D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8NJK[0x2];                                   // 0x0A6E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_VOTriggerEnemyRemaingTemplate;                         // 0x0A70(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_VOTriggerTeamRemaingTemplate;                          // 0x0A80(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_VOTriggerTeamNoTeammatesRemaining;                     // 0x0A90(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnRoundStarted();
		void OnRoundEnded();
		void DebugShowJetSpawning(EYTeam Team);
		void DebugLogNumPlayers();
		void DebugLogMatchState();
		void DebugEndRound();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_TrainingMatch
	 * Size -> 0x0020 (FullSize[0x0A70] - InheritedSize[0x0A50])
	 */
	class AYGameMode_TrainingMatch : public AYGameMode_TeamDeathmatch
	{
	public:
		class UClass*                                              m_objectiveManagerClass;                                 // 0x0A50(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYStagedTrainingObjectiveManager*                    m_objectiveManager;                                      // 0x0A58(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_trainingMatchLoadout;                                  // 0x0A60(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_skipShipSelection;                                     // 0x0A68(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OEW6[0x7];                                   // 0x0A69(0x0007) MISSED OFFSET (PADDING)

	public:
		void PlayerEneteredBattleZone();
		void OnObjectiveUpdated();
		void OnMatchEnded();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_DemoMode
	 * Size -> 0x0008 (FullSize[0x0A78] - InheritedSize[0x0A70])
	 */
	class AYGameMode_DemoMode : public AYGameMode_TrainingMatch
	{
	public:
		unsigned char                                              UnknownData_YGVH[0x8];                                   // 0x0A70(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_TurboTDM
	 * Size -> 0x0008 (FullSize[0x0A58] - InheritedSize[0x0A50])
	 */
	class AYGameMode_TurboTDM : public AYGameMode_TeamDeathmatch
	{
	public:
		class UYGameModifierComponent*                             m_gameModifierComponent;                                 // 0x0A50(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_VisualAttraction
	 * Size -> 0x0000 (FullSize[0x0A50] - InheritedSize[0x0A50])
	 */
	class AYGameMode_VisualAttraction : public AYGameMode_TeamDeathmatch
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameMode_Singleplayer
	 * Size -> 0x0008 (FullSize[0x0888] - InheritedSize[0x0880])
	 */
	class AYGameMode_Singleplayer : public AYGameMode_Objective
	{
	public:
		unsigned char                                              UnknownData_1YCE[0x8];                                   // 0x0880(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameModeSettingsDataManager
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UYGameModeSettingsDataManager : public UObject
	{
	public:
		class FString                                              m_gameModeModifiersCfgPath;                              // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_GameModiiersDataTablePath;                             // 0x0038(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		TMap<class FName, struct FYGameModifierDataTableRow>       m_gameModifiersData;                                     // 0x0048(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       m_isInitialized;                                         // 0x0098(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SPWC[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		void Initialize(class UWorld* World);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameModifierComponent
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UYGameModifierComponent : public UObject
	{
	public:
		TArray<class FString>                                      m_activeGameModeModifierFeats;                           // 0x0028(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MNII[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameplayAttributeQueryContext
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYGameplayAttributeQueryContext : public UObject
	{
	public:
		unsigned char                                              UnknownData_B0BN[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		void AddNumberQueryContextComplex(float contextValue, const class FName& mainSpecifier, const class FName& additionalSpecifier1, const class FName& additionalSpecifier2);
		void AddNumberQueryContext(const class FName& contextSpecifier, float contextValue);
		void AddNameQueryContextComplex(const class FName& contextValue, const class FName& mainSpecifier, const class FName& additionalSpecifier1, const class FName& additionalSpecifier2);
		void AddNameQueryContext(const class FName& contextSpecifier, const class FName& contextValue);
		void AddBitMaskQueryContextComplex(int32_t contextValue, const class FName& bitMaskIdentifier, const class FName& mainSpecifier, const class FName& additionalSpecifier1, const class FName& additionalSpecifier2);
		void AddBitMaskQueryContext(const class FName& contextSpecifier, const class FName& bitMaskIdentifier);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Destroy
	 * Size -> 0x0000 (FullSize[0x1F20] - InheritedSize[0x1F20])
	 */
	class AYGameState_Destroy : public AYGameState_PVE
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Escort
	 * Size -> 0x0010 (FullSize[0x1F30] - InheritedSize[0x1F20])
	 */
	class AYGameState_Escort : public AYGameState_PVE
	{
	public:
		class AYPawn*                                              m_escortShipPawn;                                        // 0x1F20(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0PI0[0x8];                                   // 0x1F28(0x0008) MISSED OFFSET (PADDING)

	public:
		class AYPawn* GetEscortShipPawn();
		float GetEscortShipHealthPercent();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHavocDataManager
	 * Size -> 0x02E8 (FullSize[0x0310] - InheritedSize[0x0028])
	 */
	class UYHavocDataManager : public UObject
	{
	public:
		class FString                                              m_boostsCfgPath;                                         // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_loadoutsCfgPath;                                       // 0x0038(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_modifiersCfgPath;                                      // 0x0048(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_permanentEnemyModifierCfgPath;                         // 0x0058(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_rewardsCfgPath;                                        // 0x0068(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_unlockablesCfgPath;                                    // 0x0078(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_havocUIIconFolderPath;                                 // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_boostsDataTablePath;                                   // 0x0098(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_loadoutsDataTablePath;                                 // 0x00A8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_modifiersDataTablePath;                                // 0x00B8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_permanentEnemyModifiersDataTablePath;                  // 0x00C8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_rewardsDataTablePath;                                  // 0x00D8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_unlockablesDataTablePath;                              // 0x00E8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_bossWaveDataTablePath;                                 // 0x00F8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		TMap<class FName, struct FYHavocBoostsDataTableRow>        m_boostsData;                                            // 0x0108(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		TMap<class FName, struct FYHavocLoadoutsDataTableRow>      m_loadoutsData;                                          // 0x0158(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		TMap<class FName, struct FYHavocModifiersDataTableRow>     m_modifiersData;                                         // 0x01A8(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		TMap<class FName, struct FYHavocPermanentEnemyModifiersDataTableRow> m_permanentEnemyModifiersData;                           // 0x01F8(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		TMap<class FName, struct FYHavocRewardDataTableRow>        m_rewardsData;                                           // 0x0248(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		TMap<class FName, struct FYHavocRewardDataTableRow>        m_unlockablesData;                                       // 0x0298(0x0050) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            m_wavesWithLoadouts;                                     // 0x02E8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            m_wavesWithBoss;                                         // 0x02F8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       m_isInitialized;                                         // 0x0308(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TMHR[0x7];                                   // 0x0309(0x0007) MISSED OFFSET (PADDING)

	public:
		void Initialize(class UWorld* World);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInterface_ShipVanityAssetBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYInterface_ShipVanityAssetBase : public UInterface
	{
	public:
		class FString GetLocName();
		class FString GetLocDesc();
		int32_t GetItemID();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLoadoutManagerComponent
	 * Size -> 0x0148 (FullSize[0x0240] - InheritedSize[0x00F8])
	 */
	class UYLoadoutManagerComponent : public UActorComponent
	{
	public:
		class FString                                              m_developmentLoadoutsFolderPath;                         // 0x00F8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYLoadoutEntry>                              m_loadoutEntries;                                        // 0x0108(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYVOLimitedFleetEntry>                       m_demoModeLoadoutEntrys;                                 // 0x0118(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<class FString>                                      m_installerLoadoutList;                                  // 0x0128(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6666[0xC8];                                  // 0x0138(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYLoadoutFilter*                                     m_activeLoadoutFilter;                                   // 0x0200(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYShipLoadout*                                       m_activeLoadout;                                         // 0x0208(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_cachedRequestedLoadoutID;                              // 0x0210(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HP7F[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_lastLoadoutID_Recruit;                                 // 0x0220(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_lastLoadoutID_Veteran;                                 // 0x0228(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_lastLoadoutID_Legendary;                               // 0x0230(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O2JY[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnLoadoutUpdateFailed__DelegateSignature();
		void OnLoadoutUpdated__DelegateSignature(const class FName& loadoutId);
		void OnLoadoutsInstalledSignature__DelegateSignature();
		void OnLoadoutRemoved__DelegateSignature(const class FName& loadoutId);
		void OnLoadoutAddFailed__DelegateSignature();
		void OnLoadoutAdded__DelegateSignature(const class FName& loadoutId);
		void OnInitializedFromPlayerData__DelegateSignature();
		void OnChunkDownloaded(uint32_t chunkId);
		void OnActivateLoadoutAfterLoad(class UYShipLoadout* loadout);
		void InitializeFromPlayerData();
		void HandleMmogbrainLoadoutUpdated(const class FName& ID);
		void HandleMmogbrainLoadoutDeleted(const class FName& ID);
		void HandleMmogbrainLoadoutAdded(const class FName& ID);
		void ActivateLoadout(class UYShipLoadout* loadout, bool assetLoad);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Havoc
	 * Size -> 0x0198 (FullSize[0x2110] - InheritedSize[0x1F78])
	 */
	class AYGameState_Havoc : public AYGameState_Horde
	{
	public:
		struct FYHavocHUDTeamInfo                                  m_teamsHUDInfo;                                          // 0x1F78(0x0038) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PC9Y[0x60];                                  // 0x1FB0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYLoadoutFilter*                                     m_defaultLoadoutsFilter;                                 // 0x2010(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYHavocState                                               m_currentHavocState;                                     // 0x2018(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z2K4[0x3];                                   // 0x2019(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_playerWaveXP;                                          // 0x201C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_totalXP;                                               // 0x2020(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_wavesReached;                                          // 0x2024(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T197[0xE8];                                  // 0x2028(0x00E8) MISSED OFFSET (PADDING)

	public:
		void OnUpgradesUpdated();
		void OnUpgradeIconGotLoaded__DelegateSignature();
		void OnRepCurrentHavocState();
		void OnPlayerReadyForNextWaveChanged(TArray<int32_t> readyPlayersForNextWave);
		void OnHavocStateChanged__DelegateSignature();
		void OnEnterWaveStartingState();
		void OnEnterWaveInProgressState();
		void OnEnterWaveCompleteState();
		void OnEnterUpgradeSelectionState();
		void OnEnterGameOverState();
		void OnActiveWaveModiferUpdated(TArray<class FName> activeModifierNames);
		void IncrementWavesReached();
		int32_t GetWaveXP();
		struct FYUIHavocUpgrade GetUpgradeUIData(const class FName& upgradeID);
		int32_t GetTotalXP();
		int32_t GetPlayerWaveXP();
		int32_t GetNumberOfReachedWaves();
		EYHavocState GetCurrentHavocState();
		struct FYUIHavocModifier GetActiveWaveModiferUIData(const class FName& modifierID);
		TArray<struct FYHavocModifiersDataTableRow> GetActiveWaveModifer();
		TArray<struct FYHavocPermanentEnemyModifiersDataTableRow> GetActivePermanentEnemyModifiers();
		void ClientUpdateWaveProgress();
		void ClientUpdateTimeToNextWave(int32_t timeToNextWave);
		void ClientUpdateRewards(TArray<struct FYHavocRewardDataTableRow> rewards);
		void ClientUpdatePlayerReadyForNextWave(TArray<int32_t> readyPlayersForNextWave);
		void ClientUpdateActiveWaveModifier(TArray<class FName> activeModifierNames, TArray<class FName> activePermanentEnemyModifierNames);
		void ClientHavocStateChanged(EYHavocState newHavocState);
		void ClientHavocPlayersChanged(const struct FYHavocHUDTeamInfo& teamsInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_TDM
	 * Size -> 0x0048 (FullSize[0x1E28] - InheritedSize[0x1DE0])
	 */
	class AYGameState_TDM : public AYGameState_MP
	{
	public:
		unsigned char                                              UnknownData_SH6K[0x10];                                  // 0x1DE0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_currentKillsCountT1;                                   // 0x1DF0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_currentKillsCountT2;                                   // 0x1DF4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_killsForWinning;                                       // 0x1DF8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_musicCombatIntesityThreshhold_2;                       // 0x1DFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_musicCombatIntesityThreshhold_3;                       // 0x1E00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G6LT[0x4];                                   // 0x1E04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_musicCombatIntesityEvent_1;                            // 0x1E08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_musicCombatIntesityEvent_2;                            // 0x1E10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_musicCombatIntesityEvent_3;                            // 0x1E18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_77EK[0x8];                                   // 0x1E20(0x0008) Fix size for supers

	public:
		void OnRep_KillsCountChanged();
		void OnRep_IsMatchStarted();
		void OnRep_IsMatchEnded();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_BC
	 * Size -> 0x0008 (FullSize[0x1E30] - InheritedSize[0x1E28])
	 */
	class AYGameState_BC : public AYGameState_TDM
	{
	public:
		unsigned char                                              UnknownData_BBHW[0x8];                                   // 0x1E28(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Benchmark
	 * Size -> 0x0008 (FullSize[0x1E30] - InheritedSize[0x1E28])
	 */
	class AYGameState_Benchmark : public AYGameState_TDM
	{
	public:
		unsigned char                                              UnknownData_ZGEB[0x8];                                   // 0x1E28(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_DemoMode
	 * Size -> 0x0008 (FullSize[0x1E30] - InheritedSize[0x1E28])
	 */
	class AYGameState_DemoMode : public AYGameState_TDM
	{
	public:
		class UTexture2D*                                          m_loadingScreen;                                         // 0x1E28(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void CheckOTSDataAvailability();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Invasion
	 * Size -> 0x0038 (FullSize[0x1E60] - InheritedSize[0x1E28])
	 */
	class AYGameState_Invasion : public AYGameState_TDM
	{
	public:
		unsigned char                                              UnknownData_N3QP[0x4];                                   // 0x1E28(0x0004) Fix Super Size
		int32_t                                                    m_playerkillPoints;                                      // 0x1E2C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_smallCreepkillPoints;                                  // 0x1E30(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_midCreepkillPoints;                                    // 0x1E34(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_bigCreepkillPoints;                                    // 0x1E38(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentKillsCountSmallCreepT1;                         // 0x1E3C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentKillsCountMidCreepT1;                           // 0x1E40(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentKillsCountBigCreepT1;                           // 0x1E44(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentKillsCountSmallCreepT2;                         // 0x1E48(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentKillsCountMidCreepT2;                           // 0x1E4C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentKillsCountBigCreepT2;                           // 0x1E50(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentSpawnCountBigCreepT1;                           // 0x1E54(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentSpawnCountBigCreepT2;                           // 0x1E58(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZVEZ[0x4];                                   // 0x1E5C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_SpawnCommandT2();
		void OnRep_SpawnCommandT1();
		void OnRep_KillCommandT2();
		void OnRep_KillCommandT1();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_PodTDM
	 * Size -> 0x0008 (FullSize[0x1E30] - InheritedSize[0x1E28])
	 */
	class AYGameState_PodTDM : public AYGameState_TDM
	{
	public:
		unsigned char                                              UnknownData_LB87[0x8];                                   // 0x1E28(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_TE
	 * Size -> 0x0088 (FullSize[0x1EB0] - InheritedSize[0x1E28])
	 */
	class AYGameState_TE : public AYGameState_TDM
	{
	public:
		TArray<struct FYRound>                                     m_rounds;                                                // 0x1E28(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic
		struct FYTeamEliminationHUDTeamInfo                        m_teamsHUDInfo;                                          // 0x1E38(0x0058) NativeAccessSpecifierPublic
		bool                                                       m_IsPerformingRoundTransition;                           // 0x1E90(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LHNG[0x7];                                   // 0x1E91(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYLoadoutFilter*                                     m_respawnFighterLoadoutFilter;                           // 0x1E98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M1KA[0x10];                                  // 0x1EA0(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnRep_RoundTransition();
		void OnRep_Round();
		void OnPlayerChangedLoadout(class UYLoadoutManagerComponent* loadoutManager, class UYShipLoadout* shipLoadout, class UYLoadoutFilter* Filter);
		void ClientTeamEliminationPlayersChanged(const struct FYTeamEliminationHUDTeamInfo& teamsInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_TM
	 * Size -> 0x0478 (FullSize[0x22A0] - InheritedSize[0x1E28])
	 */
	class AYGameState_TM : public AYGameState_TDM
	{
	public:
		unsigned char                                              UnknownData_2SWH[0x8];                                   // 0x1E28(0x0008) Fix Super Size
		unsigned char                                              UnknownData_L4I9[0xE0];                                  // 0x1E30(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_skipOrbit;                                             // 0x1F10(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QC9V[0x36F];                                 // 0x1F11(0x036F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_OTSDataAvailableOnLocalServer;                         // 0x2280(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OA00[0x1F];                                  // 0x2281(0x001F) MISSED OFFSET (PADDING)

	public:
		void OnRep_OTSDataReplicatedToLocalServer();
		class FText GetQuestTextList(bool isMainObjective);
		void CheckOTSDataAvailability();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_TurboTDM
	 * Size -> 0x0008 (FullSize[0x1E30] - InheritedSize[0x1E28])
	 */
	class AYGameState_TurboTDM : public AYGameState_TDM
	{
	public:
		unsigned char                                              UnknownData_GYT9[0x8];                                   // 0x1E28(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_VisualAttraction
	 * Size -> 0x0008 (FullSize[0x1E30] - InheritedSize[0x1E28])
	 */
	class AYGameState_VisualAttraction : public AYGameState_TDM
	{
	public:
		unsigned char                                              UnknownData_FVXV[0x8];                                   // 0x1E28(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Tutorial
	 * Size -> 0x0000 (FullSize[0x1B40] - InheritedSize[0x1B40])
	 */
	class AYGameState_Tutorial : public AYGameState_Objective
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameState_Outpost
	 * Size -> 0x0008 (FullSize[0x1A68] - InheritedSize[0x1A60])
	 */
	class AYGameState_Outpost : public AYGameState
	{
	public:
		class UYMPQuestsCollection*                                m_MPQuestsCollection;                                    // 0x1A60(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGameViewportClient
	 * Size -> 0x0040 (FullSize[0x0490] - InheritedSize[0x0450])
	 */
	class UYGameViewportClient : public UGameViewportClient
	{
	public:
		unsigned char                                              UnknownData_GBFG[0x38];                                  // 0x0450(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_displayGameVersionInfo;                                // 0x0488(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8Y0U[0x7];                                   // 0x0489(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnScreenshotProcessed__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVoiceLineEvent
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYVoiceLineEvent : public UObject
	{
	public:
		class FName                                                m_voiceLineEvent;                                        // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYS_VoiceLineContext>                        m_voiceLines;                                            // 0x0030(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGenericCharacterVoiceLines
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYGenericCharacterVoiceLines : public UObject
	{
	public:
		TArray<class UYVoiceLineEvent*>                            m_voiceLineEvents;                                       // 0x0028(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZDVO[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		class UYVoiceLineUnique* GetVoiceLineToPlay(const class FName& EventName, class UYKismetGameplayConditionQueryContext* queryContext);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGenericVoiceLineLoader
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UYGenericVoiceLineLoader : public UDataAsset
	{
	public:
		TArray<struct FYS_GenericVoiceLineInfo>                    m_genericVoiceLinesAssets;                               // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZE1V[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGFxInputCharRestrictions
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYGFxInputCharRestrictions : public UObject
	{
	public:
		TArray<struct FYLocaleInputCharRestrictions>               m_localeInputCharRestrictions;                           // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGFxMoviePlayer
	 * Size -> 0x0120 (FullSize[0x02F0] - InheritedSize[0x01D0])
	 */
	class UYGFxMoviePlayer : public UGFxMoviePlayer
	{
	public:
		class FScriptMulticastDelegate                             OnNotifyUIReadyForInit;                                  // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOverlayMenuButtonPressed;                              // 0x01E0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGFxMoviePlayerInit;                                    // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USwfMovie*                                           m_swfMovie;                                              // 0x0200(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowDeferredStart;                                     // 0x0208(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CGUI[0x7];                                   // 0x0209(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_inputCharRestrictionsClass;                            // 0x0210(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYGFxInputCharRestrictions*                          m_inputCharRestrictions;                                 // 0x0218(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_comWindowTextureName;                                  // 0x0220(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              m_gammaSettingTextureName;                               // 0x0230(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_gammaSettingTextureSize;                               // 0x0240(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UMaterial*                                           m_gammaSettingMaterial;                                  // 0x0248(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TAssetPtr<class UClass>                                    m_genericAudioManagerAssetPtr;                           // 0x0250(0x001C) ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O02E[0x4];                                   // 0x026C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UYUIAudioManager*                                    m_genericAudioManager;                                   // 0x0270(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TAssetPtr<class UClass>                                    m_contextAudioManagerAssetPtr;                           // 0x0278(0x001C) ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2MNN[0x4];                                   // 0x0294(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UYUIAudioManager*                                    m_contextAudioManager;                                   // 0x0298(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYImageLoader*                                       m_imageLoader;                                           // 0x02A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B6VK[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_owningPawn;                                            // 0x02B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4EEF[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              m_gammaSettingRT;                                        // 0x02C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic*                            m_gammaSettingMat;                                       // 0x02C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W2BX[0x20];                                  // 0x02D0(0x0020) MISSED OFFSET (PADDING)

	public:
		void SendBIEvent(const class FString& Type, int32_t ID, const class FString& Name, const class FString& parentName);
		void RequestBugReporterIssueTypes();
		void RemoveLocalUserSettings();
		void OpenWebpage(const class FString& URL);
		void OnUpdateKeyboardSettingsData();
		void OnUpdateGammaPicture(float Value);
		void OnUIReadyForInit__DelegateSignature();
		void OnUIReadyForInit();
		void OnSubmitBugReport(TArray<class FString> param0, TArray<class FString> param1, TArray<class FString> param2);
		void OnSaveHotkeys();
		void OnResetHotkeys();
		void OnRequestToolTipDataSecondaryLoadout(int32_t itemID, int32_t tooltipForcedType, int32_t variationIndex);
		void OnRequestToolTipDataItemId(int32_t itemID, int32_t tooltipForcedType);
		void OnRequestSettingsData();
		void OnRequestScoreboardData();
		void OnRequestMouseEventChange(const class FString& ActionName, int32_t mouseConstantId, bool shiftDown, bool altDown, bool ctrlDown);
		void OnRequestKeybindChange(const class FString& ActionName, int32_t keyCode, bool shiftDown, bool altDown, bool ctrlDown);
		void OnRequestAVSMAvailability();
		void OnOverlayMenuButtonClicked(int32_t buttonID);
		void OnOpenCustomerSupport();
		void OnGFxMovieInitialized();
		void OnCustomerSupportMouseWheelEvent(int32_t X, int32_t Y, int32_t DeltaX, int32_t DeltaY);
		void OnCustomerSupportMouseMoveEvent(int32_t X, int32_t Y, bool bMouseOut);
		void OnCustomerSupportMouseClickEvent(int32_t X, int32_t Y, bool bButtonDown);
		void OnCloseCustomerSupport();
		void OnAcknowledgePawnPossesion();
		void CloseUserActionDialog();
		void CheckSettingDependency(const class FString& Category, float Value);
		void ASPlayAudioEvent(int32_t index);
		void ApplyUserSettings(TArray<float>* settingsAudio, TArray<float>* settingsChat, TArray<float>* settingsControls, TArray<float>* settingsGame, TArray<float>* settingsGraphics, TArray<float>* settingsAdvancedGraphics);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGFxMoviePlayer_YEndOfMatch
	 * Size -> 0x0018 (FullSize[0x0308] - InheritedSize[0x02F0])
	 */
	class UYGFxMoviePlayer_YEndOfMatch : public UYGFxMoviePlayer
	{
	public:
		unsigned char                                              UnknownData_ROBB[0x18];                                  // 0x02F0(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetScoreboardVisibility(bool IsVisible);
		void SetScoreboardFadeInTime(float fadeInTime);
		void OnUserTypedMessage(const class FString& author, const class FString& message, int32_t filterId, const class FString& recipient);
		void OnRequestScoreboardData();
		void OnRequestResultData();
		void OnMovieLoaded();
		void OnFriendlistItem(int32_t Action, const class FString& friendId);
		void OnEomChatTextFieldClicked(int32_t chatMode);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGFxMoviePlayer_YHud
	 * Size -> 0x0118 (FullSize[0x0408] - InheritedSize[0x02F0])
	 */
	class UYGFxMoviePlayer_YHud : public UYGFxMoviePlayer
	{
	public:
		unsigned char                                              UnknownData_KJGR[0x10];                                  // 0x02F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChatOpen;                                              // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChatClose;                                             // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnForceRespawnCountDown;                                 // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerCardSelected;                                    // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartEndOfMatchTransition;                             // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectedLoadout;                                       // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClickedLoadout;                                        // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOpenCustomizationMenu;                                 // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectedSpawnNode;                                     // 0x0380(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChatMessageSent;                                       // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUserEscapedChat;                                       // 0x03A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRecipentNameEntered;                                   // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlockChat;                                             // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFetchAbilityData;                                      // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFetchCustomLoadouts;                                   // 0x03E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkipVideoTriggered;                                    // 0x03F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NVOA[0x8];                                   // 0x0400(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowQuestUpdate(int32_t Type, const class FString& questTitle, int32_t pastValue, int32_t currentValue, int32_t MaxValue);
		void SetTargetMarkerSphericalPositionSettings(bool IsEnabled, float xScaleValue, float yScaleValue);
		void SetGameModeName(const class FString& gameModeName);
		void SetGameMode(EYGameModeType gameModeHUDType);
		void OnUserTypedMessageBroadcast(const class FString& author, const class FString& message, int32_t filterId, const class FString& recipient, bool broadcastToPlayers);
		void OnUserTypedMessage(const class FString& author, const class FString& message, int32_t filterId, const class FString& recipient);
		void OnUserEscapesChat();
		void OnToggleReadyUpRequest();
		void OnSubmitDialogResult(int32_t Type, int32_t itemID, int32_t responseCode);
		void OnStartEoM();
		void OnSkipVideoButtonPressed();
		void OnSelectSpawnNode(const class FString& selectedNode);
		void OnSelectLoadout(const class FString& selectedLoadoutID, const class FString& spawnNode);
		void OnScaleformCaptureMouseInput(bool capture);
		void OnRequestNewLoadout(const class FString& classId);
		void OnOpenCustomization(int32_t selectedClass);
		void OnMenuOptionsToggle(bool option);
		void OnHandleRespawnInteraction();
		void OnGetCustomLoadouts();
		void OnGetAbilityData();
		void OnClickPlayerCard(int32_t index);
		void OnClickLoadout(const class FString& selectedLoadout);
		void OnCheckUserName(const class FString& recipient);
		void CloseUserActionDialog();
		void BlockChat(bool block);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YUINavigationElement
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UYUINavigationElement : public UDataAsset
	{
	public:
		EYMenuState                                                m_state;                                                 // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYMenuSubState                                             m_subState;                                              // 0x0029(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYMenuMetaState                                            m_metaState;                                             // 0x002A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_isActive;                                              // 0x002B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_isVisible;                                             // 0x002C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GG38[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_buttonID;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_canBeDisabled;                                         // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EYUIComponentType                                          m_componentType;                                         // 0x0039(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UVBO[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                m_label;                                                 // 0x0040(0x0018) Edit, NativeAccessSpecifierPublic
		TArray<class FText>                                        m_alternativeLabels;                                     // 0x0058(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		EYUIPositioningEnum                                        m_anchor;                                                // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZXNK[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_width;                                                 // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_height;                                                // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_posX;                                                  // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_posY;                                                  // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EO2D[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UTexture2D>                                m_icon;                                                  // 0x0080(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C0VD[0x4];                                   // 0x009C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProgressionManagerBase
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UYProgressionManagerBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_MB7X[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            m_rankUpReputationThresholds;                            // 0x0048(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GZQ2[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnInitialization__DelegateSignature();
		void InitializeFromPlayerData();
		void CheckForPlayerRankUp(class AYPlayerReplicationInfo* pri, int32_t newReputation);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YItemIDList
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class UYItemIDList : public UObject
	{
	public:
		TArray<struct FYItemEntry>                                 m_progressionAssets;                                     // 0x0028(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DHI6[0x50];                                  // 0x0038(0x0050) MISSED OFFSET (PADDING)

	public:
		int32_t STATIC_GetBaseItemID(int32_t inflatedItemID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProgressionManagerClient
	 * Size -> 0x0248 (FullSize[0x02A8] - InheritedSize[0x0060])
	 */
	class UYProgressionManagerClient : public UYProgressionManagerBase
	{
	public:
		struct FStringAssetReference                               m_progressionManagerClientStringAssetReference;          // 0x0060(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1D62[0x20];                                  // 0x0070(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerRankUp;                                          // 0x0090(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                m_VOPlayerRankUp;                                        // 0x00A0(0x0008) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FText>                                        m_unlockInformationText;                                 // 0x00A8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		TArray<struct FUnlockInformationWrapper>                   m_unlockInfoPanelInformation;                            // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PQ7B[0x1A0];                                 // 0x00C8(0x01A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPlayerProgressInfo                                 m_playerProgressionInfo;                                 // 0x0268(0x0038) NativeAccessSpecifierPrivate
		TWeakObjectPtr<class UDataTable>                           m_playerRankTable;                                       // 0x02A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		void OnPlayerRankUp__DelegateSignature(int32_t newRank);
		void InitializeShopItems();
		void InitializeProgressionUnlocks();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGFxMoviePlayer_YMenu
	 * Size -> 0x0048 (FullSize[0x0338] - InheritedSize[0x02F0])
	 */
	class UYGFxMoviePlayer_YMenu : public UYGFxMoviePlayer
	{
	public:
		class FScriptMulticastDelegate                             OnMenuLoaded;                                            // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPurchaseDataDisplay;                                   // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnManufacturerSelected;                                  // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WXX7[0x18];                                  // 0x0320(0x0018) MISSED OFFSET (PADDING)

	public:
		void RequestVanityPurchaseData(int32_t itemID, bool hasPriceChanged);
		void RequestTechTreePurchaseData(int32_t itemID, bool caatalogIsReloaded);
		void RequestBundlePurchaseData(int32_t itemID, bool checkGroupItems, bool hasPriceChanged);
		void PurchaseItem(int32_t itemID);
		void OnUserTypedMessage(const class FString& author, const class FString& message, int32_t filterId, const class FString& recipient);
		void OnShowNextPromotionPopup();
		void OnRequestNewMenuMetaState(int32_t selectedMetaState);
		void OnRequestInformationPanelRibbonId(int32_t itemID);
		void OnRequestCloseTransmission();
		void OnRequestCharacterPreview(int32_t itemID);
		void OnMenuSelection(int32_t selectedSate, int32_t Category);
		void OnMenuOptionsToggle(bool option);
		void CalloutButtonDisableByName(const class FString& Name);
		void CalloutButtonDisableByID(int32_t ID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGFxMoviePlayer_YMenu_PS4
	 * Size -> 0x0000 (FullSize[0x0338] - InheritedSize[0x0338])
	 */
	class UYGFxMoviePlayer_YMenu_PS4 : public UYGFxMoviePlayer_YMenu
	{
	public:
		bool STATIC_IsOnConsole();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHangarStateManager
	 * Size -> 0x0000 (FullSize[0x03C0] - InheritedSize[0x03C0])
	 */
	class AYHangarStateManager : public AActor
	{
	public:
		void OnPropertiesChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHavocProgressionComponent
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UYHavocProgressionComponent : public UObject
	{
	public:
		class AYPlayerController*                                  m_owner;                                                 // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        m_selectableUpgrade;                                     // 0x0030(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FName>                                        m_appliedBoosts;                                         // 0x0040(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A4EL[0x30];                                  // 0x0050(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnLoadoutAsyncLoaded(int32_t itemID);
		void OnApplyBoostAndModifiersData();
		void Initialize();
		TArray<class FName> GetSelectedUpgrades();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHavocRewardsComponent
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYHavocRewardsComponent : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHavocWaveModifierComponent
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class UYHavocWaveModifierComponent : public UObject
	{
	public:
		int32_t                                                    m_desiredModifierSlotsNum;                               // 0x0028(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4HIE[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_noneModifierName;                                      // 0x0030(0x0008) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R0OB[0x40];                                  // 0x0038(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYHavocModifierSet>                          m_modifierList;                                          // 0x0078(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FYHavocPermanentEnemyModifierSet>            m_permanentEnemyModifiersList;                           // 0x0088(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FString>                                      m_activePlayerModifierFeats;                             // 0x0098(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FString>                                      m_activeNPCModifierFeats;                                // 0x00A8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RH2R[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnEnteredWaveStartingState();
		void OnEnteredUpgradeSelection();
		TArray<class FName> GetActivePermanentEnemyModifierNames();
		TArray<class FName> GetActiveModifierNames();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHealthComponent
	 * Size -> 0x0138 (FullSize[0x0230] - InheritedSize[0x00F8])
	 */
	class UYHealthComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JWTE[0x8];                                   // 0x00F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHealthModified;                                        // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthModifiedPercent;                                 // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTakeDamage;                                            // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTakeHealth;                                            // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthDecreased;                                       // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthIncreased;                                       // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthRegenStart;                                      // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealthRegenEnd;                                        // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      m_audioEventHealthThreshold;                             // 0x0180(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_audioEventHealthThresholdCooldown;                     // 0x0184(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L9E9[0x20];                                  // 0x0188(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_IsInvincible;                                          // 0x01A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_IsForceStayAlive;                                      // 0x01A9(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_IsCurrentHealthLocked;                                 // 0x01AA(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RF5L[0x2D];                                  // 0x01AB(0x002D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_health;                                                // 0x01D8(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J57V[0x4];                                   // 0x01DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxHealth;                                             // 0x01E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_unmodifiedMaxHealth;                                   // 0x01E4(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F3AZ[0xC];                                   // 0x01E8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_regenerationInterval;                                  // 0x01F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_passiveRegenAmount;                                    // 0x01F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_passiveRegenerationDelay;                              // 0x01FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TG2P[0x20];                                  // 0x0200(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYHealthFeedbackInfo>                        m_healthFeedbackStates;                                  // 0x0220(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		float TakeHealth(float healingAmount, class AController* healingInstigator);
		float TakeDamage(float Damage, class AController* dctr);
		void OnRep_Health();
		void OnOwningPawnDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const class FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
		float ModifyRegeneration(float amount);
		bool IsFull();
		bool IsDead();
		float GetRecentDamage(float Time);
		float GetModifiedMaxHealth();
		float GetModifiedHealthRegeneration();
		float GetMaxHealth();
		float GetCurrentHealthPercentage();
		float GetCurrentHealth();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHitzoneEditorComponent
	 * Size -> 0x0014 (FullSize[0x06A0] - InheritedSize[0x068C])
	 */
	class UYHitzoneEditorComponent : public UBoxComponent
	{
	public:
		float                                                      m_health;                                                // 0x068C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_fxGroupAssociation;                                    // 0x0690(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IQRA[0xC];                                   // 0x0694(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHitzoneRuntimeComponent
	 * Size -> 0x0030 (FullSize[0x0128] - InheritedSize[0x00F8])
	 */
	class UYHitzoneRuntimeComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_1XTL[0x10];                                  // 0x00F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYHitzoneReplicatedBoxDebugData>             m_replicatedHitzoneBoxDebugData;                         // 0x0108(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FYHitzoneReplicatedProjectilePenetrationData> m_replicatedHitzoneProjectilePenetrationDebugData;       // 0x0118(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHoveringFXSetup
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYHoveringFXSetup : public UDataAsset
	{
	public:
		TArray<struct FYHoveringFXPhysMaterialSetup>               m_physMaterialList;                                      // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHoveringFX
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UYHoveringFX : public UObject
	{
	public:
		class UYHoveringFXSetup*                                   m_physMaterialSetup;                                     // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_lineTraceInterval;                                     // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxLineTraceDistance;                                  // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_showDebug;                                             // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_active;                                                // 0x0039(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TQSC[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_owner;                                                 // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     m_currentPS;                                             // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              m_currentPhysMat;                                        // 0x0050(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_currentLineTraceTime;                                  // 0x0060(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NUM8[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		void Tick(float DeltaTime);
		void SetOwnerPawn(class AYPawn* Owner);
		void SetActive(bool Value);
		void OnInit();
		void Hit(const struct FHitResult& Result);
		class AYPawn* GetOwnerPawn();
		class UParticleSystem* GetCurrentPSTemplate();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHoveringFXComponent
	 * Size -> 0x0018 (FullSize[0x0110] - InheritedSize[0x00F8])
	 */
	class UYHoveringFXComponent : public UActorComponent
	{
	public:
		class UClass*                                              m_hoveringFXClass;                                       // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AYPawn*                                              m_owner;                                                 // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYHoveringFX*                                        m_hoveringFXObject;                                      // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PromptManager
	 * Size -> 0x0058 (FullSize[0x02E8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PromptManager : public UYHUDWidget
	{
	public:
		class UCanvasPanel*                                        m_viewportCanvas;                                        // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_PromptLocalizationData;                                // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYPlatformPrompt>                            m_platformSpecificPrompts;                               // 0x02A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_defaultInformationPromptPosition;                      // 0x02B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8UEQ[0x30];                                  // 0x02B8(0x0030) MISSED OFFSET (PADDING)

	public:
		void ShowOverlayPrompt(EYPromptType promptType);
		void ShowOpenEnergyWheelPrompt(const class FName& descriptionIdentifier, const struct FVector2D& customPosition);
		void ShowInformationPrompt(const class FName& descriptionIdentifier, TArray<EYPlayerActionName> actionNamesToDismiss, const class FName& delegateName, bool useCustomPosition, float customPositionX, float customPositionY, bool pauseGame, float displayTime, bool consumeInput);
		TArray<class FText> PromptActionNameDisplayStringsRequested(const class FString& ActionName);
		void OverlayInteractiveCloseTriggered();
		void OnPromptDismissed__DelegateSignature();
		void DismissAllPrompts();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUD
	 * Size -> 0x04F8 (FullSize[0x0A20] - InheritedSize[0x0528])
	 */
	class AYHUD : public AYHUDBase
	{
	public:
		unsigned char                                              UnknownData_3TBD[0xD0];                                  // 0x0528(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     m_slateTragetMarkers;                                    // 0x05F8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class AYPawn*>                                      m_slateTragetMarkersPawn;                                // 0x0608(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     m_slateTragetMarkersAlly;                                // 0x0618(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class AYPawn*>                                      m_slateTragetMarkersAllyPawn;                            // 0x0628(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     m_slateMissileTragetMarkers;                             // 0x0638(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FString>                                      m_slateMissileTragetMarkersStr;                          // 0x0648(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    m_bSlateMissileTargetMarkers;                            // 0x0658(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SNX8[0x64];                                  // 0x065C(0x0064) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FColor>                                      m_teamColor;                                             // 0x06C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZD05[0x4];                                   // 0x06D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_shortCommandDisplayTime;                               // 0x06D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_buffFeedbackAnimationDisplayTime;                      // 0x06D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I51D[0x4];                                   // 0x06DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_lowHealthPercentThreshold;                             // 0x06E0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9C5A[0x4];                                   // 0x06E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxDistanceProximityWarning;                           // 0x06E8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_abilityAudioEventDelay;                                // 0x06EC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_largeDamageAudioTrigger;                               // 0x06F0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_mediumDamageAudioTrigger;                              // 0x06F4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_minorDamageAudioTrigger;                               // 0x06F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_97GP[0x4];                                   // 0x06FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYUINavigationElement*>                       m_QuestionDialog;                                        // 0x0700(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TWeakObjectPtr<class AInfo>                                m_markedMarkerInfo;                                      // 0x0710(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic
		int32_t                                                    m_markedMarkerColor;                                     // 0x0718(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ER2D[0x4];                                   // 0x071C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnScaleformMovieHUDInitialized;                          // 0x0720(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemySpotted;                                          // 0x0730(0x0010) Edit, ZeroConstructor, EditConst, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5K5T[0x10];                                  // 0x0740(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYUINavigationElement*                               m_addFriendButtonData;                                   // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_minimapZoom;                                           // 0x0758(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SYED[0x4];                                   // 0x075C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_dmgFeedbackManagerClass;                               // 0x0760(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_DamageFeedbackManager*                   m_dmgFeedbackManager;                                    // 0x0768(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         m_mediaWidget;                                           // 0x0770(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_PromptManager*                           m_promptManager;                                         // 0x0778(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget*                                         m_hudHelpOverlay;                                        // 0x0780(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYPawn*                                              m_myPawn;                                                // 0x0788(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYPlayerController*                                  m_myPlayerController;                                    // 0x0790(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_scaleformMovieClass_HUD;                               // 0x0798(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_scaleformMovieClass_EndOfMatch;                        // 0x07A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R2V5[0x10];                                  // 0x07A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_VOChatMessageReceived;                                 // 0x07B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_dummyAudioEvent;                                       // 0x07C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_hudWidgetManagerBlueprint;                             // 0x07C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_endOfMatchManagerBlueprint;                            // 0x07D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_useNewHudInEditor;                                     // 0x07D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_useOldHudInEditor;                                     // 0x07D9(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1ICC[0x6];                                   // 0x07DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_promptManagerWidgetBlueprint;                          // 0x07E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_promptManagerWidgetBlueprintPS4;                       // 0x07E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_hudHelpOverlayBlueprint;                               // 0x07F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_hudHelpOverlayBlueprintPS4;                            // 0x07F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_hudHelpInputComponent;                                 // 0x0800(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5B01[0x4];                                   // 0x0808(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_sphericalTargetMarkerX;                                // 0x080C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_sphericalTargetMarkerY;                                // 0x0810(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_enabledSphericalTargetMarkers;                         // 0x0814(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8HCQ[0x4B];                                  // 0x0815(0x004B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYMinimapVolume*                                     m_minimapVolume;                                         // 0x0860(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYGFxMoviePlayer_YHud*                               m_scaleformMovie_HUD;                                    // 0x0868(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYHUDWidgetManager*                                  m_hudWidgetManager;                                      // 0x0870(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYEndOfMatchManager*                                 m_endOfMatchManager;                                     // 0x0878(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QSE0[0xCC];                                  // 0x0880(0x00CC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_cursorIntepSpeed;                                      // 0x094C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3XUV[0x10];                                  // 0x0950(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYGFxMoviePlayer_YEndOfMatch*                        m_scaleformMovie_EndOfMatch;                             // 0x0960(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AYPawn*>                                      m_teamOneSorted;                                         // 0x0968(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class AYPawn*>                                      m_teamTwoSorted;                                         // 0x0978(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4Q22[0x5C];                                  // 0x0988(0x005C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_progressUpdateNotificationThreshold;                   // 0x09E4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OE2W[0x28];                                  // 0x09E8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_secondsTargetMarkerTest;                               // 0x0A10(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_secondsMissileMarkerTest;                              // 0x0A14(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_secondsMinimapMarkerTest;                              // 0x0A18(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_enableUMGDamageFeedbackOnEnemy;                        // 0x0A1C(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z4Y0[0x3];                                   // 0x0A1D(0x0003) MISSED OFFSET (PADDING)

	public:
		void WeaponFired(class AYPawn* firingPawn);
		void UpdateHavocUpgradePanel();
		void ToggleTargetMarkers(bool bToggleOn);
		void ToggleProjectileMarkers(bool bToggleOn);
		void ToggleMinimap(bool bToggleOn);
		void ToggleLoadoutSelection(bool IsActive);
		void ToggleComponentGroupLock(EYTutorialComponentLock lockGroup, bool lockState);
		void ToggleAllComponentGroupLocks(bool lockState);
		void StopAndCloseMovie();
		void StartEndOfMatchFlow();
		void ShowUMGHUD();
		void ShowQuestUpdate(const class FString& questTitle, int32_t Type, int32_t pastValue, int32_t currentValue, int32_t MaxValue);
		void ShowPS4UMGEndOfMatch();
		void ShowHUD();
		void ShowGFxHUD();
		bool shouldUseUMGhud();
		bool ShouldUsePS4Managers();
		void SetYPawn(class AYPawn* Pawn);
		void SetState(EYHudState hudState);
		void SetRespawnNextWaveTimer(float nextWaveTime, bool respawnPossible);
		void SetHideHUD(bool hudIsHidden);
		void SetGameModeMatchOver(int32_t matchEndState);
		void SetForcedRespawnNextWaveState(bool forced);
		void ScaleformPostMatchAnimationCompleted();
		void RefreshLoadouts();
		void ReceiveStartEndOfMatchTransition();
		void ReceiveShieldDamaged();
		void PlayMovieCutscene(class UMediaPlayer* MediaPlayer, class UClass* widgetType);
		void PlayerOverlapsVisibilityVolumeStart(class AYPawn* overlappingPawn);
		void PlayerOverlapsVisibilityVolumeEnd(class AYPawn* overlappingPawn);
		void OwningPawnDied();
		void OpenChatWhisperWindow();
		void OpenChatTeamWindow();
		void OpenChatSquadWindow();
		void OpenChatAllWindow();
		void OnUserEscapedChat();
		void OnUpdateReplicationInfo(class AYPawn* Pawn);
		void OnUIReadyForInit();
		void OnSkipVideoTriggeredBP();
		void OnSkipVideoTriggered();
		void OnScore(int32_t Points, const class FString& Text);
		void OnScheduledScoreboardUpdateTriggered();
		void OnScaleformMovieHUDInitialized__DelegateSignature();
		void OnRecipentNameEntered(const class FString& recipient);
		void OnQuestProgression(const class FText& questName, int32_t previousProgress, int32_t currentProgress, int32_t valueForCompleting);
		void OnQuestCompletion(const class FText& questName, int32_t previousProgress, int32_t valueForCompleting);
		void OnPlayerStartHomeBaseSpawned(class AYPlayerStartHomeBase* base);
		void OnPlayerStartHomeBaseEndPlay(class AYPlayerStartHomeBase* base);
		void OnPlayerReputationChanged(class AYPlayerReplicationInfo* owningPRI, int32_t newReputation);
		void OnPlayerRepScoringEvent(class AYPlayerReplicationInfo* pri, const struct FYPositiveReinforcement& posReinf);
		void OnPlayerRepDataChanged(class AYPlayerReplicationInfo* pri);
		void OnPlayerLeftKillzone();
		void OnPlayerInsideKillzone(float countdown);
		void OnPlaybackFinished();
		void OnPerkProgression(int32_t perkID, const class FText& description, int32_t previousProgress, int32_t currentProgress, int32_t valueForCompleting);
		void OnOverlayMenuButtonPressed(int32_t buttonID);
		void OnNPCRepDataChanged(class AYNPCReplicationInfo* npcri);
		void OnMinimapVolumeSpawned(class AYMinimapVolume* minimapVol);
		void OnLoadoutSelected(const class FName& loadoutId, const class FString& spawnNode);
		void OnLoadoutClicked(const class FName& loadoutId);
		void OnLeaveWarpJumpVolume();
		void OnHealthBelowThresholdStop();
		void OnHealthBelowThresholdStart();
		void OnGFxMoviePlayerInit();
		void OnFetchCustomLoadouts();
		void OnFetchAbilityData();
		void OnEnterWarpJumpVolume();
		void OnEnemySpotted__DelegateSignature(class AYPawn* Pawn);
		void OnEndOfMatch();
		void OnChatMessageSent(const class FString& author, const class FString& message, int32_t filterId, const class FString& recipient, bool broadcastToPlayers);
		void OnBlockChat(bool block);
		void MessageOnObjectiveCompleted(EYTeam objectiveTeam, const class FString& message);
		void LoadAndPlayMovie(const class FString& movieName, int32_t ResX, int32_t ResY, float duration);
		bool IsPlayingVideo();
		bool IsHudReadyForInit();
		void InitHUDWeapon();
		void InitHUDGameState();
		void InitGameMode();
		void HideGFxHUD();
		void HideClassSelection();
		class UYHUDWidget_StyleContainer* GetUMGStyleContainer();
		class UYHUDWidget_StyleContainer* GetStyleContainer();
		EYHudState GetState();
		TArray<class AYPawn*> GetSortedPlayerArray(int32_t teamID);
		class FString GetShipClassName(class AYPawn* currentPawn);
		class UYHUDWidget_PromptManager* GetPromptManager();
		class UYGFxMoviePlayer* GetMoviePlayer();
		class UYHUDWidgetManager* GetHUDWidgetManager();
		class AYPawn* GetCurrentTargetedPawn();
		struct FVector2D GetCanvasSize();
		void EnergyStateChanged(EYEnergySystemState energyState);
		void EnergyDepleted();
		TArray<class FText> DetermineActionNameDisplayTexts(const class FString& ActionName, bool useFormatString);
		void DebugShowTeammateVoiceChat(const class FName& teammateName);
		void CloseEnergyWheel();
		TArray<struct FYActionMappingText> BuildSeparatedActionTextsFromLocalizedString(const class FText& textToDisplay);
		TArray<struct FKey> BuildActionKeyArray(TArray<EYPlayerActionName> actionNamesToDismiss);
		void AbilityActivated(class AYPawn* firingPawn, class UYAbility* ability);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerCameraManager
	 * Size -> 0x0038 (FullSize[0x1520] - InheritedSize[0x14E8])
	 */
	class AYPlayerCameraManager : public APlayerCameraManager
	{
	public:
		unsigned char                                              UnknownData_39YJ[0x10];                                  // 0x14E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYCameraPostProcessDefinition                       m_fadePostProcessFX;                                     // 0x14F8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BC91[0x10];                                  // 0x1510(0x0010) MISSED OFFSET (PADDING)

	public:
		void ActivatePostProcessEffect(const class FName& effectName, class UMaterialInstance* postprocessMI, const class FName& scalarParameterName, class UCurveFloat* animationCurve, float duration);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidgetBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYWidgetBlueprintLibrary : public UWidgetBlueprintLibrary
	{
	public:
		void STATIC_PlayAnimationToFinalState(class UUserWidget* targetWidget, class UWidgetAnimation* Animation);
		void STATIC_DrawSpline(struct FPaintContext* context, const struct FVector2D& InStart, const struct FVector2D& InStartDir, const struct FVector2D& InEnd, const struct FVector2D& InEndDir, float InThickness, const struct FLinearColor& Tint);
		void STATIC_DrawCircle(struct FPaintContext* context, const struct FVector2D& InCenterOffset, float InRadius, float InThickness, const struct FLinearColor& Tint, bool bUseDrawSpaceCoords);
		struct FVector2D STATIC_ConvertWorldToMinimapPos(const struct FVector& inWorldPos, const struct FVector& inWorldExtent, const struct FVector& inWorldOrigin, const struct FYUIMinimapCanvas& mapCanvas);
		class FString STATIC_ConvertUUToMetric(float distanceInUU);
		struct FVector2D STATIC_ConvertRelativeToScreenSpace(float inRelX, float inRelY, const struct FYUIMinimapCanvas& mapCanvas);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_MinimapShipMarker
	 * Size -> 0x0050 (FullSize[0x0288] - InheritedSize[0x0238])
	 */
	class UYHUDWidget_MinimapShipMarker : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_549A[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            m_shipClassMID;                                          // 0x0240(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          m_shipClassIconTex;                                      // 0x0248(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AYPawn>                               m_assignedPawn;                                          // 0x0250(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class FName                                                m_assignedPawnName;                                      // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_shipWidget;                                            // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_viewCone;                                              // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_team;                                                  // 0x0270(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_bIsPlayerShip;                                         // 0x0274(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WXA9[0x13];                                  // 0x0275(0x0013) MISSED OFFSET (PADDING)

	public:
		void BP_OnTeamColorChanged(const struct FColor& Color);
		void BP_OnShipIconChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ScrollBox_PC
	 * Size -> 0x0048 (FullSize[0x0910] - InheritedSize[0x08C8])
	 */
	class UYHUDWidget_ScrollBox_PC : public UScrollBox
	{
	public:
		unsigned char                                              UnknownData_HDXE[0x48];                                  // 0x08C8(0x0048) MISSED OFFSET (PADDING)

	public:
		void SetToStartPosition();
		void HandleOnUserScrolled(float InScrollOffsetFraction);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_Territory
	 * Size -> 0x0270 (FullSize[0x04A8] - InheritedSize[0x0238])
	 */
	class UYHUDWidget_Territory : public UUserWidget
	{
	public:
		float                                                      m_commandMapScale;                                       // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_minimapOffset;                                         // 0x023C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_teamBarOffsetFromMinimap;                              // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_scoreBoxOffsetFromTeamBar;                             // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_sectorGridLetterOffsetFromMinimap;                     // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_minimapOpacity;                                        // 0x024C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_minimapCanvasWidth;                                    // 0x0250(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_commandMapCanvasWidth;                                 // 0x0254(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_displayTeamPctThreshold;                               // 0x0258(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_viewportCPMarkerScale;                                 // 0x025C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_viewportBubbleMarkerScale;                             // 0x0264(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_minimapBubbleMarkerScale;                              // 0x026C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_hoverStateTriggerRange;                                // 0x0274(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FColor                                              m_team1Color;                                            // 0x027C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FColor                                              m_team2Color;                                            // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FColor                                              m_neutralColor;                                          // 0x0284(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FColor                                              m_squadColor;                                            // 0x0288(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4Z4U[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  m_UIMaterialRef;                                         // 0x0290(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  m_teamBarMaterialRef;                                    // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYUISlotLayoutData                                  m_CPMarkerInfo;                                          // 0x02A0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYUISlotLayoutData                                  m_shipMarkerInfo;                                        // 0x02B8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYUISlotLayoutData                                  m_linkMarkerInfo;                                        // 0x02D0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIShipClassIcon>                           m_shipClassIcons;                                        // 0x02E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      m_neutralIndicatorVisibilityPct;                         // 0x02F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FRP6[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel*                                        m_rootCanvasWidget;                                      // 0x0300(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_minimapCanvasWidget;                                   // 0x0308(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_viewportCanvasWidget;                                  // 0x0310(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_scoreBoxCanvasWidget;                                  // 0x0318(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_teamBarCanvasWidget;                                   // 0x0320(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_minimapWidget;                                         // 0x0328(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_commandMapWidget;                                      // 0x0330(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_teamBarImageWidget;                                    // 0x0338(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_neutralAreaScoreBarWidget;                             // 0x0340(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_teamBarPctEmptyTextWidget;                             // 0x0348(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_teamBarPctT1Widget;                                    // 0x0350(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_teamBarPctT2Widget;                                    // 0x0358(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_sectorGridDraftWidget;                                 // 0x0360(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_timerWidget;                                           // 0x0368(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_maxScoreWidget;                                        // 0x0370(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYPlayerController_TER*                              m_PCOwner;                                               // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AYPawn>                               m_pawnOwner;                                             // 0x0380(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class AYGameState_TER*                                     m_gameState;                                             // 0x0388(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYTeam                                                     m_ownerTeam;                                             // 0x0390(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JESF[0x7];                                   // 0x0391(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            m_territoryMID;                                          // 0x0398(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            m_teamBarMID;                                            // 0x03A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AYCapturePoint_TER*>                          m_capturePoints;                                         // 0x03A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UTextBlock*>                                  m_sectorGridLetters;                                     // 0x03B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UTextBlock*>                                  m_sectorGridNumbers;                                     // 0x03C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UUserWidget*>                                 m_minimapCPMarkers;                                      // 0x03D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FYUIViewportHoverWidget>                     m_viewportCPMarkers;                                     // 0x03E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_MinimapShipMarker*>               m_shipMarkers;                                           // 0x03F8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_gameVolumeOrigin;                                      // 0x0408(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_gameVolumeExtent;                                      // 0x0414(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_minimapSectors;                                        // 0x0420(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_gridSize;                                              // 0x0428(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FYUIMinimapCanvas                                   m_minimapCanvas;                                         // 0x0430(0x000C) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_UITexWidth;                                            // 0x043C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_owningTeamTerritory;                                   // 0x0440(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_enemyTeamTerritory;                                    // 0x0444(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_totalEmptyTerritory;                                   // 0x0448(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_owningTeamScore;                                       // 0x044C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_enemyTeamScore;                                        // 0x0450(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_bCommandMapActive;                                     // 0x0454(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_65K1[0x53];                                  // 0x0455(0x0053) MISSED OFFSET (PADDING)

	public:
		void OnMatchStarted();
		void OnMatchEnded();
		void BP_OnUpdateScore();
		void BP_OnLinkWidgetStateChanged(const struct FYPooledLinkWidget& linkWidget);
		void BP_OnLinkWidgetPosUpdated(class UUserWidget* linkWidget, const struct FVector2D& p1Loc, const struct FVector2D& p2Loc);
		void BP_OnLinkWidgetCreated(const struct FYPooledLinkWidget& linkWidget);
		void BP_OnInitialize();
		void BP_OnCPWidgetUpdated(class UUserWidget* newCPWidget, bool bHighlighted, float Distance);
		void BP_OnCPWidgetCreated(class UUserWidget* newCPWidget, class AYCapturePoint* CPActor, const struct FColor& t1Color, const struct FColor& t2Color, bool bIsOnMinimap);
		void BP_OnBubbleWidgetUpdated(class UUserWidget* bubbleWidget, int32_t percentage, bool bHighlighted, float Distance);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidgetManager
	 * Size -> 0x0188 (FullSize[0x03C0] - InheritedSize[0x0238])
	 */
	class UYHUDWidgetManager : public UUserWidget
	{
	public:
		TArray<class UUserWidget*>                                 m_allWidgets;                                            // 0x0238(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UUserWidget*>                                 m_activeWidgets;                                         // 0x0248(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UYHUDWidget_StyleContainer*                          m_styleContainer;                                        // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_StyleContainer*                          m_styleContainer_PS4;                                    // 0x0260(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget*                                         m_abilitySlotContainerWidget;                            // 0x0268(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_AbilitySlot*>                     m_abilitySlotWidgets;                                    // 0x0270(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UYHUDWidget_Crosshair*                               m_crosshairWidget;                                       // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ScoringEvents*                           m_scoringEventsWidget;                                   // 0x0288(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_BuffManager*                             m_buffManagerWidget;                                     // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_DamageIndicators*                        m_damageIndicatorsWidget;                                // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_TargetManager*                           m_targetManagerWidget;                                   // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_MissileWarnings*                         m_missileWarningsWidget;                                 // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_KillTicker*                              m_killTickerWidget;                                      // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ComWindow*                               m_ComWindowWidget;                                       // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_HealthEnergyAmmoBars*                    m_healthEnergyAmmoBarsWidget;                            // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_MiniMap*                                 m_minimapWidget;                                         // 0x02C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_EnergyWheelSelector*                     m_energyWheelSelector;                                   // 0x02D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ShortCommandSelector*                    m_shortCommandSelector;                                  // 0x02D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_GameModeManager*                         m_gameModeManagerWidget;                                 // 0x02E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ScoreBoard*                              m_scoreboardWidget;                                      // 0x02E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_OrbitMenu*                               m_orbitShipSelectWidget;                                 // 0x02F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_DeathRecap*                              m_deathRecapWidget;                                      // 0x02F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_HUDNotificationPopup*                    m_tutorialTryAgainPopup;                                 // 0x0300(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_HavocProgressionMenu*                    m_havocProgressionMenuWidget;                            // 0x0308(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_HavocProgressionMenu_WaveInfo*           m_havocWaveInfoWidget;                                   // 0x0310(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_HavocProgressionMenu_AcquiredBoostsList* m_havocAcquiredBoostsWidget;                             // 0x0318(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_HordeWaveCompleted*                      m_hordeWaveCompletedWidget;                              // 0x0320(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_RoundOverDisplay*                        m_roundOverDisplayWidget;                                // 0x0328(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_TeamVoiceChatMgr*                        m_teamVoiceChatMgr;                                      // 0x0330(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_FeedbackAnimationManager*                m_feedbackAnimationManager;                              // 0x0338(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget*                                         m_mapBoundaryWarningWidget;                              // 0x0340(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_Announcement*                            m_announcementWidget;                                    // 0x0348(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_forcePS4InEditor;                                      // 0x0350(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L7KO[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UClass>                                    m_contextAudioManagerAssetPtr;                           // 0x0358(0x001C) ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C1E0[0x4];                                   // 0x0374(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UYUIAudioManager*                                    m_contextAudioManager;                                   // 0x0378(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XDP7[0x40];                                  // 0x0380(0x0040) MISSED OFFSET (PADDING)

	public:
		void ShowAllWidgets();
		bool ShouldUsePS4Widgets();
		void NotifyAllWidgetReferencesSet();
		bool IsLocalPlayerFighter();
		void HideAllWidgets();
		class UYHUDWidget* GetWidgetByType(class UClass* classType);
		void BP_InitBlueprintLinks(EYGameModeType GameMode);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInterface_Talk
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYInterface_Talk : public UInterface
	{
	public:
		void SetTalking(bool isTalking);
		void SetQuestGiverMode(bool isQuestGiver);
		void SetPosture(EYCharacterTalkPosture posture);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YInventoryManager
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class UYInventoryManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_35BE[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnOfferPurchaseCompleted;                                // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IQ4V[0x80];                                  // 0x0068(0x0080) MISSED OFFSET (PADDING)

	public:
		void OnUpdatedInventory__DelegateSignature();
		void OnOfferPurchaseCompleted__DelegateSignature(int32_t Result, const class FString& offerId, int32_t quantity);
		void OnOfferPurchaseComplete(int32_t Result, const class FString& offerId, int32_t quantity);
		void OnItemRemoved(int32_t itemID, int32_t amount);
		void OnItemClaimCompletedSignature__DelegateSignature(int32_t itemID, bool Result);
		void OnItemClaimComplete(int32_t itemID, bool Result);
		void OnItemAdded(int32_t itemID, int32_t amount);
		void OnInventoryInitialization__DelegateSignature();
		void OnAddedItem__DelegateSignature(int32_t itemID);
		void InitializeItemsFromInventory();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YKillZoneVolume
	 * Size -> 0x0020 (FullSize[0x0418] - InheritedSize[0x03F8])
	 */
	class AYKillZoneVolume : public AVolume
	{
	public:
		float                                                      m_defaultCountDown;                                      // 0x03F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_damagePerSecond;                                       // 0x03FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TAHZ[0x18];                                  // 0x0400(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnOverlapEnd(class AActor* OtherActor);
		void OnOverlap(class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YKismetGameplayConditionQueryContext
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYKismetGameplayConditionQueryContext : public UObject
	{
	public:
		unsigned char                                              UnknownData_E80P[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		class UYKismetGameplayConditionQueryContext* STATIC_CreateGameplayConditionQueryContext();
		void AddNumberQueryContextComplex(float contextValue, const class FName& mainSpecifier, const class FName& additionalSpecifier1, const class FName& additionalSpecifier2);
		void AddNumberQueryContext(const class FName& contextSpecifier, float contextValue);
		void AddNameQueryContextComplex(const class FName& contextValue, const class FName& mainSpecifier, const class FName& additionalSpecifier1, const class FName& additionalSpecifier2);
		void AddNameQueryContext(const class FName& contextSpecifier, const class FName& contextValue);
		void AddBitMaskQueryContextComplex(int32_t contextValue, const class FName& bitMaskIdentifier, const class FName& mainSpecifier, const class FName& additionalSpecifier1, const class FName& additionalSpecifier2);
		void AddBitMaskQueryContext(const class FName& contextSpecifier, const class FName& bitMaskIdentifier);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLEDLightingComponent
	 * Size -> 0x01D8 (FullSize[0x02D0] - InheritedSize[0x00F8])
	 */
	class UYLEDLightingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_OGA9[0x10];                                  // 0x00F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_pawn;                                                  // 0x0108(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AYPlayerControllerBase*                              m_owner;                                                 // 0x0110(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FYLEDKeyInfo>                                m_logiGameKeys;                                          // 0x0118(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		TArray<struct FYLEDKeyInfo>                                m_logiAbilityKeys;                                       // 0x0128(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingEnergyDefault;                             // 0x0138(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingEnergyShield;                              // 0x0158(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingEnergyThrusters;                           // 0x0178(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingEnergyWeapons;                             // 0x0198(0x0020) Config, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CS1K[0x20];                                  // 0x01B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYLEDKeyInfo                                        m_logiLightingAbilityInCoolDown;                         // 0x01D8(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingAbilityActive;                             // 0x01F8(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingAbilityReady;                              // 0x0218(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingDead;                                      // 0x0238(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingGameStart;                                 // 0x0258(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingMatchOver;                                 // 0x0278(0x0020) Config, NativeAccessSpecifierPrivate
		struct FYLEDKeyInfo                                        m_logiLightingSpawnKeys;                                 // 0x0298(0x0020) Config, NativeAccessSpecifierPrivate
		float                                                      m_logiLightingAbilityFlashTimeout;                       // 0x02B8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C6UD[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_logiLightingUpdateThrottle;                            // 0x02C0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_logiLightingDeathFlashTimeout;                         // 0x02C4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_alertHealthThreshold;                                  // 0x02C8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9JMG[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetUpPawnDelegates(class AYPawn* Pawn);
		void PawnIsDead(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const class FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
		void OnMatchEnded();
		void OnGameStateInitialized();
		void OnActiveEnergyWheelFunctionChanged(EYEnergyWheelSelection energyWheelFunction);
		void FinshCoolDownForAbilityKey(int32_t abilityIndex);
		void AbilityHasTargetLock(class AYPawn* Pawn, int32_t abilityIndex);
		void AbilityHasLostTargetLock(int32_t abilityIndex);
		void AbilityDeactivated(int32_t abilityIndex);
		void AbilityActivated(bool succeeded, int32_t abilityIndex);
		void AbilitiesInitialized();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLevelBoundariesHeightVolume
	 * Size -> 0x0020 (FullSize[0x0418] - InheritedSize[0x03F8])
	 */
	class AYLevelBoundariesHeightVolume : public AVolume
	{
	public:
		float                                                      m_globalForceMulti;                                      // 0x03F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_quickOverlapCheckInterval;                             // 0x03FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JZSL[0x8];                                   // 0x0400(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AYPawn>>                       m_currOverlap;                                           // 0x0408(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate

	public:
		void OnOverlapEnd(class AYPawn* Pawn);
		void OnOverlap(class AYPawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLevelBoundariesWarningVolume
	 * Size -> 0x0018 (FullSize[0x0410] - InheritedSize[0x03F8])
	 */
	class AYLevelBoundariesWarningVolume : public AVolume
	{
	public:
		float                                                      m_quickOverlapCheckInterval;                             // 0x03F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BW38[0x4];                                   // 0x03FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AYPawn>>                       m_currOverlap;                                           // 0x0400(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate

	public:
		void OnOverlapEnd(class AYPawn* Pawn);
		void OnOverlap(class AYPawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWarpJumpTargetVolume
	 * Size -> 0x0018 (FullSize[0x03D8] - InheritedSize[0x03C0])
	 */
	class AYWarpJumpTargetVolume : public AActor
	{
	public:
		class UBoxComponent*                                       m_boxComponent;                                          // 0x03C0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYTeam                                                     m_teamID;                                                // 0x03C8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HHE4[0x3];                                   // 0x03C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             m_extent;                                                // 0x03CC(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic

	public:
		void PostLoad();
		void OnRep_Extent();
		void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLevelBoundariesWarpVolume
	 * Size -> 0x0060 (FullSize[0x0458] - InheritedSize[0x03F8])
	 */
	class AYLevelBoundariesWarpVolume : public AVolume
	{
	public:
		float                                                      m_defaultWarpTime;                                       // 0x03F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_warpDistance;                                          // 0x03FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      m_warpTargetActors;                                      // 0x0400(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      m_maxSearchDistance;                                     // 0x0410(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_quickOverlapCheckInterval;                             // 0x0414(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YXRV[0x40];                                  // 0x0418(0x0040) MISSED OFFSET (PADDING)

	public:
		void OnOverlap(class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLevelScriptActor
	 * Size -> 0x0018 (FullSize[0x03E0] - InheritedSize[0x03C8])
	 */
	class AYLevelScriptActor : public ALevelScriptActor
	{
	public:
		class AYOrbitTransitionManager*                            m_orbitTransitionManager;                                // 0x03C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      m_levelFogActors;                                        // 0x03D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void SetUpOupostMatineeActors(class AMatineeActor* shipSelectedRight_pt1, class AMatineeActor* shipSelectedRight_pt2, class AMatineeActor* shipSelectedLeft_pt1, class AMatineeActor* shipSelectedLeft_pt2);
		void SetUpOupostCharacterSpawners(class AYCharacterSpawner* comCharSpawner, class AYCharacterSpawner* weaponsCharSpawner, class AYCharacterSpawner* navigationCharSpawner, class AYCharacterSpawner* engineerCharSpawner, class AYCharacterSpawner* captainCharSpawner, class AYCharacterSpawner* officerDetailCharSpawner);
		void SetUpOupostCameraActors(class ACameraActor* Cam_Login_View, class ACameraActor* Cam_Hangar_Main, class ACameraActor* Cam_Hangar_Customization, class ACameraActor* Cam_Quarters_General, class ACameraActor* Cam_Quarters_Officers, class ACameraActor* Cam_Quarters_Captain, class ACameraActor* Cam_Quarters_Market_Captain, class ACameraActor* Cam_TechTree, class ACameraActor* Cam_Market, class ACameraActor* Cam_Market_Preview, class ACameraActor* Cam_Dashboard);
		void SetUpLevelCameraActorForSection(class ACameraActor* CameraActor, EYOutpostSection outpostSection);
		void SetUpCharacterSpawnerForCharacterType(class AYCharacterSpawner* characterSpawner, EYOutpostCharacterType outpostCharacterType);
		void SetRestartPointID(int32_t restartPointID);
		void SetGenericMissionMarker(class AActor* targetActor, EYUIQuestMarker markerType);
		void OnTurretSpawned(class AYTurretActor* turret);
		void OnTurretDied(int32_t turretId);
		void OnTeleportPlayerIntoLevel(class AYPlayerController* Player, class AYPawn* Pawn, EYTeam Team, float randomJumpOutTime);
		void OnStopPreviewingShip();
		void OnStartVisualAttractionLevelScript();
		void OnStartPreviewingShip();
		void OnStartOrbitTransition();
		void OnStartMapAutomationTest();
		void OnStartDebugCombat(int32_t teamSize);
		void OnStartCreeps();
		void OnStartCombatAutomationTest(int32_t tierLoadout);
		void OnStartCombat();
		void OnStartBenchmarkLevelScript();
		void OnSetUpSpawnPoints();
		void OnSetUpCapturePoints();
		void OnRoundOver();
		void OnRequestedCRLIsVisible(EYCharacterRenderLevelType levelType);
		void OnReceivedTravel(const class FString& Map, const class FString& gameType);
		void OnPlayerSpawned(class AYPawn* Pawn);
		void OnPlayerDied(class AYPawn* victim, class AYPawn* Killer);
		void OnPlayerDamaged(class AYPawn* victim, float Damage, class AYPawn* DamageCauser);
		void OnPawnBeginPlay(class AYPawn* Pawn);
		void OnOrbitTransitionEnded();
		void OnOfficerSelected(class UYCharacterTemplate* characterTemplate, const class FName& officerName);
		void OnOfficerRotated(const struct FRotator& deltaRot);
		void OnNPCSpawned(int32_t npcID, class AYPawn* Pawn);
		void OnNPCDied(int32_t npcID, bool jumpOut);
		void OnNPCDamaged(int32_t npcID, float Damage, class AActor* DamageCauser);
		void OnNewCaptainAppearanceSelected(class UYCharacterTemplate* characterTemplate, const class FName& captainName);
		void OnLightingSettingChanged(bool bUsingSimpleLighting);
		void OnLevelLoaded(int32_t restartPointID);
		void OnInitializeLevelScript();
		void OnInitializeBenchmark();
		void OnHudLoaded();
		void OnHordeWaveStarting(int32_t waveIndex);
		void OnHordeWaveStarted(int32_t waveIndex);
		void OnHordeWaveEnded(int32_t waveIndex, float duration);
		void OnClientRestart(class AYPawn* Pawn, class AYPlayerController* PC);
		void OnCaptainRotated(const struct FRotator& deltaRot);
		void OnCameraPanAnimation(class AYPlayerController* Player, class AYPawn* Pawn);
		void OnBeginBattle();
		void OnActorDestroyed(class AActor* dActor);
		void BroadcastFName(const class FName& Name, float Time);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLevelScriptActor_CharRenderLevel
	 * Size -> 0x0000 (FullSize[0x03C8] - InheritedSize[0x03C8])
	 */
	class AYLevelScriptActor_CharRenderLevel : public ALevelScriptActor
	{
	public:
		void OnSwitchedToSceneCapture(const class FString& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLevelStreamingUtils
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UYLevelStreamingUtils : public UBlueprintFunctionLibrary
	{
	public:
		unsigned char                                              UnknownData_1S2T[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		bool STATIC_UnloadStreamingLevel(class UWorld* World, const class FString& LevelName);
		bool STATIC_LoadStreamingLevel(class UWorld* World, const class FString& LevelName, bool shouldBeVisible, bool blockOnLoad, const struct FTransform& levelTransform, bool loadTransient);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLevelVariationManager
	 * Size -> 0x0008 (FullSize[0x03C8] - InheritedSize[0x03C0])
	 */
	class AYLevelVariationManager : public AActor
	{
	public:
		int32_t                                                    m_previewLevelVariationIndex;                            // 0x03C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_shouldModifyLevelVisibilityForPreview;                 // 0x03C4(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ANC6[0x3];                                   // 0x03C5(0x0003) MISSED OFFSET (PADDING)

	public:
		int32_t GetSelectedLevelVariationIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLoadoutFilter
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UYLoadoutFilter : public UDataAsset
	{
	public:
		bool                                                       m_allowCustomLoadouts;                                   // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowDreadnought;                                      // 0x0029(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowDreadnoughtLight;                                 // 0x002A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowDreadnoughtMedium;                                // 0x002B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowDreadnoughtHeavy;                                 // 0x002C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowAssault;                                          // 0x002D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowAssaultLight;                                     // 0x002E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowAssaultMedium;                                    // 0x002F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowAssaultHeavy;                                     // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowScout;                                            // 0x0031(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowScoutLight;                                       // 0x0032(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowScoutMedium;                                      // 0x0033(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowScoutHeavy;                                       // 0x0034(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSniper;                                           // 0x0035(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSniperLight;                                      // 0x0036(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSniperMedium;                                     // 0x0037(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSniperHeavy;                                      // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSupport;                                          // 0x0039(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSupportLight;                                     // 0x003A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSupportMedium;                                    // 0x003B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_allowSupportHeavy;                                     // 0x003C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8B7L[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYShipLoadout*>                               m_hardReferencedLoadouts;                                // 0x0040(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<TAssetPtr<class UClass>>                            m_specialLoadouts;                                       // 0x0050(0x0010) Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<struct FYShipImportLoadoutInfo>                     m_weakLoadedFilterEntries;                               // 0x0060(0x0010) ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YLocalizationUtilities
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYLocalizationUtilities : public UObject
	{
	public:
		TArray<class FString> STATIC_ParseArgumentsFromLocTextMacroString(const class FString& stringToParse);
		EParseLocTextMacroStringResult STATIC_GetLocTextMacroStringFormat(const class FString& stringToParse);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMapAutomationTestsFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYMapAutomationTestsFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_TryShutdownEngine();
		void STATIC_StopPerformanceCaptureAndSendInformation(const class FString& performanceCaptureName, const class FString& timeSeriesSpecifier);
		void STATIC_StartPerformanceCapture();
		void STATIC_EnableStatTracking();
		void STATIC_DisableStatTracking();
		void STATIC_CaptureAndSendPerformanceInformationOneFrame(const class FString& captureName);
		void STATIC_CaptureAndSendMemoryInformation();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenuNavigationSlotBase
	 * Size -> 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
	 */
	class UYMenuNavigationSlotBase : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_BHFK[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isVisible;                                             // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CC1O[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0038(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0108(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AA75[0x5];                                   // 0x010B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0110(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenuNavigationSlotAbility
	 * Size -> 0x0008 (FullSize[0x0140] - InheritedSize[0x0138])
	 */
	class UYMenuNavigationSlotAbility : public UYMenuNavigationSlotBase
	{
	public:
		EYAbilityCategory                                          m_abilityCategory;                                       // 0x0138(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ME37[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenuNavigationSlotAppearance
	 * Size -> 0x0008 (FullSize[0x0140] - InheritedSize[0x0138])
	 */
	class UYMenuNavigationSlotAppearance : public UYMenuNavigationSlotBase
	{
	public:
		EYVanityItemMenuCategorie                                  m_vanityType;                                            // 0x0138(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CAML[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenuNavigationSlotOfficer
	 * Size -> 0x0008 (FullSize[0x0140] - InheritedSize[0x0138])
	 */
	class UYMenuNavigationSlotOfficer : public UYMenuNavigationSlotBase
	{
	public:
		EYOfficerType                                              m_officerType;                                           // 0x0138(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VUPF[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenuNavigationSlotWeapon
	 * Size -> 0x0008 (FullSize[0x0140] - InheritedSize[0x0138])
	 */
	class UYMenuNavigationSlotWeapon : public UYMenuNavigationSlotBase
	{
	public:
		bool                                                       m_isPrimaryWeapon;                                       // 0x0138(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1QJ9[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenuWidget_DropdownList
	 * Size -> 0x0068 (FullSize[0x02A0] - InheritedSize[0x0238])
	 */
	class UYMenuWidget_DropdownList : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_OSKP[0x68];                                  // 0x0238(0x0068) MISSED OFFSET (PADDING)

	public:
		void BP_SetListVisible(bool IsVisible);
		void BP_SetHighlightedListItem(const struct FYDropdownItemData& listItem);
		void BP_SetActiveListItem(const struct FYDropdownItemData& listItem);
		void BP_PopulateList(TArray<struct FYDropdownItemData> itemDataList);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMergedNativeAnimationUpdate
	 * Size -> 0x01F8 (FullSize[0x0220] - InheritedSize[0x0028])
	 */
	class UYMergedNativeAnimationUpdate : public UYAnimationNativeUpdate
	{
	public:
		struct FYNativeAnimationData                               m_nativeData;                                            // 0x0028(0x0068) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MQ1H[0x190];                                 // 0x0090(0x0190) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMeshAutomationTestLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYMeshAutomationTestLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMinimapVisibilityVolume
	 * Size -> 0x0020 (FullSize[0x0418] - InheritedSize[0x03F8])
	 */
	class AYMinimapVisibilityVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_YK4Z[0x20];                                  // 0x03F8(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMinimapVolume
	 * Size -> 0x0010 (FullSize[0x0408] - InheritedSize[0x03F8])
	 */
	class AYMinimapVolume : public AVolume
	{
	public:
		float                                                      m_angle;                                                 // 0x03F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_showEnemyOnFire;                                       // 0x03FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_showEnemyOnAbility;                                    // 0x03FD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_showEnemyOnVolume;                                     // 0x03FE(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5H8K[0x1];                                   // 0x03FF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_showEnemyOnVolumeFade;                                 // 0x0400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8KDC[0x4];                                   // 0x0404(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMovieManagerSettings
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UYMovieManagerSettings : public UDataAsset
	{
	public:
		TArray<struct FYMovieData>                                 m_movieList;                                             // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UMediaPlayer*                                        m_mediaPlayer;                                           // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_fullscreenUMGWidget;                                   // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_fullscreenUMGWidgetPS4;                                // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMediaSoundWave*                                     m_mediaSoundWave;                                        // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFileMediaSource*                                    m_movieSource;                                           // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMovieManager
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UYMovieManager : public UObject
	{
	public:
		class UYMovieManagerSettings*                              m_movieManagerSettings;                                  // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UYDreadnoughtLocalPlayer>             m_localPlayer;                                           // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UUserWidget*                                         m_mediaWidget;                                           // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AAmbientSound*                                       m_ambientMovieSound;                                     // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_currentMovieID;                                        // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnMovieSuspended();
		void OnMovieResumed();
		void OnMovieOpenFailed(const class FString& FailedUrl);
		void OnMovieOpened(const class FString& OpenedUrl);
		void OnMovieEndReached();
		void OnMovieClosed();
		bool CreateUIWidget();
		bool CreateAmbientSoundActor();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest_AbilitiesUsed
	 * Size -> 0x0020 (FullSize[0x00E0] - InheritedSize[0x00C0])
	 */
	class UYMPQuest_AbilitiesUsed : public UYMPQuest
	{
	public:
		TArray<EYShipClass>                                        m_shipClassFilter;                                       // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            m_abilitiesFilter;                                       // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest_DamageDealt
	 * Size -> 0x0048 (FullSize[0x0108] - InheritedSize[0x00C0])
	 */
	class UYMPQuest_DamageDealt : public UYMPQuest
	{
	public:
		bool                                                       m_onlyDamageWithAbilities;                               // 0x00C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MSCZ[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYShipClass>                                        m_damagedClassFilter;                                    // 0x00C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYShipClass>                                        m_damagerClassFilter;                                    // 0x00D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYGameModeType>                                     m_gameModesFilter;                                       // 0x00E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            m_abilitiesFilter;                                       // 0x00F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest_EndOfMatchScore
	 * Size -> 0x0010 (FullSize[0x00D0] - InheritedSize[0x00C0])
	 */
	class UYMPQuest_EndOfMatchScore : public UYMPQuest
	{
	public:
		TArray<EYGameModeType>                                     m_battlesTypeFilter;                                     // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest_GamePlayed
	 * Size -> 0x0028 (FullSize[0x00E8] - InheritedSize[0x00C0])
	 */
	class UYMPQuest_GamePlayed : public UYMPQuest
	{
	public:
		TArray<EYGameModeType>                                     m_battlesTypeFilter;                                     // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYMatchOutcome>                                     m_outcomeTypesFilter;                                    // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       m_partOfSquadFilter;                                     // 0x00E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_55KV[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest_PlayerKills
	 * Size -> 0x0048 (FullSize[0x0108] - InheritedSize[0x00C0])
	 */
	class UYMPQuest_PlayerKills : public UYMPQuest
	{
	public:
		bool                                                       m_onlyKillsWithAbilities;                                // 0x00C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7F3R[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYShipClass>                                        m_killedShipClasses;                                     // 0x00C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYShipClass>                                        m_killerClassFilter;                                     // 0x00D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYGameModeType>                                     m_gameModesFilter;                                       // 0x00E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            m_abilitiesFilter;                                       // 0x00F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest_Repair
	 * Size -> 0x0030 (FullSize[0x00F0] - InheritedSize[0x00C0])
	 */
	class UYMPQuest_Repair : public UYMPQuest
	{
	public:
		TArray<EYShipClass>                                        m_healerClassFilter;                                     // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYShipClass>                                        m_healedClassFilter;                                     // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYGameModeType>                                     m_battleTypeFilter;                                      // 0x00E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuest_Ribbons
	 * Size -> 0x0030 (FullSize[0x00F0] - InheritedSize[0x00C0])
	 */
	class UYMPQuest_Ribbons : public UYMPQuest
	{
	public:
		TArray<int32_t>                                            m_numRibbons;                                            // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYScoringEventID>                                   m_ribbonsTypeFilter;                                     // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<EYGameModeType>                                     m_battlesTypeFilter;                                     // 0x00E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuestData
	 * Size -> 0x0188 (FullSize[0x01B0] - InheritedSize[0x0028])
	 */
	class UYMPQuestData : public UObject
	{
	public:
		unsigned char                                              UnknownData_POZM[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYPlayerMPQuestCycle*                                m_questCycleOwner;                                       // 0x00A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EERQ[0x108];                                 // 0x00A8(0x0108) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMPQuestsCollection
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class UYMPQuestsCollection : public UDataAsset
	{
	public:
		class FString                                              m_mmogbrainExportPath;                                   // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_questsFolder;                                          // 0x0038(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W43A[0x10];                                  // 0x0048(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYDailyContractsConfig                              m_dailyContractsConfig;                                  // 0x0058(0x0020) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      m_multiplayerQuestsDefinition;                           // 0x0078(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<TAssetPtr<class UObject>>                           m_questsAssetDefinition;                                 // 0x0088(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TMap<class FString, class UYMPQuest*>                      m_multiplayerQuests;                                     // 0x0098(0x0050) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZW55[0x10];                                  // 0x00E8(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnQuestsLoaded();
		void OnQuestsLoadCompleted__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMusicCue_Background
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYMusicCue_Background : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMusicManager
	 * Size -> 0x0160 (FullSize[0x0188] - InheritedSize[0x0028])
	 */
	class UYMusicManager : public UObject
	{
	public:
		struct FStringAssetReference                               m_musicManagerStringAssetReference;                      // 0x0028(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		TArray<class UAkAudioEvent*>                               m_randomizedMusicVariationEvents;                        // 0x0038(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_startOrbitSequence;                                    // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_stopOrbitSequence;                                     // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_countdownOrbitSequence;                                // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_matchStartedEvent;                                     // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_matchOverEvent;                                        // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_startBattleReport;                                     // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_stopBattleReport;                                      // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_startLoadingScreen;                                    // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_stopLoadingScreen;                                     // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_victoryScreen;                                         // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_defeatScreen;                                          // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_drawScreen;                                            // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_loginStarted;                                          // 0x00A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_loginSuccess;                                          // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_connectionLost;                                        // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_toggleAudioOn;                                         // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_toggleAudioOff;                                        // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_earlyGameMusic;                                        // 0x00D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_midGameMusic;                                          // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_lateGameLosingMusic;                                   // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_lateGameDrawMusic;                                     // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_lateGameWinningMusic;                                  // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_onPlayerKilledMusic;                                   // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_introTimerDelaySeconds;                                // 0x0100(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_timeLeftToStartCountdownOrbitSequence;                 // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_earlyGameMusicThreshold;                               // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_midGameMusicThreshold;                                 // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_lateGameMusicThreshold;                                // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_playerScoreIncrement;                                  // 0x0114(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_playerScoreDecayVelocityUnitsPerSecond;                // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_threatMinimapRadius;                                   // 0x011C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_threatScale;                                           // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_healthScale;                                           // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_threatRtpcSendRateSeconds;                             // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_playerScoreRtpcSendRateSeconds;                        // 0x012C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CJZZ[0x50];                                  // 0x0130(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       m_gameMusicCurrentlyPlaying;                             // 0x0180(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void PostCustomMusicEvent(class UAkAudioEvent* AkEvent);
		void PlayerThreatUpdated(float threat);
		void PlayerScored();
		void PlayerHealthChanged(float healthPercent);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPerk
	 * Size -> 0x0180 (FullSize[0x01A8] - InheritedSize[0x0028])
	 */
	class UYPerk : public UObject
	{
	public:
		unsigned char                                              UnknownData_B50J[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          m_featDataTable;                                         // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_perkName;                                              // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_description;                                           // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_rankedDescribtion;                                     // 0x0050(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EYOfficerType                                              m_type;                                                  // 0x0060(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HELE[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_perkFeatName;                                          // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              m_enabling;                                              // 0x0070(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FString>                                      m_triggers;                                              // 0x0080(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class FString>                                      m_effects;                                               // 0x0090(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NRCW[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x00A8(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0178(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H10S[0x5];                                   // 0x017B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0180(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		class FName RetrieveFeatName();
		class FString RetrieveDescription();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YNPCPawnData
	 * Size -> 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
	 */
	class UYNPCPawnData : public UDataAsset
	{
	public:
		TArray<struct FYNPCPawnDataEntry>                          m_PawnsData;                                             // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      m_shipClassLoadouts;                                     // 0x0038(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		bool                                                       assetsLoaded;                                            // 0x0048(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TDXD[0xA7];                                  // 0x0049(0x00A7) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YObjectiveComponent
	 * Size -> 0x0048 (FullSize[0x0140] - InheritedSize[0x00F8])
	 */
	class UYObjectiveComponent : public UActorComponent
	{
	public:
		class FName                                                m_objectiveID;                                           // 0x00F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             m_offsetLocation;                                        // 0x0100(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8JMQ[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_overwriteMarkerText;                                   // 0x0110(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYUIQuestMarker                                            m_markerType;                                            // 0x0120(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_showMarkerText;                                        // 0x0121(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YT4W[0x2];                                   // 0x0122(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              m_markerTextColor;                                       // 0x0124(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FString                                              m_markerText;                                            // 0x0128(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H781[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowObjectiveMarker(bool Show);
		void SetObjectiveID(const class FName& objectiveID, bool updateToState);
		void SetMarkerText(const class FString& Text);
		void InitializeGameState();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOfficerFixed
	 * Size -> 0x0000 (FullSize[0x00D8] - InheritedSize[0x00D8])
	 */
	class UYOfficerFixed : public UYOfficer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOfficerManager
	 * Size -> 0x0188 (FullSize[0x01B0] - InheritedSize[0x0028])
	 */
	class UYOfficerManager : public UObject
	{
	public:
		class FString                                              m_officerBPFolderPath;                                   // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XR7L[0x118];                                 // 0x0038(0x0118) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYOfficer*                                           m_defaultOfficers[0x4];                                  // 0x0150(0x0020) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYOfficer*                                           m_officers[0x4];                                         // 0x0170(0x0020) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYPerkManager*                                       m_perkManager;                                           // 0x0190(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UObjectLibrary*                                      m_objectLibrary;                                         // 0x0198(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O7LY[0x10];                                  // 0x01A0(0x0010) MISSED OFFSET (PADDING)

	public:
		TArray<class UYOfficer*> RetrieveAvailableOfficers();
		void OnOfficerUpdateFailed__DelegateSignature();
		void OnOfficerUpdated__DelegateSignature(int32_t Type);
		void OnInitializationCompleted__DelegateSignature();
		void InitializeFromPlayerData();
		int32_t GetRankForRP(int32_t rp);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOfficerComponent
	 * Size -> 0x0018 (FullSize[0x0110] - InheritedSize[0x00F8])
	 */
	class UYOfficerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_DB2W[0x18];                                  // 0x00F8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOnboardingHighlightCalloutButtonNames
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UYOnboardingHighlightCalloutButtonNames : public UDataAsset
	{
	public:
		class FString                                              m_fleetSelectionButton;                                  // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_gameModeSelectionButton;                               // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_loadoutDetailsTechTreeButton;                          // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_purchaseScreenTechTreeButton;                          // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_purchaseScreenBuyResearchButton;                       // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOnboardingSavedData
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UYOnboardingSavedData : public UObject
	{
	public:
		int32_t                                                    m_saveGameVersion;                                       // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bTutorialFinished;                                     // 0x002C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UJ5K[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYOnboardingRuleState>                       m_onboardingRuleStates;                                  // 0x0030(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FName>                                        m_pendingUncompletedRules;                               // 0x0040(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       m_isDashboardEnabled;                                    // 0x0050(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PHQM[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOnboardingManager
	 * Size -> 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
	 */
	class UYOnboardingManager : public UObject
	{
	public:
		TArray<struct FYOnboardingEventRule>                       m_eventRules;                                            // 0x0028(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FYOnboardingNotifyData>                      m_notificationQueue;                                     // 0x0038(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOnboardingInitialized;                                 // 0x0048(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NOII[0x78];                                  // 0x0058(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYTutorial*                                          m_tutorial;                                              // 0x00D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LZPO[0x4];                                   // 0x00D8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_notificationQueueUpdateTime;                           // 0x00DC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_notificationTimeOut;                                   // 0x00E0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2U6H[0x1C];                                  // 0x00E4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYOnboardingSavedData*                               m_onbooardingSavedData;                                  // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_87E6[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartTutorial();
		void StartTrainingMatch();
		void SetDashboardEnabled(bool Enabled);
		void SaveStates();
		void ResetStates();
		void RequestMenuState(EYMenuState onboardingMenuState, EYMenuSubState onboardingSubMenuState);
		void PromptTutorial_PS4(class UClass* m_UMGPopupClass);
		void PromptTraining_PS4(class UClass* m_UMGPopupClass);
		void ProcessNotificationQueue();
		void ManuallyTriggerRule(const class FName& ruleName);
		void ManuallyResetRule(const class FName& ruleName);
		void ManuallyCompleteRule(const class FName& ruleName);
		bool LoadStates();
		void LoadData();
		bool IsRuleInProgress(const class FName& ruleName);
		bool IsRuleCompleted(const class FName& ruleName);
		bool Initialized();
		void HandleOnPlayerControllerSet(class AYPlayerControllerBase* PlayerController);
		void ClearAllRules();
		void AddTutorialDoneRule(const class FName& ruleName, bool completeManually);
		void AddRule(const struct FYOnboardingEventRule& Rule);
		void AddRankReachedRule(const class FName& ruleName, bool completeManually, int32_t reachedRank);
		void AddMetaMenuReachedRule(const class FName& ruleName, bool completeManually, EYMenuMetaState metaMenuState);
		void AddMenuReachedWithShipClassRule(const class FName& ruleName, bool completeManually, EYMenuState reachedMenu, EYMenuSubState reachedSubMenu, EYShipClass shipclass);
		void AddMenuReachedRule(const class FName& ruleName, bool completeManually, EYMenuState reachedMenu, EYMenuSubState reachedSubMenu);
		void AddItemUnlockedRule(const class FName& ruleName, bool completeManually, class UClass* classUnlocked);
		void AddItemEquipedRule(const class FName& ruleName, bool completeManually, class UClass* itemEquiped);
		void AddItemBoughtRuleWithPrerequisite(const class FName& ruleName, bool completeManually, class UClass* itemBought, const class FName& prerequisiteRuleName, EYShopPurchaseSource itemPurchaseSource);
		void AddItemBoughtRule(const class FName& ruleName, bool completeManually, class UClass* itemBought, EYShopPurchaseSource itemPurchaseSource);
		void AddFirstLoginRule(const class FName& ruleName, bool completeManually);
		void AddCustomizationMenuReachedRule(const class FName& ruleName, bool completeManually, EYUILoadoutItemType itemType);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOrbitTransitionManager
	 * Size -> 0x0160 (FullSize[0x0520] - InheritedSize[0x03C0])
	 */
	class AYOrbitTransitionManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_ROJD[0x8];                                   // 0x03C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_orbitDuration;                                         // 0x03C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_cameraPanDuration;                                     // 0x03CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_minOrbitMapLoadingTime;                                // 0x03D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_changeShipTimeLimit;                                   // 0x03D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_teleportingTime;                                       // 0x03D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_warpJumpRandomTimingMin;                               // 0x03DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_warpJumpRandomTimingMax;                               // 0x03E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_minBlackScreenDurationAfterWarpOut;                    // 0x03E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_warpIntoOrbitAfterShipChange;                          // 0x03E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_warpOutFromOrbit;                                      // 0x03F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_warpIntoLevelFromOrbit;                                // 0x03F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_endOfMatchCameraFadeLength;                            // 0x0400(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XQPL[0x7C];                                  // 0x0404(0x007C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_enableOrbitTransition;                                 // 0x0480(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_disableFogInOrbit;                                     // 0x0481(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4FKX[0x6];                                   // 0x0482(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          m_levelStreamingDataTable;                               // 0x0488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ACameraActor*                                        m_cameraPanActor;                                        // 0x0490(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASkeletalMeshActor*                                  m_cameraPanSMA;                                          // 0x0498(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AYPlayerStart*>                               m_orbitSpawnPoints;                                      // 0x04A0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		TArray<class ATargetPoint*>                                m_TDM_TargetPointsTeam1;                                 // 0x04B0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		TArray<class ATargetPoint*>                                m_TDM_TargetPointsTeam2;                                 // 0x04C0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		TArray<class ATargetPoint*>                                m_TE_TargetPointsTeam1;                                  // 0x04D0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		TArray<class ATargetPoint*>                                m_TE_TargetPointsTeam2;                                  // 0x04E0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		class AActor*                                              m_endOfMatchCamera;                                      // 0x04F0(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E4XC[0x8];                                   // 0x04F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ATargetPoint*>                                m_activeTargetPointsT1;                                  // 0x0500(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class ATargetPoint*>                                m_activeTargetPointsT2;                                  // 0x0510(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void OrbitLoaded();
		void OnStartProfileEndOfMatchScreen();
		void OnPlayCameraPanAnimation(class UYPlayerOrbitComponent* playerOrbitComponent, class AYPlayerController* Player, class AYPawn* Pawn);
		void OnOrbitTransitionStarts(class AYPlayerController* Player);
		void OnOrbitTransitionEnds(class AYPlayerController* Player, class UYPlayerOrbitComponent* orbitComponent);
		void OnOrbitLevelSetUp(class AYGameState_MP* multiplayerGameState, int32_t levelVariationIndex);
		void OnEndOfMatchOrbitSetUp(class AYPlayerController* Player);
		void OnCameraFadeComplete(class AYPlayerController* Player);
		class ASkeletalMeshActor* GetSkeletalMeshForCameraPan();
		float GetMinTimeRequiredForPlayingOrbitTransition();
		TArray<class ATargetPoint*> GetLevelTargetPointTeam2();
		TArray<class ATargetPoint*> GetLevelTargetPointTeam1();
		bool GetLevelStreamingDataRow(const class FName& Name, struct FYLevelStreamingDataTableRow* rowOut);
		class ACameraActor* GetCameraActorForCameraPan();
		void EndOfMatchOrbitLoaded(class AYPlayerController* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOutpostCamera
	 * Size -> 0x05F0 (FullSize[0x1B10] - InheritedSize[0x1520])
	 */
	class AYOutpostCamera : public AYPlayerCameraManager
	{
	public:
		unsigned char                                              UnknownData_XOA0[0xB0];                                  // 0x1520(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_previewComponentOffsetFraction;                        // 0x15D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_II82[0x4];                                   // 0x15D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYCameraPreviewComponentType>                       m_previewComponentTypesToOffset;                         // 0x15D8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      m_horizontalPreviewRateMultiplier;                       // 0x15E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_verticalPreviewRateMultiplier;                         // 0x15EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_horizontalPreviewRateMultiplierGamepad;                // 0x15F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_verticalPreviewRateMultiplierGamepad;                  // 0x15F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8M3B[0x10];                                  // 0x15F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYOutpostCameraModule*                               m_currentPreviewModule;                                  // 0x1608(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UN7B[0x4C0];                                 // 0x1610(0x04C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_shipPreviewModuleClass;                                // 0x1AD0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              m_purchasePreviewModuleClass;                            // 0x1AD8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              m_characterPreviewModuleClass;                           // 0x1AE0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYOutpostCameraModule_DefaultPreview*                m_defaultPreviewModule;                                  // 0x1AE8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYOutpostCameraModule_ShipPreview*                   m_shipPreviewModule;                                     // 0x1AF0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYOutpostCameraModule_PurchasePreview*               m_purchasePreviewModule;                                 // 0x1AF8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UYOutpostCameraModule_CharacterPreview*              m_characterPreviewModule;                                // 0x1B00(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UQBQ[0x8];                                   // 0x1B08(0x0008) MISSED OFFSET (PADDING)

	public:
		void RegisterForHudNotifications();
		void OutpostSectionChanged(EYOutpostSection prevSection, EYOutpostSection newSection);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerController
	 * Size -> 0x0680 (FullSize[0x1140] - InheritedSize[0x0AC0])
	 */
	class AYPlayerController : public AYPlayerControllerBase
	{
	public:
		unsigned char                                              UnknownData_HPH4[0x68];                                  // 0x0AC0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     m_energyWheelInputComponent;                             // 0x0B28(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7A8Y[0x18];                                  // 0x0B30(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_touchPadExtents;                                       // 0x0B48(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U48S[0x4];                                   // 0x0B50(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTouchPadZone                                             m_touchPadStartZone;                                     // 0x0B54(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JYJH[0x13];                                  // 0x0B55(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     m_shortCommandsInputComponent;                           // 0x0B68(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_54ZT[0x28];                                  // 0x0B70(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_hudHelpOverlayOverride;                                // 0x0B98(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  m_aimPostProcessEffect;                                  // 0x0BA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYAimAssistComponent*                                m_aimAssistComponent;                                    // 0x0BA8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AYPawn>                               m_pawn;                                                  // 0x0BB0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class AYPawn*                                              m_pawnToPossess;                                         // 0x0BB8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AYCapturePoint*>                              m_capturePoints;                                         // 0x0BC0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<bool>                                               m_playerRestrictions;                                    // 0x0BD0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FYSpecificMovementControlRestrictions               m_playerSpecificMovementRestrictions;                    // 0x0BE0(0x0006) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I73F[0x2];                                   // 0x0BE6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYPlayerOrbitComponent*                              m_orbitComponent;                                        // 0x0BE8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYPlayerSpectatorComponent*                          m_spectatorComponent;                                    // 0x0BF0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_65OO[0x1];                                   // 0x0BF8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_overlayMenuActive;                                     // 0x0BF9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_70MO[0x6];                                   // 0x0BFA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPlayerCamera*                                      m_playerCamera;                                          // 0x0C00(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_debugStablisationSystem;                               // 0x0C08(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KP93[0x3];                                   // 0x0C09(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_lastTimeMouseWasMoved;                                 // 0x0C0C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EYLS[0x4];                                   // 0x0C10(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_weaponSwapCooldownDelay;                               // 0x0C14(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYProjectileContentReferenceTracker*                 m_referenceTracker;                                      // 0x0C18(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRespawn;                                               // 0x0C20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EYTeam                                                     m_team;                                                  // 0x0C30(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5X5R[0x3];                                   // 0x0C31(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_numberOfSpawns;                                        // 0x0C34(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maximalRespawns;                                       // 0x0C38(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_respawnTimer;                                          // 0x0C3C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_respawnWaveTimer;                                      // 0x0C40(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_forceRespawnWave;                                      // 0x0C44(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6STV[0x3];                                   // 0x0C45(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_respawnWaveTimerMax;                                   // 0x0C48(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_cantRespawnAnymore;                                    // 0x0C4C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A8YQ[0x43];                                  // 0x0C4D(0x0043) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPawnDied;                                              // 0x0C90(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EYPCMatchState                                             m_matchState;                                            // 0x0CA0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JU19[0x7];                                   // 0x0CA1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     m_blockInputComponent;                                   // 0x0CA8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AOIF[0x4];                                   // 0x0CB0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_energyWheelSelectionThreshold;                         // 0x0CB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           m_touchPadSelectionThreshold;                            // 0x0CB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_touchSelectionThreshold;                               // 0x0CC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_shortCommandsSelectionThreshold;                       // 0x0CC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_timeSpentCapturing;                                    // 0x0CC8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_targetingBoxMinRange;                                  // 0x0CCC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VPQG[0x8];                                   // 0x0CD0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTViewTarget                                        m_savedViewTarget;                                       // 0x0CD8(0x03E8) NativeAccessSpecifierPublic
		bool                                                       m_debugCrossHairs;                                       // 0x10C0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M119[0xF];                                   // 0x10C1(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPawnPossessed;                                         // 0x10D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMovementInput;                                         // 0x10E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BUKG[0x50];                                  // 0x10F0(0x0050) MISSED OFFSET (PADDING)

	public:
		void ZoomOut();
		void ZoomIn();
		void YSoloAudio();
		void YSetCinematicMode(bool bInCinematicMode, bool bAffectsHUD);
		void YPlayerControllerDelegate__DelegateSignature(class AYPlayerController* source);
		void YouHaveTheCon(const class FName& clientBotName);
		void YClearSoloAudio();
		void WeaponDebugMode();
		void TriggerMatchStartVO();
		void ToggleVerticalVisualDebug();
		void ToggleThrottleVisualDebug();
		void ToggleSteeringVisualDebug();
		void ToggleSpringVisualDebug();
		void ToggleShowTargetVolumes();
		void ToggleProjectileVisualDebug();
		void ToggleDragVisualDebug();
		void ToggleDebugAbilityPerimiterDefense();
		void ToggleCharacterSelectionHUD(bool IsActive, bool closeRespawnInfoPanel);
		void ToggleAbilityCooldowns();
		void TicketCountPercentageChanged(float team1TicketCountPercentage, float team2TicketCountPercentage, float team1TicketActualScore, float team2TicketActualScore);
		void TestSingleCaptainView();
		void StopServerProfiling();
		void StopClientProfiling();
		void StartMatch();
		bool StartLocalSrvMapInternal(const class FString& mapName, const class FString& gameModeAlias);
		void SpreadChanged(float spread);
		void SoftCollisionDebugMode(int32_t mode);
		void ShowMissileMarkers(int32_t option);
		void ShieldDamageReceived();
		void ShieldAttached();
		void SetViewTargetToSavedViewTargetWithBlend(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
		void SetViewTargetToPerformanceCameraAtIndex(int32_t index);
		void SetTeam(EYTeam Team);
		void SetPlayerRestrictions(bool bRestrictMovements, EYCameraRestrictionType restrictCamera, bool bRestrictAbilities, bool bRestrictWeapons, bool bRestrictSwitchWeapons, bool bRestrictEnergyWheel, bool bRestrictOfficerNotifications, bool bRestrictChat, bool bRestrictScoringSystem, bool bSpectate, EYHudState hudState, bool restrictAbility1, bool restrictAbility2, bool restrictAbility3, bool restrictAbility4, bool restrictShortCommands, bool blockMovementForward, bool blockMovementBackward, bool blockMovementLeft, bool blockMovementRight, bool blockMovementUp, bool blockMovementDown);
		void SetLastTimeMouseWasMoved();
		void SetKillcamTimeUntilDestination(float Time);
		void SetKillcamPlayerHeightOffset(float playerHeight);
		void SetFogActive(bool bActive);
		void SetEnableCharacterSelection(bool canSelectNewCharacters);
		void SetDopplerAudioMultipler(float multipler);
		void SetDebugStablisationSystem(bool Val);
		void SetDebugCrossHairs(bool Val);
		void SetCustomCameraDistance(float newCustomCameraDistance);
		void SetCamRotationRestriction(bool restrictRotation);
		void SetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldFadeWhenFinished);
		class UYShipLoadout* SetActiveLoadoutByName(const class FString& loadoutName);
		void ServerToggleProjectileVisualDebug();
		void ServerTeleportIntoLevel(const struct FVector& teleportingLoc, const struct FRotator& teleportingRot);
		void ServerStartProjectileReplication();
		void ServerStartProfiling(float duration);
		void ServerSpawnNearActor(const class FName& loadoutId, class AActor* targetActor, bool bRespawningForShipClassChange);
		void ServerSetPawnToSpotted(class AInfo* replicationInfo, bool State);
		void ServerSendShortCommand(EYUIShortCommands shortCommandId, class AYPawn* targetPawn);
		void ServerRoundOver();
		void ServerRemoveRespawnFilter(bool forceHudUpdate);
		void ServerReadyForJoining(bool bFirstOrbitSpawn);
		void ServerProfile(float duration);
		void ServerPlayerReadyUpForMatch(bool forcedSpawning);
		void ServerPlayerClickedShipLoadout(const class FName& loadoutId);
		void ServerNotifyReturnToOutpostFromMatch();
		void ServerLogPlayersRating();
		void ServerInitializeMatchSoakTestData();
		void ServerFlushAnalyticsEvents();
		void ServerExecCommand(const class FString& Command);
		void ServerCommand(const class FString& Command);
		void ServerCancelRespawn();
		void ServerApplyRespawnFilter();
		void ServerAbortWaveSpawn();
		void SaveCurrentViewTarget();
		void RoundOver();
		void ReturnToOutpostFromMatch();
		void ResetZoom();
		void ResetCameraRotations();
		void ReplaceShipWithActiveLoadoutForNewRound();
		void ReplaceShipWithActiveLoadout();
		void RemovePlayerRestrictions();
		void ReloadingStartedDuration(int32_t weaponGroup, float reloadingTime);
		void ReloadingChanged(int32_t weaponGroup, bool IsReloading);
		void ProfileHUD();
		void ProfileClient(float duration);
		void ProfileAll(float duration);
		void PlayerToggleRespawnInfoPanel();
		void PlayerReadyUpForMatch();
		void PlayerJoinsMultiplayerMatch();
		void OnTurnRight(float Val);
		void OnToggleShipSelection();
		void OnToggleScoreBoard();
		void OnToggleMenu();
		void OnStopFire();
		void OnStartFire();
		void OnSpectatedLoadoutInitilizedWithPawn(class AYPawn* InPawn);
		void OnShortCommandsUp(float Val);
		void OnShortCommandsRight(float Val);
		void OnRep_Team();
		void OnReload();
		void OnPlayerRepScoringEvent(class AYPlayerReplicationInfo* pri, const struct FYPositiveReinforcement& posReinf);
		void OnPawnDeath();
		void OnPawnChangedBP(class AYPawn* NewPawn);
		void OnOpenShortCommands();
		void OnOpenEnergyWheel();
		void OnNextWeaponGroup();
		void OnMoveUp(float Val);
		void OnMoveForward(float Val);
		void OnLookUpPad(float Val);
		void OnLookUp(float Val);
		void OnLookRightPad(float Val);
		void OnLookRight(float Val);
		void OnLoadoutInitilized();
		void OnInputTouchClick();
		void OnHudHelpOverlayToggledSignature__DelegateSignature(bool isOpened);
		void OnHudHelpOpened();
		void OnHudHelpClosed();
		void OnHandleRespawnInteraction();
		void OnFeat9();
		void OnFeat8();
		void OnFeat7();
		void OnFeat6();
		void OnFeat5();
		void OnFeat4();
		void OnFeat3();
		void OnFeat2();
		void OnFeat12();
		void OnFeat11();
		void OnFeat10();
		void OnFeat1();
		void OnEnergyWheelUp(float Val);
		void OnEnergyWheelTouch(const struct FVector2D& touchVector);
		void OnEnergyWheelRight(float Val);
		void OnCycleCamera();
		void OnCloseShortCommands();
		void OnCloseEnergyWheel();
		void OnChatWhisper();
		void OnChatTeam();
		void OnChatSquad();
		void OnChatAll();
		void OnCapturingCapturePoint(class AYCapturePoint* CP, bool beingCaptured);
		void OnCancelShortCommands();
		void OnCancelEnergyWheel();
		void OnAbilityTwoReleased();
		void OnAbilityTwoPressed();
		void OnAbilityThreeReleased();
		void OnAbilityThreePressed();
		void OnAbilityOneReleased();
		void OnAbilityOnePressed();
		void OnAbilityFourReleased();
		void OnAbilityFourPressed();
		void LogPlayersRating();
		void LogAllPlayersScore();
		bool IsClientSpectating();
		void HideSearchManagerRecalculateWarning();
		void HideCharacterSelectionHUD();
		void HealthChanged(float newHealth);
		int32_t GetYTeam();
		class AYPlayerController* GetYPlayerController();
		class AYPawn* GetYPawn();
		class AYHUD* GetYHUD();
		EYTeam GetTeam();
		int32_t GetShipTier();
		EYShipClass GetShipClass();
		void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
		class UYPlayerSpectatorComponent* GetPlayerSpectatorComponent();
		class AYPlayerCamera* GetPlayerCamera();
		class UYMusicManager* GetMusicManager();
		int32_t GetMaximalRespawns();
		float GetLastTimeMouseWasMove();
		int32_t GetForcedRespawnTimer();
		bool GetDebugStablisationSystem();
		float GetCurrentRespawnWaveTimer();
		float GetCurrentRespawningTimer();
		int32_t GetControllerConfigIndex();
		class UYShipLoadout* GetActiveLoadout();
		void ForceReturnToOutpost();
		void FlushAnalyticsEvents();
		void FireScoringEventForPlayer(EYScoringEventID eventID);
		void EnergyChanged(float Energy);
		void EndClientSpectating();
		void EnableShipVelocityLogOutput(bool enableOutput);
		void EnableDopplerAudioLogOutput(bool outputDopplerLog);
		void EnableActiveSpringDamping();
		void DumpRegObjectives();
		void DisableActiveSpringDamping();
		void DebugPreWeaponMode();
		void DebugPreWeapon();
		void DebugNextWeaponMode();
		void DebugNextWeapon();
		void DebugLoadSettingPreset(int32_t preset);
		void DebugFadeToNormalScreen();
		void ClientWaitForRoundToEnd(float respawnTime);
		void ClientTeleportIntoLevel(const struct FVector& teleportingLoc, const struct FRotator& teleportingRot);
		void ClientStartMatch();
		void ClientSpawnNearActorResult(bool isPawnSpawned);
		void ClientSpawningInGame(const struct FVector& Location, const struct FRotator& Rotation, EYShipClass shipclass);
		void ClientSetRespawnWavetime(float respawnTime, float maxRespawnTime);
		void ClientSetRespawntime(float respawnTime);
		void ClientSetPlayerRestrictions(bool bRestrictMovements, EYCameraRestrictionType restrictCamera, bool bRestrictAbilities, bool bRestrictWeapons, bool bRestrictSwitchWeapons, bool bRestrictEnergyWheel, bool bRestrictOfficerNotifications, bool bRestrictChat, bool bRestrictScoringSystem, bool bSpectate, EYHudState hudState, bool restrictAbility1, bool restrictAbility2, bool restrictAbility3, bool restrictAbility4, bool restrictShortCommands, const struct FYSpecificMovementControlRestrictions& specificMovementRestrictions);
		void ClientSetMatchSoakTestData(EYFleetType usedFleetType);
		void ClientSendShortCommand(EYUIShortCommands shortCommandId, class AYPawn* senderPawn, class AYPawn* targetedPawn);
		void ClientRunTimerForForcedRespawn(int32_t serverTime);
		void ClientReturnToOutpostFromMatchACK();
		void ClientRespawnTeamElimination(float respawnTime);
		void ClientRemoveRespawnFilter(bool forceHudUpdate);
		void ClientPreRoundStart(float preRoundStartDuration);
		void ClientPostRoundEnd();
		void ClientOnScore(int32_t Points, const class FString& Text);
		void ClientNewRoundStarts(int32_t roundNumber, EYLateJoinState serverLateJoinState);
		void ClientMatchOver();
		void ClientMakeSureOrbitTransitionEnded();
		void ClientLeavingMatch();
		void ClientLateJoinWaitingForNewRound(int32_t roundNumber);
		void ClientLateJoinInMatch(int32_t roundNumber);
		void ClientEnableCharacterSelection(bool Value);
		void ClientDisableShipSelection();
		void ClientCapturingCapturePoint(class AYCapturePoint* CP, bool beingCaptured);
		void ClientApplyRespawnFilter();
		void CapturePointOwnerChanged(EYTeam Team, int32_t CPIdx);
		void BlockInput(bool doBlock, bool flushPreviousInput);
		void AmmoChanged(int32_t weaponGroup, int32_t ammo);
		void AddAndActiveLoadoutFromBlueprint(class UClass* loadoutBP);
		void ActiveRespawnCompleted();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerController_Outpost
	 * Size -> 0x00F0 (FullSize[0x1230] - InheritedSize[0x1140])
	 */
	class AYPlayerController_Outpost : public AYPlayerController
	{
	public:
		class UClass*                                              m_globalData;                                            // 0x1140(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_globalDataPS4;                                         // 0x1148(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IJOJ[0x70];                                  // 0x1150(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCameraMoved;                                           // 0x11C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UZK4[0x18];                                  // 0x11D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_UMGPopupClass;                                         // 0x11E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_IntroCutsceneError;                                    // 0x11F0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SKLP[0x7];                                   // 0x11F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYMenu*                                              m_outpostHUD;                                            // 0x11F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_3DCamPreviewInput;                                     // 0x1200(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYOutpostCamera*                                     m_outpostCamera;                                         // 0x1208(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      m_outpostCharacter;                                      // 0x1210(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UYSeasonsPlayerDataManager*                          m_seasonPlayerDataMgr;                                   // 0x1220(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_025E[0x8];                                   // 0x1228(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateItemsUnlockedLastMacht();
		void UnlockEverythingInCurrentShip();
		void ToggleMarketPreview();
		void ToggleCrateAnimation();
		void StartDemoMode();
		bool ShouldSkipIntroVideo();
		void ResetOnboardingFlow();
		void RenderCustomizedCaptainToFile();
		void OnTriggerInitialCharacterCreationFinished();
		void OnOutpostCameraPreviewStateChanged(bool isPreviewing);
		void OnMatchmakingStateChanged(EYMenuMatchMakingState NewState);
		void OnInitialCharacterCreationFinished__DelegateSignature();
		void InterruptCurrentVoiceline();
		class UBlueprintGeneratedClass* GetCurrentLoadoutClass();
		void DebugToggle3DCam();
		void CalloutButtonEnableSlot(EYUILoadoutItemType loadoutType);
		void CalloutButtonEnableByNameAlways(const class FString& buttonID);
		void CalloutButtonEnableByName(const class FString& buttonID);
		void CalloutButtonEnableByID(int32_t buttonID);
		void CalloutButtonDisableByName(const class FString& buttonID);
		void CalloutButtonDisableByID(int32_t buttonID);
		void CalloutAlwaysUnlockButtonDisableByName(const class FString& Name);
		void CalloutAlwaysUnlockButtonDisableByID(int32_t ID);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOutpostCameraModule
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UYOutpostCameraModule : public UObject
	{
	public:
		float                                                      m_previewCameraSpeedMultiplier;                          // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_travelToPreviewSpotSpeed;                              // 0x002C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_cameraRotationCatchingUpSpeed;                         // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O8I5[0x14];                                  // 0x0034(0x0014) MISSED OFFSET (PADDING)

	public:
		void RegisterForHudNotifications();
		bool OnPreviewComponentTypeChanged(EYCameraPreviewComponentType previousType, EYCameraPreviewComponentType NewType);
		void OnOutpostSectionChanged(EYOutpostSection prevSection, EYOutpostSection newSection);
		void OnComponentInPreviewChanged(const struct FCachedItemIDDataEntry& cachedItemData, EYUILoadoutItemType itemType, bool bTeleportToComponent);
		void OnCameraPlayingInterpolation(bool bInterpolationStarts);
		void OnActorInPreviewChanged(class AActor* previewActor);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOutpostCameraModule_CharacterPreview
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UYOutpostCameraModule_CharacterPreview : public UYOutpostCameraModule
	{
	public:
		unsigned char                                              UnknownData_SYAI[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOutpostCameraModule_DefaultPreview
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UYOutpostCameraModule_DefaultPreview : public UYOutpostCameraModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOutpostCameraModule_ShipPreview
	 * Size -> 0x0068 (FullSize[0x00B0] - InheritedSize[0x0048])
	 */
	class UYOutpostCameraModule_ShipPreview : public UYOutpostCameraModule
	{
	public:
		bool                                                       m_animationOnlyOnMeshInPreview;                          // 0x0048(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G5X2[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_animationStartDelay;                                   // 0x004C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C2D6[0x40];                                  // 0x0050(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYShipCustomizationPreview*                          m_shipCustomizationPreview;                              // 0x0090(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H6QO[0x18];                                  // 0x0098(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOutpostCameraModule_PurchasePreview
	 * Size -> 0x0130 (FullSize[0x01E0] - InheritedSize[0x00B0])
	 */
	class UYOutpostCameraModule_PurchasePreview : public UYOutpostCameraModule_ShipPreview
	{
	public:
		unsigned char                                              UnknownData_5LST[0x130];                                 // 0x00B0(0x0130) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YOutpostTransitionManager
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UYOutpostTransitionManager : public UObject
	{
	public:
		float                                                      m_cameraBlendTime;                                       // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_fadeToBlackDuration;                                   // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B1KO[0x50];                                  // 0x0030(0x0050) MISSED OFFSET (PADDING)

	public:
		void TransitionStepCompleted();
		void OnCameraBlend_MoveToHangar(class ACameraActor* startingCam, class ACameraActor* hangarCam, class AYPlayerController_Outpost* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YParticleModuleClampVelocity
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UYParticleModuleClampVelocity : public UParticleModuleVelocityBase
	{
	public:
		float                                                      m_maxVelocity;                                           // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_applyDuringTick : 1;                                   // 0x003C(0x0001) BIT_FIELD Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z5GW[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YParticleModuleLightMaxCount
	 * Size -> 0x0008 (FullSize[0x0140] - InheritedSize[0x0138])
	 */
	class UYParticleModuleLightMaxCount : public UParticleModuleLight
	{
	public:
		int32_t                                                    m_maxNumLights;                                          // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SVCX[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YParticleModuleLocationSequence
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class UYParticleModuleLocationSequence : public UParticleModuleLocation
	{
	public:
		int32_t                                                    m_distributeOverNPointsX;                                // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_distributeOverNPointsY;                                // 0x008C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_distributeOverNPointsZ;                                // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4ZJ2[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YParticleModuleVelInheritParentShip
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UYParticleModuleVelInheritParentShip : public UParticleModuleVelocityInheritParent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YCreepPawn
	 * Size -> 0x0238 (FullSize[0x0E00] - InheritedSize[0x0BC8])
	 */
	class AYCreepPawn : public AYPawn
	{
	public:
		class UDataTable*                                          m_abilityDataTable;                                      // 0x0BC8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_logDebugClientServerSync;                              // 0x0BD0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_drawDebug;                                             // 0x0BD1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_collidesYPawns;                                        // 0x0BD2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ERUG[0x1];                                   // 0x0BD3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_collidesYPawnsSampleFrequency;                         // 0x0BD4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R9AK[0x4];                                   // 0x0BD8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_collidesYPawnsRadius;                                  // 0x0BDC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_collidesYPawnsPredictLocationSeconds;                  // 0x0BE0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_collidesYPawnsDiscardDistanceSqr;                      // 0x0BE4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_tagetableByPlayerWeapons;                              // 0x0BE8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AIDX[0xB];                                   // 0x0BE9(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_allwaysLaunchedFromCapitalShip;                        // 0x0BF4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IDW6[0x63];                                  // 0x0BF5(0x0063) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              m_AITarget2;                                             // 0x0C58(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              m_AITarget3;                                             // 0x0C60(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_evasiveIndexOffset;                                    // 0x0C68(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bFakeWeapon;                                           // 0x0C6C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H8TM[0x3];                                   // 0x0C6D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_fakeWeaponROF;                                         // 0x0C70(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6U78[0x4];                                   // 0x0C74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_fakeWeaponDamage;                                      // 0x0C78(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_fakeWeaponDamageCreep;                                 // 0x0C7C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_fakeWeaponDamageShields;                               // 0x0C80(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_fakeWeaponHeal;                                        // 0x0C84(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bHideWeaponInGame;                                     // 0x0C88(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MHQ3[0x3];                                   // 0x0C89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_MaxSmothDistance;                                      // 0x0C8C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IZ5N[0x4];                                   // 0x0C90(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_minCatchUp;                                            // 0x0C94(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxCatchUp;                                            // 0x0C98(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_adjustCatchUp;                                         // 0x0C9C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AYCreepNavigation*                                   m_serverNextNavigation;                                  // 0x0CA0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             m_serverNavigationOffset;                                // 0x0CA8(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_44WY[0x4];                                   // 0x0CB4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_creepAIController;                                     // 0x0CB8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_APN5[0x30];                                  // 0x0CC0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_affectedByPulses;                                      // 0x0CF0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L1VF[0x37];                                  // 0x0CF1(0x0037) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     m_flightFormationSlow;                                   // 0x0D28(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      m_flightFormationSlowSwapTime;                           // 0x0D38(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             m_formationSlowMaxRand;                                  // 0x0D3C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      m_formationSlowMinIterate;                               // 0x0D48(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_formationSlowMaxIterate;                               // 0x0D4C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FVector>                                     m_flightFormationFight;                                  // 0x0D50(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      m_flightFormationFightSwapTime;                          // 0x0D60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_flightFormationFightDelayTime;                         // 0x0D64(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             m_formationFightMaxRand;                                 // 0x0D68(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      m_formationFightMinIterate;                              // 0x0D74(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_formationFightMaxIterate;                              // 0x0D78(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D4R8[0x4];                                   // 0x0D7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     m_flightFormationFast;                                   // 0x0D80(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      m_flightFormationFastSwapTime;                           // 0x0D90(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             m_formationFastMaxRand;                                  // 0x0D94(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      m_formationFastMinIterate;                               // 0x0DA0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_formationFastMaxIterate;                               // 0x0DA4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_formationSlowToFastRatio;                              // 0x0DA8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HFJO[0x14];                                  // 0x0DAC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_flockPawnOffsets_LinSpeedMax;                          // 0x0DC0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_flockPawnOffsets_LinSpeedMin;                          // 0x0DC4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_flockPawnOffsets_AngSpeedMax;                          // 0x0DC8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_flockPawnOffsets_AngSpeedMin;                          // 0x0DCC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_flockAmount;                                           // 0x0DD0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NWBT[0x1C];                                  // 0x0DD4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_clientCreepPawn;                                       // 0x0DF0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_capitalShiplaunchAudio;                                // 0x0DF8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ReceiveOnRepTeamChange();
		void ReceiveOnJumpOut();
		void OnRep_ServerNextNavigation();
		void OnRep_ServerNavigationOffset();
		void OnRep_evaIndex();
		void OnLaunchedFromCapitalShip();
		void JumpOutMulticast(float jumpOutTimer);
		bool IsMyTeam();
		void ChangeTargetMulticast(class AActor* newTarget);
		void ChangeFlightplanMulticast(TArray<struct FVector> flightPlan);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPawn_RespawnJet
	 * Size -> 0x0010 (FullSize[0x0BD8] - InheritedSize[0x0BC8])
	 */
	class AYPawn_RespawnJet : public AYPawn
	{
	public:
		class UCapsuleComponent*                                   m_explosionComponent;                                    // 0x0BC8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_damageTypeOnCollision;                                 // 0x0BD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YFighterDroneAIController
	 * Size -> 0x00B8 (FullSize[0x08C0] - InheritedSize[0x0808])
	 */
	class AYFighterDroneAIController : public AYCreepAIController
	{
	public:
		class UDataTable*                                          m_abilityDataTable;                                      // 0x0808(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2N6A[0x14];                                  // 0x0810(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_ignoreAllButAbilityTarget;                             // 0x0824(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_escort;                                                // 0x0825(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M2XJ[0x2];                                   // 0x0826(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     m_escortOffset;                                          // 0x0828(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     m_escortOffsetRand;                                      // 0x0838(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RQYF[0x4];                                   // 0x0848(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_engageInDistance;                                      // 0x084C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_engageOutDistance;                                     // 0x0850(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_numberOfAttackRuns;                                    // 0x0854(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_jumpOutCountdown;                                      // 0x0858(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_jumpOutIfOutOfAmmo;                                    // 0x085C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K9BP[0x3];                                   // 0x085D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_findPathMaxExpansions;                                 // 0x0860(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathMaxDistributedSize;                            // 0x0864(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTargetCoverEngageIn;                           // 0x0868(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTargetCoverEngageOut;                          // 0x086C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_findPathTargetCoverPenalty;                            // 0x0870(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxTimeWithoutReplan;                                  // 0x0874(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_waitForDistributedPath;                                // 0x0878(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O5F9[0x8];                                   // 0x087C(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_retargetTime;                                          // 0x0884(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OLLI[0x4];                                   // 0x0888(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_maxTargetDistanceToOwner;                              // 0x088C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HFBK[0x4];                                   // 0x0890(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_boostMultiplyer;                                       // 0x0894(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_boostAngle;                                            // 0x0898(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7ARH[0x24];                                  // 0x089C(0x0024) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YNPCAIClientController
	 * Size -> 0x0018 (FullSize[0x0B50] - InheritedSize[0x0B38])
	 */
	class AYNPCAIClientController : public AYNPCAIController
	{
	public:
		bool                                                       m_autoAbilityUsage;                                      // 0x0B38(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NQ9I[0x7];                                   // 0x0B39(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_defaultAbilityActivationName;                          // 0x0B40(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isIgnoringPawnProximity;                               // 0x0B48(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_68U0[0x7];                                   // 0x0B49(0x0007) MISSED OFFSET (PADDING)

	public:
		class AYPawn* GetBotPawn();
		void AutoSetupSecondaryWeapon();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerAIController
	 * Size -> 0x0028 (FullSize[0x0700] - InheritedSize[0x06D8])
	 */
	class AYPlayerAIController : public AYPawnAIController
	{
	public:
		bool                                                       m_capturesStations;                                      // 0x06D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VG72[0x3];                                   // 0x06D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_flightHeight;                                          // 0x06DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_captureGoalChance;                                     // 0x06E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_engageGoalChance;                                      // 0x06E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYShipClass                                                m_respawnClass;                                          // 0x06E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UCWJ[0x3];                                   // 0x06E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_steeringFPS;                                           // 0x06EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxFireDistance;                                       // 0x06F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxFireDistanceCreeps;                                 // 0x06F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_updateTargetingFrequency;                              // 0x06F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MU41[0x4];                                   // 0x06FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnPlayerPawnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPawnOrbitComponent
	 * Size -> 0x0048 (FullSize[0x0140] - InheritedSize[0x00F8])
	 */
	class UYPawnOrbitComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ETF2[0x48];                                  // 0x00F8(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPeripheralEventMgr
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UYPeripheralEventMgr : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnPeripheralEventMgrInitialized;                         // 0x0028(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMenuSectionSelected;                                   // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadingScreenOpen;                                     // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadingScreenClosed;                                   // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchOutcomeSet;                                       // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnYPlayerControllerPossessedYPawn;                       // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HZLR[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (PADDING)

	public:
		void YPlayerControllerBaseAndYPawnDelegate__DelegateSignature(class AYPlayerControllerBase* source, class AYPawn* pPawn);
		void YMatchOutcomeDelegate__DelegateSignature(EYMatchOutcome outcome);
		void YGameEngineDelegate__DelegateSignature();
		void OnMenuSectionSelected__DelegateSignature(EYOutpostSection outpostSection);
		bool IsInitialized();
		void HandlePlayerPawnChanged(class AYPawn* pPawn);
		void HandleOnPlayerControllerSet(class AYPlayerControllerBase* PlayerController);
		void HandleOnLoadingScreenOpenInternal();
		void HandleOnLoadingScreenClosedInternal();
		void HandleMenuSectionSelected(EYOutpostSection newSection);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPerkManager
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UYPerkManager : public UObject
	{
	public:
		class FString                                              m_perkBPFolderPath;                                      // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_perkUpgradeBaseCost;                                   // 0x0038(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_perkUpgradeRankMultiplier;                             // 0x003C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYPerk*>                                      m_availablePerks;                                        // 0x0040(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		class UObjectLibrary*                                      m_objectLibrary;                                         // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class FString STATIC_RetrievePerkRankDescriber(int32_t rank);
		class UYPerk* RetrievePerkByName(const class FName& Name, int32_t rank);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerCamera
	 * Size -> 0x04F0 (FullSize[0x1A10] - InheritedSize[0x1520])
	 */
	class AYPlayerCamera : public AYPlayerCameraManager
	{
	public:
		unsigned char                                              UnknownData_MMSU[0x45C];                                 // 0x1520(0x045C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            m_offsetToShipRotation;                                  // 0x197C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_656J[0x3C];                                  // 0x1988(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_cameraCollisionTraceExtent;                            // 0x19C4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_cameraCollisionJetFighterTraceExtent;                  // 0x19C8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KHU9[0x2C];                                  // 0x19CC(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_pitchLimit;                                            // 0x19F8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_defaultMouseSensitivity;                               // 0x19FC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J7QY[0x10];                                  // 0x1A00(0x0010) MISSED OFFSET (PADDING)

	public:
		void ResetCameraRotations(class AYPawn* Pawn);
		struct FRotator GetPOVRotation();
		struct FVector GetPOVLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerController_Havoc
	 * Size -> 0x0040 (FullSize[0x1180] - InheritedSize[0x1140])
	 */
	class AYPlayerController_Havoc : public AYPlayerController
	{
	public:
		float                                                      m_deathPenaltyXPPercantage;                              // 0x1140(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_238P[0x4];                                   // 0x1144(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYHavocProgressionComponent*                         m_havocProgressionComponent;                             // 0x1148(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      m_havocCharacter;                                        // 0x1150(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FYChangeDebugShipData>                       m_changeShipDebugShipData;                               // 0x1160(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BLIV[0x10];                                  // 0x1170(0x0010) MISSED OFFSET (PADDING)

	public:
		void UnReadyPlayerForNextWave();
		void TimeToNextWaveChanged(int32_t secondsRemaining);
		void StoreSelectedLoadoutID(const class FName& loadoutId);
		void ServerUnReadyPlayerForNextWave();
		void ServerReceiveSelectedUpgradeIndex(int32_t SlotIndex);
		void ServerReadyUpPlayerForNextWave();
		void SendSelectedUpgrade(const class FName& userSelectedUpgradeID);
		void ReadyUpPlayerForNextWave();
		bool IsReadyForNextWave();
		int32_t GetXP();
		class FName GetSelectedLoadoutID();
		void DeductXP(int32_t xp);
		void ClientReceiveRandSelectedUpgrades(TArray<class FName> randSelectedUpgrades);
		void ClientReceiveBoostPurchaseResult(const class FName& purchasedBoostID, bool isSuccessful);
		void ChangeShipNative(const class FString& shipName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YTerritoryVolume
	 * Size -> 0x0038 (FullSize[0x0430] - InheritedSize[0x03F8])
	 */
	class AYTerritoryVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_0KM0[0xC];                                   // 0x03F8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bDebugShowTiles;                                       // 0x0404(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QVT8[0x2B];                                  // 0x0405(0x002B) MISSED OFFSET (PADDING)

	public:
		void GetAdjustedBoxExtent(struct FVector* Origin, struct FVector* adjExtent);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerController_TER
	 * Size -> 0x01A0 (FullSize[0x12E0] - InheritedSize[0x1140])
	 */
	class AYPlayerController_TER : public AYPlayerController
	{
	public:
		TArray<struct FColor>                                      m_finalTextureData;                                      // 0x1140(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DOZ4[0x8];                                   // 0x1150(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              m_team1BaseColor;                                        // 0x1158(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FColor                                              m_team2BaseColor;                                        // 0x115C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CCBX[0x8];                                   // 0x1160(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYTerritoryVolume*                                   m_gameVolume;                                            // 0x1168(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AYGameState_TER*                                     m_gameState;                                             // 0x1170(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_hudWidgetClass;                                        // 0x1178(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_Territory*                               m_hudWidget;                                             // 0x1180(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYTeam                                                     m_ownerTeam;                                             // 0x1188(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VNZ8[0x3];                                   // 0x1189(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_commandMapSize;                                        // 0x118C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_minimapSize;                                           // 0x1190(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              m_minimapBGColor;                                        // 0x1194(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_UITexWidth;                                            // 0x1198(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_UITexHeight;                                           // 0x119C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_bCommandMapActive;                                     // 0x11A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CR3F[0x11F];                                 // 0x11A1(0x011F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          m_shipTerritoryTexture;                                  // 0x12C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3WFV[0x18];                                  // 0x12C8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnTerritoryUITextureUpdated(class UTexture2D* currentTexture);
		void OnTerritoryUITextureInitialized(int32_t minimapWidth, int32_t minmapHeight);
		void OnSetEnemySpotted(class AYPawn* targetedPawn);
		void InitializeUITexture();
		void CapturePointOwnerChanged(EYTeam Team, int32_t CPIdx);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerController_Tutorial
	 * Size -> 0x0030 (FullSize[0x1170] - InheritedSize[0x1140])
	 */
	class AYPlayerController_Tutorial : public AYPlayerController
	{
	public:
		class UClass*                                              m_deathScreenWidgetClass;                                // 0x1140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         m_deathScreenWidget;                                     // 0x1148(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          m_tutorialLoadScreenTex;                                 // 0x1150(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      m_outpostCharacter;                                      // 0x1158(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5WOM[0x8];                                   // 0x1168(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartMatch();
		void ReturnToOutpost();
		void RestartAtLevelStart();
		void RestartAtCheckpoint();
		void OnPrepareLevelChange(const class FName& levelToOpen, float Delay);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerInputSettings
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UYPlayerInputSettings : public UDataAsset
	{
	public:
		class UCurveFloat*                                         m_Gamepad_LeftX;                                         // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         m_Gamepad_LeftY;                                         // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         m_Gamepad_RightX;                                        // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         m_Gamepad_RightY;                                        // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_debugUMGWidget;                                        // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerInput
	 * Size -> 0x03A0 (FullSize[0x0750] - InheritedSize[0x03B0])
	 */
	class UYPlayerInput : public UPlayerInput
	{
	public:
		class FScriptMulticastDelegate                             OnKeyMappingChanged;                                     // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKeyMappingResetToDefault;                              // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OUSB[0xB0];                                  // 0x03D0(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYAxisModifierLockOnRelease                         m_axisModifierLockOnRelease_Gamepad_LeftY;               // 0x0480(0x0020) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierLockOnRelease                         m_axisModifierLockOnRelease_Gamepad_LeftX;               // 0x04A0(0x0020) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierSuperAccelOnMax                       m_axisModifierSuperAccelOnMax_Gamepad_RightY;            // 0x04C0(0x001C) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierSuperAccelOnMax                       m_axisModifierSuperAccelOnMax_Gamepad_RightX;            // 0x04DC(0x001C) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierSuperAccelOnMax                       m_axisModifierSuperAccelOnMax_Aiming_Gamepad_RightY;     // 0x04F8(0x001C) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierSuperAccelOnMax                       m_axisModifierSuperAccelOnMax_Aiming_Gamepad_RightX;     // 0x0514(0x001C) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierMuliplier                             m_axisModifierMultiplier_Aiming_Gamepad_RightY;          // 0x0530(0x0008) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierMuliplier                             m_axisModifierMultiplier_Aiming_Gamepad_RightX;          // 0x0538(0x0008) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierCurve                                 m_axisModifierCurve_Gamepad_LeftX;                       // 0x0540(0x0003) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierCurve                                 m_axisModifierCurve_Gamepad_LeftY;                       // 0x0543(0x0003) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierCurve                                 m_axisModifierCurve_Gamepad_RightX;                      // 0x0546(0x0003) Config, NativeAccessSpecifierPublic
		struct FYAxisModifierCurve                                 m_axisModifierCurve_Gamepad_RightY;                      // 0x0549(0x0003) Config, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_655C[0x1C];                                  // 0x054C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInputAxisConfigEntry>                       m_localAxisConfigEntry;                                  // 0x0568(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FInputActionKeyMapping>                      m_localInputKeyMappings;                                 // 0x0578(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FInputAxisKeyMapping>                        m_localAxisKeyMappings;                                  // 0x0588(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3JNV[0x18];                                  // 0x0598(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYTouchPadUseType                                          m_touchPadUsage;                                         // 0x05B0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_43F2[0x7];                                   // 0x05B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_touchPadDeadzone;                                      // 0x05B8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_44YU[0x4];                                   // 0x05BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYInputDescription>                          m_inputEvents;                                           // 0x05C0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_1;                                 // 0x05D0(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_1;                                // 0x05E0(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_2;                                 // 0x05E8(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_2;                                // 0x05F8(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_3;                                 // 0x0600(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_3;                                // 0x0610(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_4;                                 // 0x0618(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_4;                                // 0x0628(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_5;                                 // 0x0630(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_5;                                // 0x0640(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_6;                                 // 0x0648(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_6;                                // 0x0658(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_7;                                 // 0x0660(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_7;                                // 0x0670(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_8;                                 // 0x0678(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_8;                                // 0x0688(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_9;                                 // 0x0690(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_9;                                // 0x06A0(0x0008) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYDreadnoughtInputEventMapping>              m_GamePadButtonLayout_10;                                // 0x06A8(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYGamePadSettings                                   m_GamePadSettingLayout_10;                               // 0x06B8(0x0008) Config, Protected, NativeAccessSpecifierProtected
		struct FStringAssetReference                               m_playerInputSettingsPath;                               // 0x06C0(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		struct FYInputAimAssistData                                m_aimAssist;                                             // 0x06D0(0x0028) Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FYInputAimAssistWeapon>                      m_aimAssistWeapon;                                       // 0x06F8(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		bool                                                       m_assitedTargetingActive;                                // 0x0708(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YS1K[0x7];                                   // 0x0709(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UYPlayerInputSettings>                     m_playerInputSettingsPtr;                                // 0x0710(0x001C) ELEMENT_SIZE_MISMATCH Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5P6B[0x4];                                   // 0x072C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UYPlayerInputSettings*                               m_playerInputSettings;                                   // 0x0730(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         m_debugWidget;                                           // 0x0738(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3C3H[0x1];                                   // 0x0740(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_axisFPSIndependent;                                    // 0x0741(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8TAK[0xE];                                   // 0x0742(0x000E) MISSED OFFSET (PADDING)

	public:
		void ToggleGamepadInfo();
		void SetGamepadSensitivityToDefault();
		void SetGamepadSensitivity(float sensitivityX, float sensitivityY);
		void SetGamepadLayout(int32_t Value);
		void ResetLastPlayerInputTime();
		void ResetGamepadLayout();
		void ReloadInputConfig();
		void OnKeyMappingResetToDefault__DelegateSignature(TArray<struct FInputAxisKeyMapping> axesCofigs, TArray<struct FInputActionKeyMapping> actionConfigs);
		void OnKeyMappingChanged__DelegateSignature(const class FName& EventName, bool isKeyboardKey, bool isMouseButton, bool isGamepadKey);
		void OnControllerConnectionChanged(bool connected, int32_t userId, int32_t userIndex);
		bool GetCurrentKeyForInputEvent(struct FKey* Key, const class FName& EventName, EYInputDevice InputDevice);
		void GetCurrentGamepadSensitivity(float* sensitivityX, float* sensitivityY);
		int32_t GetControllerConfigIndex();
		void DumpInputEventMappings();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerMatchStatisticsManager_TEST
	 * Size -> 0x0000 (FullSize[0x0140] - InheritedSize[0x0140])
	 */
	class UYPlayerMatchStatisticsManager_TEST : public UYPlayerMatchStatisticsManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerOrbitComponent
	 * Size -> 0x00D8 (FullSize[0x01D0] - InheritedSize[0x00F8])
	 */
	class UYPlayerOrbitComponent : public UActorComponent
	{
	public:
		class AYPlayerStart*                                       m_playerStartingSpot;                                    // 0x00F8(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CXEP[0xD0];                                  // 0x0100(0x00D0) MISSED OFFSET (PADDING)

	public:
		void TravelBackToOutpost();
		void ServerSetRunningSoaktest();
		void OrbitTransitionCameraPan();
		void OrbitTeleportingSequenceEnds();
		void OnRep_StartingSpot();
		void ClientStartEndOfMatchTransition();
		void CameraPanAnimationFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventManager_Horde
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class UYScoringEventManager_Horde : public UYScoringEventManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerReplicationInfo_PvE
	 * Size -> 0x00C0 (FullSize[0x0A20] - InheritedSize[0x0960])
	 */
	class AYPlayerReplicationInfo_PvE : public AYPlayerReplicationInfo
	{
	public:
		unsigned char                                              UnknownData_ERMZ[0x70];                                  // 0x0960(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYPveRewardsDataRep                                 m_pveRewardsDataRep;                                     // 0x09D0(0x0040) Net, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4Y5Q[0x10];                                  // 0x0A10(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnRep_PveRewardsData();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerReplicationInfo_Havoc
	 * Size -> 0x0040 (FullSize[0x0A60] - InheritedSize[0x0A20])
	 */
	class AYPlayerReplicationInfo_Havoc : public AYPlayerReplicationInfo_PvE
	{
	public:
		unsigned char                                              UnknownData_DCE1[0x8];                                   // 0x0A20(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_currentXP;                                             // 0x0A28(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_currentContributedXP;                                  // 0x0A2C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_lastWaveContributedXP;                                 // 0x0A30(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_lastWaveKills;                                         // 0x0A34(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_lastWaveDeaths;                                        // 0x0A38(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_lastWaveAssists;                                       // 0x0A3C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isInEndOfMatchDataFinalized;                           // 0x0A40(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_readyForNextWave;                                      // 0x0A41(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0OEB[0x1E];                                  // 0x0A42(0x001E) MISSED OFFSET (PADDING)

	public:
		void UnReadyForNextWave();
		void ReadyUpForNextWave();
		void OnRep_XPChanged();
		void OnRep_ReadyForNextWaveChanged();
		void OnClientHighscoreAvailable__DelegateSignature();
		bool IsReadyForNextWave();
		int32_t GetPlayerXP();
		int32_t GetKillsLastWave();
		int32_t GetDeathsLastWave();
		int32_t GetContributedXPLastWave();
		int32_t GetContributedXP();
		int32_t GetAssitsLastWave();
		void DeductXP(int32_t xp);
		void ClientUpdateWeeklyScoreResetTime(int64_t weeklyScoreResetTime);
		void ClientUpdateHighscore(int32_t matchScore, int32_t weeklyPlayerScore, int32_t lifetimePlayerScore);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerSpectatorComponent
	 * Size -> 0x0068 (FullSize[0x0160] - InheritedSize[0x00F8])
	 */
	class UYPlayerSpectatorComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ARNR[0x10];                                  // 0x00F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYSpectatingInitilizationData                       m_initilizationData;                                     // 0x0108(0x0028) Protected, NativeAccessSpecifierProtected
		TArray<class ACameraActor*>                                m_spectatorCameras;                                      // 0x0130(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RFVZ[0x8];                                   // 0x0140(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYKillCamValues                                     m_spectatingPawnSettings;                                // 0x0148(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		void SwitchToSpectatorCamera();
		void StopSpectatingSpecificPawn(class AActor* DestroyedActor);
		void OnStopSpectateSpecificPawn();
		void InitiatePlayerSpectatorCamera();
		void EndClientSpectating();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayersRatingManager
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYPlayersRatingManager : public UObject
	{
	public:
		int32_t                                                    m_teamsRatingUpdateFrequency;                            // 0x0028(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1EXD[0x14];                                  // 0x002C(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPlayerStartHomeBase
	 * Size -> 0x0018 (FullSize[0x0400] - InheritedSize[0x03E8])
	 */
	class AYPlayerStartHomeBase : public ANavigationObjectBase
	{
	public:
		EYTeam                                                     m_team;                                                  // 0x03E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PCD4[0x17];                                  // 0x03E9(0x0017) MISSED OFFSET (PADDING)

	public:
		EYTeam GetPlayerStartTeam();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProgressionManagerBattleServer
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class UYProgressionManagerBattleServer : public UYProgressionManagerBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProgressionUnlockContainer
	 * Size -> 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
	 */
	class UYProgressionUnlockContainer : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_1JM9[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0030(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x0100(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U1IB[0x5];                                   // 0x0103(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0108(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProgressionUnlockContainerBlank
	 * Size -> 0x0000 (FullSize[0x0130] - InheritedSize[0x0130])
	 */
	class UYProgressionUnlockContainerBlank : public UYProgressionUnlockContainer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProgressionUnlockContainerCurrency
	 * Size -> 0x0018 (FullSize[0x0148] - InheritedSize[0x0130])
	 */
	class UYProgressionUnlockContainerCurrency : public UYProgressionUnlockContainer
	{
	public:
		EYCurrency                                                 m_currency;                                              // 0x0130(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RXIV[0x3];                                   // 0x0131(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_amount;                                                // 0x0134(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              m_jsonTableExportPath;                                   // 0x0138(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProgressionUnlockContainerFunction
	 * Size -> 0x0018 (FullSize[0x0148] - InheritedSize[0x0130])
	 */
	class UYProgressionUnlockContainerFunction : public UYProgressionUnlockContainer
	{
	public:
		EYFunctionUnlockType                                       m_functionToUnlock;                                      // 0x0130(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NOK5[0x7];                                   // 0x0131(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_jsonTableExportPath;                                   // 0x0138(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectileBallistic
	 * Size -> 0x0030 (FullSize[0x07A0] - InheritedSize[0x0770])
	 */
	class AYProjectileBallistic : public AYProjectile
	{
	public:
		unsigned char                                              UnknownData_SA36[0x8];                                   // 0x0770(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                m_projectileMeshComponent;                               // 0x0778(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RZMC[0x8];                                   // 0x0780(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_mass;                                                  // 0x0788(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_gravityScale;                                          // 0x078C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxFlightSpeed;                                        // 0x0790(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZBY5[0xC];                                   // 0x0794(0x000C) MISSED OFFSET (PADDING)

	public:
		struct FYProjectileBallisticOfflineDataTableRow GetProjectileOfflineData();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectileMissile
	 * Size -> 0x0110 (FullSize[0x08B0] - InheritedSize[0x07A0])
	 */
	class AYProjectileMissile : public AYProjectileBallistic
	{
	public:
		unsigned char                                              UnknownData_9W4M[0x8];                                   // 0x07A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AYPawn>                               m_target;                                                // 0x07A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_targetSocket;                                          // 0x07B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             m_targetLocation;                                        // 0x07B8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_currentTargetDistanceSquared;                          // 0x07C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_flightTime;                                            // 0x07C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRandomStream                                       m_randomStream;                                          // 0x07CC(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_closeInBoxExtent;                                      // 0x07D4(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_targetMeshBoundsExtent;                                // 0x07E0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_currentSteeringUpDir;                                  // 0x07EC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_currentSideVelocityDir;                                // 0x07F8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F0Z0[0x4];                                   // 0x0804(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_thrustersStarted;                                      // 0x0808(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		bool                                                       m_initialRotationActive;                                 // 0x0809(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		bool                                                       m_steeringStarted;                                       // 0x080A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		bool                                                       m_sidewaysDragActive;                                    // 0x080B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		bool                                                       m_thrustersStopped;                                      // 0x080C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		bool                                                       m_steeringStopped;                                       // 0x080D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1VQ0[0x2];                                   // 0x080E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             m_serverRelativePositionCorrection;                      // 0x0810(0x000C) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_serverRelativePositionCorrectionSmoothVel;             // 0x081C(0x000C) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		float                                                      m_lastFlightDirDragAmount;                               // 0x0828(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_lastSteeringDragAmount;                                // 0x082C(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_lastSidewaysDragAmount;                                // 0x0830(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_closeInRotationMultiplier;                             // 0x0834(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GCAL[0x4];                                   // 0x0838(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_shouldTriggerNukeAlarm;                                // 0x083C(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9A6Q[0xB];                                   // 0x083D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            m_startVelocityRotationOffset;                           // 0x0848(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_targetDirection;                                       // 0x0854(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_thrusterStartDelay;                                    // 0x0860(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_initialRotationDelay;                                  // 0x0864(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_steeringStartDelay;                                    // 0x0868(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_thrusterDuration;                                      // 0x086C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_steeringDuration;                                      // 0x0870(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_thrusterForce;                                         // 0x0874(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_initialRotationInterpolationSpeed;                     // 0x0878(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            m_initialRotationConstantOffset;                         // 0x087C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_initialRotationMaxDeviation;                           // 0x0888(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_rotationInterpolationSpeed;                            // 0x088C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_deviationDuration;                                     // 0x0890(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxRotDeviation;                                       // 0x0894(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_increaseUpdateRateWhenClosingIn;                       // 0x0898(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FGP2[0x3];                                   // 0x0899(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_increasedUpdateRateMinMassFactor;                      // 0x089C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_rotationInterpolationSpeedThrustersOff;                // 0x08A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_targetInitialPosition;                                 // 0x08A4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M913[0xB];                                   // 0x08A5(0x000B) MISSED OFFSET (PADDING)

	public:
		void StopThrusters();
		void StopSteering();
		void SetTarget(class AYPawn* newTarget);
		void OnThrustersStopped();
		void OnThrustersStarted();
		void OnSteeringStopped();
		void OnSteeringActivated();
		void OnInitialRotationActivated();
		void OnDragActivated();
		class AYPawn* GetTarget();
		struct FYProjectileMissileOfflineDataTableRow GetProjectileOfflineData();
		struct FTransform FindTargetTransform(class AYPawn* Target);
		struct FVector FindTargetLocation(class AYPawn* Target, const struct FVector& actorLocation);
		float FindCloseInScalingValue(const struct FVector& locationTowardsExtent);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectileContentReferenceTracker
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYProjectileContentReferenceTracker : public UObject
	{
	public:
		TArray<class UObject*>                                     m_references;                                            // 0x0028(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectileInstanceInfo
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UYProjectileInstanceInfo : public UObject
	{
	public:
		TArray<struct FYDamageLevel>                               m_damageLevel;                                           // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<float>                                              m_amplifiedDamageLevels;                                 // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    m_damageRadius;                                          // 0x0048(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_ignoreShields;                                         // 0x004C(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_friendlyFire;                                          // 0x004D(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_exactHitDetection;                                     // 0x004E(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EYQZ[0x1];                                   // 0x004F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_instigatorIgnoreTime;                                  // 0x0050(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxTravelDistance;                                     // 0x0054(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_initialSpeed;                                          // 0x0058(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_maxFlightSpeed;                                        // 0x005C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_gravityScale;                                          // 0x0060(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_proximityDistance;                                     // 0x0064(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_proximityCheckAgainstCreep;                            // 0x0068(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F9OS[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_hitImpactForce;                                        // 0x006C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_fireRecoilForce;                                       // 0x0070(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_hitzoneDamageMultiplier;                               // 0x0074(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_hitzonePenetrationDistance;                            // 0x0078(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_abilityDamage;                                         // 0x007C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectileReplicator
	 * Size -> 0x0068 (FullSize[0x0160] - InheritedSize[0x00F8])
	 */
	class UYProjectileReplicator : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_NUMB[0x68];                                  // 0x00F8(0x0068) MISSED OFFSET (PADDING)

	public:
		void MulticastProjectileExplosionDataProximityDistanceReached(TArray<struct FYProjectileExplosionDataMinimal> newExplosionData);
		void MulticastProjectileExplosionDataMaxDistanceReached(TArray<struct FYProjectileExplosionDataMinimal> newExplosionData);
		void MulticastProjectileDestroyedOnServer(TArray<struct FYProjectileDestroyedOnServerData> newImpactData);
		void MulticastMissileSteeringData(TArray<struct FYMissileSteeringData> newSteeringData);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectileTracking
	 * Size -> 0x0060 (FullSize[0x0158] - InheritedSize[0x00F8])
	 */
	class UYProjectileTracking : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_LK79[0x60];                                  // 0x00F8(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YPVEEventManager
	 * Size -> 0x0010 (FullSize[0x03D0] - InheritedSize[0x03C0])
	 */
	class AYPVEEventManager : public AActor
	{
	public:
		class AYAICombatSceneManager*                              m_combatSceneManager;                                    // 0x03C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYPVEDifficulty                                            m_previewDifficulty;                                     // 0x03C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C640[0x7];                                   // 0x03C9(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnPVEModeStarted();
		void OnPlayerSpawnedInArena(class AYPawn* playerPawn);
		void OnEnemyNPCKilled(class AYPawn* KilledYPawn, int32_t KilledNPCID);
		void InitializePVEDifficulty();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YDestroyEventManager
	 * Size -> 0x0028 (FullSize[0x03F8] - InheritedSize[0x03D0])
	 */
	class AYDestroyEventManager : public AYPVEEventManager
	{
	public:
		struct FYDestroyModeRuleSet                                m_destroyRulesRecruit;                                   // 0x03D0(0x000C) Edit, NativeAccessSpecifierPublic
		struct FYDestroyModeRuleSet                                m_destroyRulesVeteran;                                   // 0x03DC(0x000C) Edit, NativeAccessSpecifierPublic
		struct FYDestroyModeRuleSet                                m_destroyRulesLegendary;                                 // 0x03E8(0x000C) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CLXX[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHordeEventManager
	 * Size -> 0x0070 (FullSize[0x0440] - InheritedSize[0x03D0])
	 */
	class AYHordeEventManager : public AYPVEEventManager
	{
	public:
		struct FYHordeModeRuleSet                                  m_hordeRulesRecruit;                                     // 0x03D0(0x0024) Edit, NativeAccessSpecifierPublic
		struct FYHordeModeRuleSet                                  m_hordeRulesVeteran;                                     // 0x03F4(0x0024) Edit, NativeAccessSpecifierPublic
		struct FYHordeModeRuleSet                                  m_hordeRulesLegendary;                                   // 0x0418(0x0024) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HH66[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnWaveStateChanged(EYHordeWaveState waveState, int32_t waveIndex);
		int32_t GetNumberOfWaveEnemies();
		int32_t GetMaxNumberOfWaves();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YReplacementTemplateActor
	 * Size -> 0x0000 (FullSize[0x03C0] - InheritedSize[0x03C0])
	 */
	class AYReplacementTemplateActor : public AActor
	{
	public:
		class AStaticMeshActor* SpawnReplacementStaticMeshActor(const struct FTransform& Transform, class UStaticMesh* usedMesh, class UStaticMeshComponent* SourceComponent, class AActor* worldContextActor);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YReputationManager
	 * Size -> 0x0048 (FullSize[0x0140] - InheritedSize[0x00F8])
	 */
	class UYReputationManager : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_BQV9[0x10];                                  // 0x00F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_initialReputation;                                     // 0x0108(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LP9I[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYMatchReputationInfo                               m_matchReputationInfo;                                   // 0x0110(0x0028) Net, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CP16[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_Reputation();
		void OnPlayerReputationChanged__DelegateSignature(class AYPlayerReplicationInfo* owningPRI, int32_t newReputation);
		void Initialize();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YRichTextBlock
	 * Size -> 0x01F8 (FullSize[0x0338] - InheritedSize[0x0140])
	 */
	class UYRichTextBlock : public UTextLayoutWidget
	{
	public:
		class FText                                                Text;                                                    // 0x0140(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FSlateFontInfo                                      DefaultFont;                                             // 0x0158(0x0040) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        DefaultColor;                                            // 0x0198(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FName                                                TextureParameterName;                                    // 0x01A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URichTextBlockDecorator*                             RichTextBlockDecorator;                                  // 0x01B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RST6[0x170];                                 // 0x01B8(0x0170) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     BrushResources;                                          // 0x0328(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void SetText(const class FText& InText);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSaveGame
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UYSaveGame : public USaveGame
	{
	public:
		class FString                                              TestData;                                                // 0x0028(0x0010) Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYSaveGameUserSetting>                       m_graphicsSettings;                                      // 0x0038(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		TArray<struct FYSaveGameUserSetting>                       m_scalabilitySettings;                                   // 0x0048(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		TArray<struct FYSaveGameUserSetting>                       m_advGraphicsSettings;                                   // 0x0058(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		TArray<struct FYSaveGameUserSetting>                       m_audioSettings;                                         // 0x0068(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		TArray<struct FYSaveGameUserSetting>                       m_gameSettings;                                          // 0x0078(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		TArray<struct FYSaveGameUserSetting>                       m_controlsSettings;                                      // 0x0088(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		TArray<struct FYSaveGameUserSetting>                       m_matchmakingSettings;                                   // 0x0098(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		class FName                                                m_pinnedGoal;                                            // 0x00A8(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringAsset
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UYScoringAsset : public UDataAsset
	{
	public:
		class FString                                              m_mmogbrainExportPath;                                   // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          m_scoringTable;                                          // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYScoringFormulaParameters                          m_formulaParameters;                                     // 0x0040(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FYScoringFreeXPParameters                           m_freeXPParameters;                                      // 0x005C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FYScoringFleetCreditsParameters                     m_fleetCreditsParameters;                                // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FYCreditBucket>                              m_creditBuckets;                                         // 0x0070(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    m_maxScorePerMatch;                                      // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CDBI[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYGameModeSpecificParameters>                m_gameModeSpecificMultipliers;                           // 0x0088(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventComponent
	 * Size -> 0x0100 (FullSize[0x01F8] - InheritedSize[0x00F8])
	 */
	class UYScoringEventComponent : public UActorComponent
	{
	public:
		class AYPlayerReplicationInfo*                             m_ownerPRI;                                              // 0x00F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XTF6[0xF8];                                  // 0x0100(0x00F8) MISSED OFFSET (PADDING)

	public:
		void ClientAddAchievement(const struct FYScoringAchievement& achievement);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventManager_Escort
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class UYScoringEventManager_Escort : public UYScoringEventManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventManager_Havoc
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class UYScoringEventManager_Havoc : public UYScoringEventManager_Horde
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventManager_MP
	 * Size -> 0x0070 (FullSize[0x0670] - InheritedSize[0x0600])
	 */
	class UYScoringEventManager_MP : public UYScoringEventManager
	{
	public:
		unsigned char                                              UnknownData_RPEK[0x70];                                  // 0x0600(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventManager_Invasion
	 * Size -> 0x0000 (FullSize[0x0670] - InheritedSize[0x0670])
	 */
	class UYScoringEventManager_Invasion : public UYScoringEventManager_MP
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YScoringEventManager_Territory
	 * Size -> 0x0150 (FullSize[0x07C0] - InheritedSize[0x0670])
	 */
	class UYScoringEventManager_Territory : public UYScoringEventManager_MP
	{
	public:
		unsigned char                                              UnknownData_4O8G[0x150];                                 // 0x0670(0x0150) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSeasonsDataManager
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class UYSeasonsDataManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_BXMM[0x88];                                  // 0x0028(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          m_pveEventsDataTable;                                    // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_pveEventsDataTablePath;                                // 0x00B8(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		class UDataTable*                                          m_pveSeasonsDataTable;                                   // 0x00C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FStringAssetReference                               m_pveSeasonsDataTablePath;                               // 0x00D0(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSeasonsPlayerDataManager
	 * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
	 */
	class UYSeasonsPlayerDataManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_U3IU[0x118];                                 // 0x0028(0x0118) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYSeasonsDataManager*                                m_seasonsDataMgr;                                        // 0x0140(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y3BL[0x8];                                   // 0x0148(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSeasonsDataManager_TEST
	 * Size -> 0x0000 (FullSize[0x00E0] - InheritedSize[0x00E0])
	 */
	class UYSeasonsDataManager_TEST : public UYSeasonsDataManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipCustomizationPreview
	 * Size -> 0x0120 (FullSize[0x04E0] - InheritedSize[0x03C0])
	 */
	class AYShipCustomizationPreview : public AActor
	{
	public:
		unsigned char                                              UnknownData_JC7D[0x18];                                  // 0x03C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_primaryAbility;                                        // 0x03D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_secondaryAbility;                                      // 0x03E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_perimeterAbility;                                      // 0x03E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_internalAbility;                                       // 0x03F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_primaryWeapon;                                         // 0x03F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_secondaryWeapon;                                       // 0x0400(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityMeshPart*                                m_meshPartBridge;                                        // 0x0408(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityMeshPart*                                m_meshPartStern;                                         // 0x0410(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityMeshPart*                                m_meshPartHull;                                          // 0x0418(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityMeshPart*                                m_meshPartForecastle;                                    // 0x0420(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityEmblem*                                  m_emblem;                                                // 0x0428(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityPaint*                                   m_paint;                                                 // 0x0430(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityPattern*                                 m_pattern;                                               // 0x0438(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityDecal*                                   m_decal;                                                 // 0x0440(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_displayInfoString;                                     // 0x0448(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipLoadout*                                       m_appliedShipLoadout;                                    // 0x0458(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              m_mesh;                                                  // 0x0460(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYShipCustomizationComponent*                        m_shipCustomizationComponent;                            // 0x0468(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipClass                                                m_shipClass;                                             // 0x0470(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FSHA[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_shipClassLoadout;                                      // 0x0478(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TAssetPtr<class USkeletalMesh>                             m_skeletalMesh;                                          // 0x0480(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, DisableEditOnTemplate, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6PD1[0x4];                                   // 0x049C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		bool                                                       m_forceUpdate;                                           // 0x04A0(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_weaponMeshesCastShadow;                                // 0x04A1(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_abilityMeshesCastShadow;                               // 0x04A2(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0B6D[0x5];                                   // 0x04A3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_shipMeshDataTablePath;                                 // 0x04A8(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FYMenuPreviewMeshes>                         m_abilityMeshes;                                         // 0x04B8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FYMenuPreviewMeshes>                         m_weaponMeshes;                                          // 0x04C8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class UCameraComponent*                                    m_viewCameraComponent;                                   // 0x04D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateWeaponPreview(class AYWeapon* weaponObj);
		void UpdateFromLoadout(class UYShipLoadout* loadout, bool renderThumbnail);
		void UpdateDisplayInfoString(class UObject* changedObject);
		void UpdateAbilityPreview(class UYAbility* abilityObj);
		void OnShipCustomizationPreviewUpdated__DelegateSignature(class UObject* changedObject);
		void InitForRendering(class AActor* creatingActor);
		class UYShipCustomizationComponent* GetCustomizationComponent();
		class UCameraComponent* GetCameraComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YNPCPawnEditor
	 * Size -> 0x0088 (FullSize[0x0568] - InheritedSize[0x04E0])
	 */
	class AYNPCPawnEditor : public AYShipCustomizationPreview
	{
	public:
		class UClass*                                              m_AIController;                                          // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_shipId;                                                // 0x04E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_totalShips;                                            // 0x04F0(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_currentShip;                                           // 0x04F4(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_nextShip;                                              // 0x04F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_prevShip;                                              // 0x04F9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_createNewShip;                                         // 0x04FA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_deleteCurrentShip;                                     // 0x04FB(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_checkAllValid;                                         // 0x04FC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WAUG[0x3];                                   // 0x04FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYNPCPawnData*                                       m_NPCSet;                                                // 0x0500(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_help;                                                  // 0x0508(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_79ZU[0x7];                                   // 0x0509(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_extraNPCAbility1;                                      // 0x0510(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_extraNPCAbility2;                                      // 0x0518(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_extraNPCAbility3;                                      // 0x0520(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_extraNPCAbility4;                                      // 0x0528(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_officerFirstPerk;                                      // 0x0530(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_officerWeaponPerk;                                     // 0x0538(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_officerNavigationPerk;                                 // 0x0540(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_officerEngineerPerk;                                   // 0x0548(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XJS8[0x18];                                  // 0x0550(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipDebrisActor
	 * Size -> 0x0198 (FullSize[0x0558] - InheritedSize[0x03C0])
	 */
	class AYShipDebrisActor : public AActor
	{
	public:
		TArray<struct FYParameterScalar>                           m_scalarMaterialParameters;                              // 0x03C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FYParameterTexture>                          m_textureMaterialParameters;                             // 0x03D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                m_debrisMesh01Component;                                 // 0x03E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_childDebris01Class;                                    // 0x03E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_childDebris02Class;                                    // 0x03F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     m_initialExplosionParticles;                             // 0x03F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            m_initialExplosionParticleComponent;                     // 0x0400(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_initialExplosionSound;                                 // 0x0408(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     m_disintegrationParticles;                               // 0x0410(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_disintegrationSound;                                   // 0x0418(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     m_environmentImpactParticles;                            // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYShipDebrisInitializationData                      m_debrisInitializationData;                              // 0x0428(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      m_skipTickDistance;                                      // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_25B7[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYParameterVector                                   m_particleGravityParameter;                              // 0x0488(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_childDebrisInitialForce;                               // 0x04A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_initialExplosionParticleOffset;                        // 0x04A8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_particleGravityOnVector;                               // 0x04B4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_particleGravityOffVector;                              // 0x04C0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_389D[0x50];                                  // 0x04CC(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_shipProximityCheckDistance;                            // 0x051C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DRTQ[0x4];                                   // 0x0520(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_environmentCheckDistance;                              // 0x0524(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_scaleDownBeforeDestructionDuration;                    // 0x0528(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_targetRotationRateAngleMin;                            // 0x052C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_targetRotationRateAngleMax;                            // 0x0530(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7FLA[0x8];                                   // 0x0534(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_splitTimeMin;                                          // 0x053C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_splitTimeMax;                                          // 0x0540(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_splitProbability;                                      // 0x0544(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_canSplitIntoChildren;                                  // 0x0548(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DULT[0x3];                                   // 0x0549(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_childDebrisInitialForceRandomOffsetMaxAngle;           // 0x054C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QYK8[0x8];                                   // 0x0550(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartDebrisMovement(const struct FVector& Velocity, const struct FRotator& targetRotationRate);
		void InitializeDebris(const struct FYShipDebrisInitializationData& shipDebrisInitializationData);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityEmblem
	 * Size -> 0x0028 (FullSize[0x0160] - InheritedSize[0x0138])
	 */
	class UYShipVanityEmblem : public UYShipVanityAssetBase
	{
	public:
		class UStaticMesh*                                         m_mesh;                                                  // 0x0138(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_emblemFx;                                              // 0x0140(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_hasEmblemFx;                                           // 0x0148(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ASVR[0x7];                                   // 0x0149(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYShipVanityColorSet*                                m_colorSet;                                              // 0x0150(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useShipColor;                                          // 0x0158(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M10T[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipEmblemPreview
	 * Size -> 0x0010 (FullSize[0x03D0] - InheritedSize[0x03C0])
	 */
	class AYShipEmblemPreview : public AActor
	{
	public:
		class UYShipVanityEmblem*                                  m_emblem;                                                // 0x03C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                m_emblemMesh;                                            // 0x03C8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipLoadoutMmogbrain
	 * Size -> 0x0170 (FullSize[0x0328] - InheritedSize[0x01B8])
	 */
	class UYShipLoadoutMmogbrain : public UYShipLoadout
	{
	public:
		unsigned char                                              UnknownData_436U[0x8];                                   // 0x01B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_jsonTableExportPath;                                   // 0x01C0(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_developmentJsonTableExportPath;                        // 0x01D0(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TAssetPtr<class UClass>                                    m_previousTierLoadout;                                   // 0x01E0(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZQRM[0x4];                                   // 0x01FC(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UClass>                                    m_pawnClass;                                             // 0x0200(0x001C) ELEMENT_SIZE_MISMATCH Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QXQX[0x4];                                   // 0x021C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UClass*                                              m_loadedPawnClass;                                       // 0x0220(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FYItemUIData                                        m_itemUIData;                                            // 0x0228(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYItemMetaData                                      m_itemMetaData;                                          // 0x02F8(0x0003) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J3QS[0x5];                                   // 0x02FB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYItemSystemData                                    m_itemSystemData;                                        // 0x0300(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipLoadoutHero
	 * Size -> 0x0000 (FullSize[0x0328] - InheritedSize[0x0328])
	 */
	class UYShipLoadoutHero : public UYShipLoadoutMmogbrain
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipLoadoutPrecast
	 * Size -> 0x0008 (FullSize[0x0330] - InheritedSize[0x0328])
	 */
	class UYShipLoadoutPrecast : public UYShipLoadoutMmogbrain
	{
	public:
		bool                                                       m_isDevelopmentLoadout;                                  // 0x0328(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1BLT[0x7];                                   // 0x0329(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityColorSet
	 * Size -> 0x00F8 (FullSize[0x0230] - InheritedSize[0x0138])
	 */
	class UYShipVanityColorSet : public UYShipVanityAssetBase
	{
	public:
		bool                                                       m_useBaseColor;                                          // 0x0138(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R1JW[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        m_baseColor;                                             // 0x013C(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useCustomColor01;                                      // 0x014C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QAQG[0x3];                                   // 0x014D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        m_customColor01;                                         // 0x0150(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useCustomColor02;                                      // 0x0160(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JS1U[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        m_customColor02;                                         // 0x0164(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useCustomColor03;                                      // 0x0174(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5O5Z[0x3];                                   // 0x0175(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        m_customColor03;                                         // 0x0178(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useEngineColor;                                        // 0x0188(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A7NT[0x3];                                   // 0x0189(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        m_engineColor;                                           // 0x018C(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_useLightColor;                                         // 0x019C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WZCH[0x3];                                   // 0x019D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        m_lightColor;                                            // 0x01A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_baseMetalic;                                           // 0x01B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_redMetalic;                                            // 0x01B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_greenMetalic;                                          // 0x01B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_blueMetalic;                                           // 0x01BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_baseRoughness01;                                       // 0x01C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_baseRoughness02;                                       // 0x01C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_redRoughness01;                                        // 0x01C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_redRoughness02;                                        // 0x01CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_greenRoughness01;                                      // 0x01D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_greenRoughness02;                                      // 0x01D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_blueRoughness01;                                       // 0x01D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_blueRoughness02;                                       // 0x01DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useTranshumanColor;                                    // 0x01E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PNOA[0x3];                                   // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        m_fresnelColorTranshuman;                                // 0x01E4(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_fresnelMultiplier;                                     // 0x01F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        m_oilyColor01;                                           // 0x01F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FLinearColor                                        m_oilyColor02;                                           // 0x0208(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FLinearColor                                        m_oilyColor03;                                           // 0x0218(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_oilyMultiplier;                                        // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5U2N[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityDecal
	 * Size -> 0x0038 (FullSize[0x0170] - InheritedSize[0x0138])
	 */
	class UYShipVanityDecal : public UYShipVanityAssetBase
	{
	public:
		class UTexture2D*                                          m_texture;                                               // 0x0138(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          m_mask;                                                  // 0x0140(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_usedecalEmissive;                                      // 0x0148(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OS6Q[0x3];                                   // 0x0149(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_decalEmissive;                                         // 0x014C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        m_color;                                                 // 0x0150(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_usedecalRoughness;                                     // 0x0160(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RD1N[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_decalRoughness;                                        // 0x0164(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_usedecalMetalness;                                     // 0x0168(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UERB[0x3];                                   // 0x0169(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_decalMetalness;                                        // 0x016C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityDirtSet
	 * Size -> 0x0018 (FullSize[0x0150] - InheritedSize[0x0138])
	 */
	class UYShipVanityDirtSet : public UYShipVanityAssetBase
	{
	public:
		float                                                      m_dirt;                                                  // 0x0138(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_weathering;                                            // 0x013C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_colorMultiplier;                                       // 0x0140(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_roughnessMultiplier;                                   // 0x0144(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_edgeWear;                                              // 0x0148(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I2A6[0x4];                                   // 0x014C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityPaint
	 * Size -> 0x0010 (FullSize[0x0148] - InheritedSize[0x0138])
	 */
	class UYShipVanityPaint : public UYShipVanityAssetBase
	{
	public:
		class UYShipVanityColorSet*                                m_colorSet;                                              // 0x0138(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UYShipVanityDirtSet*                                 m_dirtSet;                                               // 0x0140(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityPattern
	 * Size -> 0x0038 (FullSize[0x0170] - InheritedSize[0x0138])
	 */
	class UYShipVanityPattern : public UYShipVanityAssetBase
	{
	public:
		TArray<class UTexture2D*>                                  m_colorMaskTextures;                                     // 0x0138(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		EYShipClass                                                m_shipClass;                                             // 0x0148(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_useColorDetailMask;                                    // 0x0149(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NQAH[0x6];                                   // 0x014A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          m_detailColorMask;                                       // 0x0150(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        m_detailColorMaskingChannel;                             // 0x0158(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_detailColorMaskTiling;                                 // 0x0168(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BSTE[0x4];                                   // 0x016C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShipVanityLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYShipVanityLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_MergeShipMeshParts(class USkeletalMeshComponent* shipMeshComponent, TArray<class UYShipVanityMeshPart*> meshParts, bool enqueue, class UObject* context);
		void STATIC_AttachEmblemMesh(class USkeletalMeshComponent* targetMeshComponent, class UStaticMeshComponent* emblemMeshComponent, class UYShipVanityEmblem* emblem);
		void STATIC_ApplyPattern(class USkeletalMeshComponent* shipMeshComponent, class UYShipVanityPattern* Pattern);
		void STATIC_ApplyPaint(class USkeletalMeshComponent* shipMeshComponent, class UYShipVanityPaint* paint);
		void STATIC_ApplyDecal(class USkeletalMeshComponent* shipMeshComponent, class UYShipVanityDecal* decal);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YShop
	 * Size -> 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
	 */
	class UYShop : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnShopCatalogUpdated;                                    // 0x0028(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShopRebuilt;                                           // 0x0038(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShopPurchaseComplete;                                  // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K0Q6[0x160];                                 // 0x0058(0x0160) MISSED OFFSET (PADDING)

	public:
		void ShopCatalogUpdated();
		void OnPlayerInventoryUpdated();
		void OnOfferPurchaseResult(int32_t Result, const class FString& offerId, int32_t quantity);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSoakTestFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYSoakTestFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSoundCueManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UYSoundCueManager : public UObject
	{
	public:
		class USoundCue*                                           missileIncomingCue;                                      // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           energyWheelStartedCue;                                   // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           energyWheelDepletedCue;                                  // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           moduleCooldownFinishedCue;                               // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           moduleActiveFinishedCue;                                 // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USoundCue*                                           matchmakingGenericCue;                                   // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H6SK[0x20];                                  // 0x0058(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSpawnManager
	 * Size -> 0x0020 (FullSize[0x0408] - InheritedSize[0x03E8])
	 */
	class AYSpawnManager : public ANavigationObjectBase
	{
	public:
		float                                                      m_respawnTime;                                           // 0x03E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxShipDistance;                                       // 0x03EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxSpawnAngle;                                         // 0x03F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YM2J[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYShipClass>                                        m_shipClassesToSpawnNearby;                              // 0x03F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSpectatorCamActor
	 * Size -> 0x0000 (FullSize[0x0790] - InheritedSize[0x0790])
	 */
	class AYSpectatorCamActor : public ACameraActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YStackDumper
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYStackDumper : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YStagedTrainingObjectiveBase
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class UYStagedTrainingObjectiveBase : public UDataAsset
	{
	public:
		unsigned char                                              UnknownData_T516[0x4];                                   // 0x0028(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_minShipsDestroyed;                                     // 0x002C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_simplePromptTimer;                                     // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_overlayTimer;                                          // 0x0034(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_repeatOverlayTimer;                                    // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IX71[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_descriptionIdentifier;                                 // 0x0040(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                m_descriptionInObjectiveList;                            // 0x0048(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		bool                                                       m_useCustomPromptPosition;                               // 0x0060(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LJKI[0x3];                                   // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_customPromptPosition;                                  // 0x0064(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    m_completedStepId;                                       // 0x006C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_completedStepName;                                     // 0x0070(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_overlayStepId;                                         // 0x0080(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FPJE[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_overlayStepName;                                       // 0x0088(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5DJZ[0x28];                                  // 0x0098(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSTObjectiveOpenHelpScreen
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class UYSTObjectiveOpenHelpScreen : public UYStagedTrainingObjectiveBase
	{
	public:
		void PlayerOpenedHelpScreen();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSTObjectiveMoveToBattleZone
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class UYSTObjectiveMoveToBattleZone : public UYStagedTrainingObjectiveBase
	{
	public:
		void PlayerEnteredBattleZone();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSTObjectiveTargetHit
	 * Size -> 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
	 */
	class UYSTObjectiveTargetHit : public UYStagedTrainingObjectiveBase
	{
	public:
		float                                                      m_damageThreshold;                                       // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_primaryWeapon;                                         // 0x00C4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4770[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_descriptionIdentifierAlt;                              // 0x00C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XPDD[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void DamageTaken(class AYPawn* targetPawn, class AYPawn* Instigator, class AYWeapon* Weapon, float Damage);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSTObjectiveAbilityActivated
	 * Size -> 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
	 */
	class UYSTObjectiveAbilityActivated : public UYStagedTrainingObjectiveBase
	{
	public:
		int32_t                                                    m_abilityIndex;                                          // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SXES[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_descriptionIdentifierAlt;                              // 0x00C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LLOY[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void AbilityActivated(class AYPawn* firingPawn, class UYAbility* ability);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSTObjectiveEnergyOnWeapons
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class UYSTObjectiveEnergyOnWeapons : public UYStagedTrainingObjectiveBase
	{
	public:
		float                                                      m_damageThreshold;                                       // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SDYW[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void DamageTaken(class AYPawn* targetPawn, class AYPawn* Instigator, class AYWeapon* Weapon, float Damage);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSTObjectiveEnergyOnShields
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class UYSTObjectiveEnergyOnShields : public UYStagedTrainingObjectiveBase
	{
	public:
		float                                                      m_damageThreshold;                                       // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LUJX[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void DamageTaken(class AYPawn* targetPawn, class AYPawn* Instigator, class AYWeapon* Weapon, float Damage);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YSTObjectiveFinishMatch
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class UYSTObjectiveFinishMatch : public UYStagedTrainingObjectiveBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YStagedTrainingObjectiveManager
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class UYStagedTrainingObjectiveManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_SJPA[0x60];                                  // 0x0028(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYSTObjective>                               m_objectives;                                            // 0x0088(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EVXP[0x28];                                  // 0x0098(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                m_defaultObjectiveText;                                  // 0x00C0(0x0018) Edit, NativeAccessSpecifierPrivate
		class AYPlayerController*                                  m_playerController;                                      // 0x00D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void WeaponSpawned();
		void WeaponFired();
		void OnPlayerEnteredBattleZoneSignature__DelegateSignature();
		void OnObjectiveUpdatedSignature__DelegateSignature();
		void OnMatchEndedSignature__DelegateSignature();
		void OnHudHelpOverlayOpenedSignature__DelegateSignature();
		void OnDamageTakenByWeaponSignature__DelegateSignature(class AYPawn* targetPawn, class AYPawn* Instigator, class AYWeapon* Weapon, float Damage);
		void OnAbilityActivatedSignature__DelegateSignature(class AYPawn* firingPawn, class UYAbility* ability);
		void HudHelpOverlayToggled(bool isOpened);
		void EnergyConsumed(float amount);
		void AbilityActivated(class AYPawn* firingPawn, class UYAbility* ability);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YStatistics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYStatistics : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YTeamsBoosterComponent
	 * Size -> 0x0308 (FullSize[0x0330] - InheritedSize[0x0028])
	 */
	class UYTeamsBoosterComponent : public UObject
	{
	public:
		unsigned char                                              UnknownData_T0I3[0x308];                                 // 0x0028(0x0308) MISSED OFFSET (PADDING)

	public:
		void OnPlayerLeftMatch(class APlayerState* playerLeaving);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YTechTreeManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UYTechTreeManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_981O[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (PADDING)

	public:
		void OnTechTreeInitialized__DelegateSignature();
		void InitializeTechTreeServerController();
		void InitializeTechTreeMmogClient();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YThrusterComponent
	 * Size -> 0x0058 (FullSize[0x0150] - InheritedSize[0x00F8])
	 */
	class UYThrusterComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnThrusterStateChangeDelegate;                           // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_soundEngineDrone;                                      // 0x0108(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       m_soundEngineDroneDead;                                  // 0x0110(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NGOO[0x8];                                   // 0x0118(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYThrusterInfo>                              m_thrusterDisplayInfos;                                  // 0x0120(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FYThrusterInstanceInfo>                      m_thruster;                                              // 0x0130(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4967[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateThrusterTop(float inputValue);
		void UpdateThrusterRight(float inputValue);
		void UpdateThrusterLeft(float inputValue);
		void UpdateThrusterFront(float inputValue);
		void UpdateThrusterBottom(float inputValue);
		void UpdateThrusterBack(float inputValue);
		void UpdateEnergyWheelSelection(EYEnergyWheelSelection energyWheelFunction);
		void OnOwningPawnDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const class FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
		void HideThruster();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YThumbnailRenderer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYThumbnailRenderer : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YTutorial
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UYTutorial : public UObject
	{
	public:
		unsigned char                                              UnknownData_BV3Y[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YUIAudioManager
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UYUIAudioManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_025L[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_soundCueManagerBlueprint;                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYSoundCueManager*                                   m_soundCueManager;                                       // 0x0038(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchAudioManager
	 * Size -> 0x0108 (FullSize[0x0148] - InheritedSize[0x0040])
	 */
	class UYEndOfMatchAudioManager : public UYUIAudioManager
	{
	public:
		class UAkAudioEvent*                                       m_eomBonusStartsAppearing;                               // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomFleetStartsAppearing;                               // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomCurrencyAdded;                                      // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomMVPPlayerHighestScoreAppearing;                     // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomMVPPlayerSecondHighestScoreAppearing;               // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomMVPPlayerThirdHighestScoreAppearing;                // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomStatsAppearing;                                     // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomStatsBestOfMatchMedal;                              // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomStatsBestOfTeamMedal;                               // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomStatsAverageCareer;                                 // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomStatsAverageMatch;                                  // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomStatsMatchStatistic;                                // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomStatsSkipping;                                      // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRequeueingPurchaseBattleBonus;                      // 0x00A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRequeueingStarted;                                  // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRequeueingAboutToExpire;                            // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRequeueingTimeExpired;                              // 0x00C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRewardsGenericReward;                               // 0x00C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRewardsIntermediateResult;                          // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRewardsEliteReward;                                 // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRewardsTotalShipReward;                             // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRewardsTotalReward;                                 // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomRewardsSkipping;                                    // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveScoreOpen;                                       // 0x00F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveScoreGameMode;                                   // 0x0100(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveScoreTotal;                                      // 0x0108(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveRewardsEventUnlock;                              // 0x0110(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveRewardsEventUnlockStop;                          // 0x0118(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveRewardsSeasonalUnlock;                           // 0x0120(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveRewardsSeasonalUnlockStop;                       // 0x0128(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveRewardsProgressBar;                              // 0x0130(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveRewardsProgressBarStop;                          // 0x0138(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_eomPveTeamTag;                                         // 0x0140(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YGenericAudioManager
	 * Size -> 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
	 */
	class UYGenericAudioManager : public UYUIAudioManager
	{
	public:
		class UAkAudioEvent*                                       m_buttonOver;                                            // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_buttonClicked;                                         // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_buttonHighlighted;                                     // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_sliderClickedOrDragged;                                // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_dropDownClicked;                                       // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_buttonYesClicked;                                      // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_buttonNoClicked;                                       // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_openEscMenu;                                           // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_closeEscMenu;                                          // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_keyStroke;                                             // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_notificationChat;                                      // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHudAudioManager
	 * Size -> 0x00E0 (FullSize[0x0120] - InheritedSize[0x0040])
	 */
	class UYHudAudioManager : public UYUIAudioManager
	{
	public:
		class UAkAudioEvent*                                       m_hudAbilityAvailable;                                   // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudAbilityStopped;                                     // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudAbilityOnCooldown;                                  // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudEnergyDepleted;                                     // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudHitFlashWeapon;                                     // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudHitFlashAbility;                                    // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudStartIncomingMissile;                               // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudStopIncomingMissile;                                // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudNuclearMissileAlarm;                                // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudEnergyWheelOpened;                                  // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudEnergyWheelMouseOver;                               // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudEnergyWheelActivated;                               // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudEnergyWheelCanceled;                                // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_healthBelowThresholdStart;                             // 0x00A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_healthBelowThresholdStop;                              // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudOpenLoadoutSelection;                               // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudCloseLoadoutSelection;                              // 0x00C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudOpenLoadoutInfo;                                    // 0x00C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudCloseLoadoutInfo;                                   // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudOverlayPromptStarted;                               // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hudOverlayPromptStopped;                               // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_crosshairIdleEntered;                                  // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hostileCrosshairLowRangeEntered;                       // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hostileCrosshairMidRangeEntered;                       // 0x00F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_hostileCrosshairHighRangeEntered;                      // 0x0100(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_friendlyCrosshairLowRangeEntered;                      // 0x0108(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_friendlyCrosshairMidRangeEntered;                      // 0x0110(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_friendlyCrosshairHighRangeEntered;                     // 0x0118(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMenuAudioManager
	 * Size -> 0x0068 (FullSize[0x00A8] - InheritedSize[0x0040])
	 */
	class UYMenuAudioManager : public UYUIAudioManager
	{
	public:
		class UAkAudioEvent*                                       m_menuNotificationSocial;                                // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuNotificationPurchased;                             // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuToasterMessage;                                    // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuSubmitLogin;                                       // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuProceedToHangar;                                   // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuNewQuest;                                          // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuDevCreditsMusicStart;                              // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuDevCreditsMusicStop;                               // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuFleetUnlock;                                       // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuResearchProgressUnlock;                            // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuCustomMatchCountdownStarted;                       // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuCustomMatchCountdownTick;                          // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       m_menuCustomMatchMatchStarting;                          // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YUIFilterNavigationElement
	 * Size -> 0x0008 (FullSize[0x00A8] - InheritedSize[0x00A0])
	 */
	class UYUIFilterNavigationElement : public UYUINavigationElement
	{
	public:
		EYShipBaseClass                                            m_shipBaseClass;                                         // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_includeWeapons;                                        // 0x00A1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_includeHeroLoadouts;                                   // 0x00A2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EYAbilityCategory                                          m_abilityCategory;                                       // 0x00A3(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYOfficerType                                              m_officerType;                                           // 0x00A4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYVanityItemMenuCategorie                                  m_vanityItem;                                            // 0x00A5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EYCharacterVanityItemMenuCategory                          m_charVanityItem;                                        // 0x00A6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NEXV[0x1];                                   // 0x00A7(0x0001) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YUIRenderBaseActor
	 * Size -> 0x0018 (FullSize[0x03D8] - InheritedSize[0x03C0])
	 */
	class AYUIRenderBaseActor : public AActor
	{
	public:
		TArray<int32_t>                                            m_ids;                                                   // 0x03C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NDT0[0x8];                                   // 0x03D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUpdateMeshes();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVehicleMovementComp
	 * Size -> 0x0430 (FullSize[0x05B0] - InheritedSize[0x0180])
	 */
	class UYVehicleMovementComp : public UPawnMovementComponent
	{
	public:
		unsigned char                                              UnknownData_SXFK[0x14];                                  // 0x0180(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_minimunUpdate;                                         // 0x0194(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PBCO[0x40];                                  // 0x0198(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_owner;                                                 // 0x01D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_currentSteering;                                       // 0x01E0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_currentVertical;                                       // 0x01E4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_mass;                                                  // 0x01E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             m_boxExtentsForInertiaCalculation;                       // 0x01EC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             m_centreOfMassOffset;                                    // 0x01F8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y5D6[0x4];                                   // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_centreOfMassSocketName;                                // 0x0208(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FYReplicatedVehicleState                            m_replicatedState;                                       // 0x0210(0x0018) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      m_steeringInput;                                         // 0x0228(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_steeringInputOld;                                      // 0x022C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_throttleInput;                                         // 0x0230(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_throttleInputOld;                                      // 0x0234(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_verticalInput;                                         // 0x0238(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_verticalInputOld;                                      // 0x023C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_currentTurnRightValue;                                 // 0x0240(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_oldTurnRightValue;                                     // 0x0244(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_currentAscendValue;                                    // 0x0248(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_currentAscendValueOld;                                 // 0x024C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_currentDescendValue;                                   // 0x0250(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_currentDescendValueOld;                                // 0x0254(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_rollDampingOverwrite;                                  // 0x0258(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_pitchDampingOverwrite;                                 // 0x025C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BWIW[0x28];                                  // 0x0260(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_gravityZ;                                              // 0x0288(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             m_lastPitchForce;                                        // 0x028C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             m_lastRollForce;                                         // 0x0298(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PC8T[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYPhysicDampingData                                 m_physicDamping;                                         // 0x02A8(0x0010) Edit, NativeAccessSpecifierPublic
		struct FYThrottleData                                      m_throttleForces;                                        // 0x02B8(0x001C) Edit, NativeAccessSpecifierPublic
		struct FYDragData                                          m_dragForces;                                            // 0x02D4(0x000C) Edit, NativeAccessSpecifierPublic
		struct FYVerticalData                                      m_verticalForces;                                        // 0x02E0(0x0038) Edit, NativeAccessSpecifierPublic
		struct FYSteeringData                                      m_steeringForces;                                        // 0x0318(0x0040) Edit, NativeAccessSpecifierPublic
		struct FYSpringDampingData                                 m_springDamping;                                         // 0x0358(0x0028) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W3VB[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMoveForwardInputChanged;                               // 0x0388(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMoveRightInputChanged;                                 // 0x0398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMoveUpInputChanged;                                    // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTurnRightInputChanged;                                 // 0x03B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6R2K[0x8];                                   // 0x03C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshSocket*                                 m_frontSteeringSocket;                                   // 0x03D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_rearSteeringSocket;                                    // 0x03D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_frontPitchSocket;                                      // 0x03E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_rearPitchSocket;                                       // 0x03E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_rightRollSocket;                                       // 0x03F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_leftRollSocket;                                        // 0x03F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_leftRollSocket_TurnRight;                              // 0x0400(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_leftRollSocket_TurnLeft;                               // 0x0408(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_rightRollSocket_TurnRight;                             // 0x0410(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshSocket*                                 m_rightRollSocket_TurnLeft;                              // 0x0418(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_disableActiveSpringDamping;                            // 0x0420(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_cancelZAxisForces;                                     // 0x0421(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KNZ2[0x6];                                   // 0x0422(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYVehicleInputRate                                  m_throttleRate;                                          // 0x0428(0x0018) Edit, NativeAccessSpecifierPrivate
		struct FYVehicleInputRate                                  m_steeringRate;                                          // 0x0440(0x0018) Edit, NativeAccessSpecifierPrivate
		struct FYVehicleInputRate                                  m_verticalRate;                                          // 0x0458(0x0018) Edit, NativeAccessSpecifierPrivate
		float                                                      m_steeringInputInterpolationRateOnDeath;                 // 0x0470(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_steeringInputIncreasedInterpolationRateOnDeath;        // 0x0474(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_throttleInputInterpolationRateOnDeath;                 // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_throttleInputIncreasedInterpolationRateOnDeath;        // 0x047C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_verticalInputInterpolationRateOnDeath;                 // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_verticalInputIncreasedInterpolationRateOnDeath;        // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GTFV[0x128];                                 // 0x0488(0x0128) MISSED OFFSET (PADDING)

	public:
		void StopMovements(bool bDeactivateConstantForces);
		void ServerUpdateVerticalValuesState(float inAscendValue, float inDescendValue);
		void ServerUpdateVerticalInputState(float inVerticalInput);
		void ServerUpdateThrottleState(float inThrottleInput);
		void ServerUpdateSteeringValuesState(float inTurnRightValue);
		void ServerUpdateSteeringInputState(float inSteeringInput);
		void ReenableMovements();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVimInstance
	 * Size -> 0x0018 (FullSize[0x0490] - InheritedSize[0x0478])
	 */
	class UYVimInstance : public UAnimInstance
	{
	public:
		bool                                                       m_isOnCustomizationPreviewActor;                         // 0x0478(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N5IB[0x3];                                   // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FYPreviewAnimData                                   m_previewAnimData;                                       // 0x047C(0x0010) BlueprintVisible, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C2U1[0x4];                                   // 0x048C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnPlayPreviewAnimation();
		bool IsInCustomizationPreview();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVimInstanceAbility
	 * Size -> 0x0028 (FullSize[0x04B8] - InheritedSize[0x0490])
	 */
	class UYVimInstanceAbility : public UYVimInstance
	{
	public:
		unsigned char                                              UnknownData_S3GS[0x18];                                  // 0x0490(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_delayIsActivatedTime;                                  // 0x04A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_delayBeforeCooldownExpiredTime;                        // 0x04AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_22I8[0x4];                                   // 0x04B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isActivatedDebug;                                      // 0x04B4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isOnCooldownDebug;                                     // 0x04B5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YFXA[0x2];                                   // 0x04B6(0x0002) MISSED OFFSET (PADDING)

	public:
		void TriggerDeactivation(int32_t abilityIndex);
		void TriggerCooldownStarted(float cooldownTime);
		void TriggerCooldownExpired(int32_t abilityIndex);
		void TriggerActivation(bool abilitySucceeded, int32_t abilityIndex);
		bool IsDelayIsActivated();
		bool IsDelayBeforeCooldownExpired();
		bool IsAbilityOnCooldown();
		bool IsAbilityActivated();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVimInstanceShip
	 * Size -> 0x0070 (FullSize[0x0500] - InheritedSize[0x0490])
	 */
	class UYVimInstanceShip : public UYVimInstance
	{
	public:
		EYAnimationTriggerState                                    m_triggerState;                                          // 0x0490(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C1DR[0x27];                                  // 0x0491(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYPawn*                                              m_owningPawn;                                            // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_attachToWeapon;                                        // 0x04C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5WFH[0x3];                                   // 0x04C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_weaponGroupIndex;                                      // 0x04C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_weaponIndex;                                           // 0x04C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_attachToAbility;                                       // 0x04CC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7INU[0x3];                                   // 0x04CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_abilityIndex;                                          // 0x04D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_speed;                                                 // 0x04D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_deltaFloatTurn;                                        // 0x04D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_turnAnimationSpeed;                                    // 0x04DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isActiveDebug;                                         // 0x04E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isReloadingDebug;                                      // 0x04E1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		EYAnimationTriggerState                                    m_triggerStateDebug;                                     // 0x04E2(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_43V7[0x5];                                   // 0x04E3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYThrusterPosition>                                 m_thrusterAcceleratingStatesDebug;                       // 0x04E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isAbilityActivatedDebug;                               // 0x04F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isAbilityOnCooldownDebug;                              // 0x04F9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isAbilityTargetLockedDebug;                            // 0x04FA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G1E9[0x5];                                   // 0x04FB(0x0005) MISSED OFFSET (PADDING)

	public:
		void UpdateThrusterState(EYThrusterPosition Type, float newValue);
		void TriggerAbilityLostTarget(int32_t abilityIndex);
		void TriggerAbilityLockTarget(class AYPawn* targetPawn, int32_t abilityIndex);
		void TriggerAbilityCooldownStarted(float cooldownTime);
		void TriggerAbilityCooldownExpired(int32_t abilityIndex);
		void StopReloadWeapon();
		void StartReloadWeapon();
		bool IsThrusterAccellerating(EYThrusterPosition Type);
		bool IsShipReloading();
		bool IsShipReady();
		bool IsShipFiring();
		bool IsShipCooldown();
		bool IsShipCharge();
		bool IsShipActive();
		bool IsAbilityOnCooldown();
		bool IsAbilityLocked();
		bool IsAbilityActivated();
		void InitializeTriggerWeaponDelegates();
		void InitializeTriggerAbilityDelegates();
		void DeactivateWeapon();
		void ActivateWeaponTriggerReady(const struct FYWeaponStateInfo& weaponState);
		void ActivateWeaponTriggerFiring(const struct FYWeaponStateInfo& weaponState);
		void ActivateWeaponTriggerCooldown(const struct FYWeaponStateInfo& weaponState);
		void ActivateWeaponTriggerCharging(const struct FYWeaponStateInfo& weaponState);
		void ActivateWeapon();
		void ActivateAbilityGetsActivated(bool abilitySucceeded, int32_t abilityIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVimInstanceWeapon
	 * Size -> 0x0020 (FullSize[0x04B0] - InheritedSize[0x0490])
	 */
	class UYVimInstanceWeapon : public UYVimInstance
	{
	public:
		unsigned char                                              UnknownData_5SXW[0x2];                                   // 0x0490(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EYAnimationTriggerState                                    m_triggerState;                                          // 0x0492(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SGNY[0x5];                                   // 0x0493(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYWeapon*                                            m_owningWeapon;                                          // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_currentYaw;                                            // 0x04A0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_currentPitch;                                          // 0x04A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7H1I[0x4];                                   // 0x04A8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isActiveDebug;                                         // 0x04AC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isReloadingDebug;                                      // 0x04AD(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		EYAnimationTriggerState                                    m_triggerStateDebug;                                     // 0x04AE(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FPZ1[0x1];                                   // 0x04AF(0x0001) MISSED OFFSET (PADDING)

	public:
		void StopReloadWeapon();
		void StartReloadWeapon();
		bool IsWeaponReloading();
		bool IsWeaponReady();
		bool IsWeaponFiring();
		bool IsWeaponCooldown();
		bool IsWeaponCharge();
		bool IsWeaponActive();
		float GetCurrentYaw();
		float GetCurrentPitch();
		void DeactivateWeapon();
		void ActivateWeapon();
		void ActivateTriggerReady(const struct FYWeaponStateInfo& weaponState);
		void ActivateTriggerFiring(const struct FYWeaponStateInfo& weaponState);
		void ActivateTriggerCooldown(const struct FYWeaponStateInfo& weaponState);
		void ActivateTriggerCharging(const struct FYWeaponStateInfo& weaponState);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVimInstanceWeaponBeam
	 * Size -> 0x0000 (FullSize[0x04B0] - InheritedSize[0x04B0])
	 */
	class UYVimInstanceWeaponBeam : public UYVimInstanceWeapon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVimInstanceWeaponProjectile
	 * Size -> 0x0068 (FullSize[0x0518] - InheritedSize[0x04B0])
	 */
	class UYVimInstanceWeaponProjectile : public UYVimInstanceWeapon
	{
	public:
		unsigned char                                              UnknownData_KXJT[0x50];                                  // 0x04B0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AYProjectileWeapon*                                  m_owningProjWeapon;                                      // 0x0500(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FYVIMProjectileDebugEntry>                   m_barrelStatesDebug;                                     // 0x0508(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		bool IsBarrelReady(const class FName& barrelSocket);
		bool IsBarrelFiring(const class FName& barrelSocket);
		bool IsBarrelCooldown(const class FName& barrelSocket);
		bool IsBarrelCharge(const class FName& barrelSocket);
		void ActivateTriggerBarrelReady(const class FName& barrelSocket, const struct FYWeaponStateInfo& weaponState);
		void ActivateTriggerBarrelFiring(const class FName& barrelSocket, const struct FYWeaponStateInfo& weaponState);
		void ActivateTriggerBarrelCoolingdown(const class FName& barrelSocket, const struct FYWeaponStateInfo& weaponState);
		void ActivateTriggerBarrelCharging(const class FName& barrelSocket, const struct FYWeaponStateInfo& weaponState);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVimInstanceWeaponProjectileAbility
	 * Size -> 0x0028 (FullSize[0x0540] - InheritedSize[0x0518])
	 */
	class UYVimInstanceWeaponProjectileAbility : public UYVimInstanceWeaponProjectile
	{
	public:
		unsigned char                                              UnknownData_BKQ5[0x18];                                  // 0x0518(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_delayIsActivatedTime;                                  // 0x0530(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_delayBeforeCooldownExpiredTime;                        // 0x0534(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DFTM[0x5];                                   // 0x0538(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_isActivatedDebug;                                      // 0x053D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isOnCooldownDebug;                                     // 0x053E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_lockedTargetDebug;                                     // 0x053F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void TriggerLostTarget(int32_t abilityIndex);
		void TriggerLockTarget(class AYPawn* targetPawn, int32_t abilityIndex);
		void TriggerCooldownStarted(float cooldownTime);
		void TriggerCooldownExpired(int32_t abilityIndex);
		bool IsDelayIsActivated();
		bool IsDelayBeforeCooldownExpired();
		bool IsAbilityOnCooldown();
		bool IsAbilityLocked();
		bool IsAbilityActivated();
		void ActivateTriggerGetsActivated(bool abilitySucceeded, int32_t abilityIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVoiceChatComponentWidget
	 * Size -> 0x0028 (FullSize[0x0260] - InheritedSize[0x0238])
	 */
	class UYVoiceChatComponentWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnPlayerSpeakingUpdatedDelegate;                         // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZUM3[0x18];                                  // 0x0248(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetPlayerName(const class FName& UniqueId);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVoiceLine
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UYVoiceLine : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVoiceLineUnique
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UYVoiceLineUnique : public UYVoiceLine
	{
	public:
		int32_t                                                    m_uid;                                                   // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HANK[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UYVoiceLineCategory*                                 m_category;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_duration;                                              // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_genericVOReplayDelay;                                  // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              m_audioEvent;                                            // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioBank*                                        m_audioBank;                                             // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TAssetPtr<class UAnimSequence>                             m_facialAnimation;                                       // 0x0058(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S84U[0x4];                                   // 0x0074(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TArray<struct FYS_VoiceLineSubtitle>                       m_subtitles;                                             // 0x0078(0x0010) Edit, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BCN5[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVoiceLineContainer
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYVoiceLineContainer : public UObject
	{
	public:
		TArray<class UYVoiceLine*>                                 m_voiceLines;                                            // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVOTriggerSystem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UYVOTriggerSystem : public UObject
	{
	public:
		unsigned char                                              UnknownData_YTMH[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVOTriggerSystemDebug
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UYVOTriggerSystemDebug : public UYVOTriggerSystem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YVOTriggerSystemPlayByPlay
	 * Size -> 0x00C0 (FullSize[0x00F8] - InheritedSize[0x0038])
	 */
	class UYVOTriggerSystemPlayByPlay : public UYVOTriggerSystem
	{
	public:
		unsigned char                                              UnknownData_DC6Q[0xA8];                                  // 0x0038(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYVOTriggerEventLinkingEntry>                m_eventLinkingEntrys;                                    // 0x00E0(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		float                                                      m_cooldownUpdateTime;                                    // 0x00F0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_defaultEventCooldownTime;                              // 0x00F4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWarpingComponent
	 * Size -> 0x00D0 (FullSize[0x01C8] - InheritedSize[0x00F8])
	 */
	class UYWarpingComponent : public UActorComponent
	{
	public:
		class AYPawn*                                              m_owningPawn;                                            // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWarpJumpCancel;                                        // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWarpJumpWarmUp;                                        // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWarpJumpBegin;                                         // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWarpJumpEnd;                                           // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_warpOrbitFX_In;                                        // 0x0140(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_warpOrbitFX_Out;                                       // 0x0148(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_warpMapFX_In;                                          // 0x0150(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_warpMapFX_Out;                                         // 0x0158(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_warpMapFX_ChargeUp;                                    // 0x0160(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_warpMapFX_ExitMarker;                                  // 0x0168(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     m_warpDeathFX_In;                                        // 0x0170(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_warpOrbitAudio_In;                                     // 0x0178(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_warpOrbitAudio_Out;                                    // 0x0180(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_warpMapAudio_In;                                       // 0x0188(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_warpMapAudio_Out;                                      // 0x0190(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_chargeUpAudioStart;                                    // 0x0198(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_chargeUpAudioStop;                                     // 0x01A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_warpAnimationDuration;                                 // 0x01A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_spawnWarpInOutDistance;                                // 0x01AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_warpPortalExitDelay;                                   // 0x01B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_warpBeforeTeleportDelay;                               // 0x01B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HUFJ[0x10];                                  // 0x01B8(0x0010) MISSED OFFSET (PADDING)

	public:
		void TriggerWarpJumpWarmUp(const struct FVector& TargetLocation, float warmUpTime);
		void TriggerWarpJumpEnd();
		void TriggerWarpJumpBegin();
		void StartWarpInAnimationMulticast(bool IsInOrbit);
		void PlayWarpJumpOut(bool IsInOrbit, bool supressGenericAudio);
		void PlayWarpJumpIn(bool IsInOrbit, bool supressGenericAudio);
		class UParticleSystem* GetWarpOutParticles();
		class UAkAudioEvent* GetWarpOutAudio();
		class UParticleSystem* GetWarpInParticles();
		class UAkAudioEvent* GetWarpInAudio();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YBeamWeapon
	 * Size -> 0x0250 (FullSize[0x0B20] - InheritedSize[0x08D0])
	 */
	class AYBeamWeapon : public AYWeapon
	{
	public:
		TAssetPtr<class UParticleSystem>                           m_beamHeal;                                              // 0x08D0(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B4IB[0x4];                                   // 0x08EC(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UParticleSystem>                           m_beamDamage;                                            // 0x08F0(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RZFI[0x4];                                   // 0x090C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UParticleSystem>                           m_beamPointer;                                           // 0x0910(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M0DH[0x4];                                   // 0x092C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UParticleSystem>                           m_impactHeal;                                            // 0x0930(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0PZ8[0x4];                                   // 0x094C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UParticleSystem>                           m_impactDamage;                                          // 0x0950(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZLX9[0x4];                                   // 0x096C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UAkAudioEvent*                                       m_soundSwitchMisc;                                       // 0x0970(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_soundSwitchHeal;                                       // 0x0978(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_soundSwitchDamage;                                     // 0x0980(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_impactSoundOn;                                         // 0x0988(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       m_impactSoundOff;                                        // 0x0990(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_resetToDefaultOrientationIfNotFiring;                  // 0x0998(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_beamVisibleWhenOwnerIsDead;                            // 0x0999(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FYFY[0x2];                                   // 0x099A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_currentTargetDistanceSquared;                          // 0x099C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m_damageType;                                            // 0x09A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYDamageLevel>                               m_damageLevel;                                           // 0x09A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYDamageLevel>                               m_amplifiedDamageLevels;                                 // 0x09B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FYDamageLevel>                               m_healLevel;                                             // 0x09C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_54C0[0x1];                                   // 0x09D8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_ignoreShields;                                         // 0x09D9(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_ignorePawns;                                           // 0x09DA(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DUA5[0x5];                                   // 0x09DB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_beamSocketName;                                        // 0x09E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_maxServerDT;                                           // 0x09E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_hitImpactForce;                                        // 0x09EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_fireRecoilForce;                                       // 0x09F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GFPB[0x4];                                   // 0x09F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            m_beamPSC;                                               // 0x09F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent*                            m_impactPSC;                                             // 0x0A00(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y83J[0xF8];                                  // 0x0A08(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_updateParticleDamageLevels;                            // 0x0B00(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_doHealing;                                             // 0x0B01(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_doDamage;                                              // 0x0B02(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N0DD[0x1];                                   // 0x0B03(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               m_currentTarget;                                         // 0x0B04(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HSGM[0x4];                                   // 0x0B0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_targetLockTime;                                        // 0x0B10(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_applyEffectTime;                                       // 0x0B14(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_impactPointInterpolationRate;                          // 0x0B18(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8W4H[0x4];                                   // 0x0B1C(0x0004) MISSED OFFSET (PADDING)

	public:
		void TickHitMisc(class AActor* Target, const struct FVector& impactLocation, float DeltaSeconds);
		void TickHitFriendlyShield(class AActor* Target, const struct FVector& impactLocation, float DeltaSeconds);
		void TickHitFriendly(class AActor* Target, const struct FVector& impactLocation, float DeltaSeconds);
		void TickHitEnemyShield(class AActor* Target, const struct FVector& impactLocation, float DeltaSeconds);
		void TickHitEnemy(class AActor* Target, const struct FVector& impactLocation, float DeltaSeconds);
		void StopShooting();
		void OnSwitchTargetType(EYBeamTargetType targetType);
		bool IsTargetLocked();
		bool IsTargetFriendly();
		void DeactivateAlternateMode();
		float CalculateBaseHealingForDistance(float distanceSquared);
		float CalculateBaseDamageForDistance(float distanceSquared);
		void ActivateAlternateMode(const struct FYBeamModifierEffects& modifierEffects, EYAlternativeBeamType alternativeBeamType);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YProjectileWeapon
	 * Size -> 0x0138 (FullSize[0x0A08] - InheritedSize[0x08D0])
	 */
	class AYProjectileWeapon : public AYWeapon
	{
	public:
		class UYProjectileContentReferenceTracker*                 m_projectileContentReferenceTracker;                     // 0x08D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7WQR[0x88];                                  // 0x08D8(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_projectilesPerShoot;                                   // 0x0960(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_useMultiSourceAudioComponent;                          // 0x0964(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7C1O[0x3];                                   // 0x0965(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBlueprint*                                          m_projectileBaseBlueprint;                               // 0x0968(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                m_projectileDataTableRowName;                            // 0x0970(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FYOrderedProjectileShootingEntry>            m_shootingOrderEntries;                                  // 0x0978(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TAssetPtr<class UParticleSystem>                           m_muzzleEffect;                                          // 0x0988(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6LD6[0x4];                                   // 0x09A4(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		bool                                                       m_isMuzzleFXCullable;                                    // 0x09A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GF06[0x3];                                   // 0x09A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_internalFiringDelay;                                   // 0x09AC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_randomizeSocketOrder;                                  // 0x09B4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X0CB[0x3];                                   // 0x09B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_projectileFiringDelay;                                 // 0x09B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_showTrajectoryIndicatorOnAim;                          // 0x09C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LS82[0x3];                                   // 0x09C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_shootingPitch;                                         // 0x09C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBarrelReady;                                           // 0x09C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBarrelCharging;                                        // 0x09D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBarrelFiring;                                          // 0x09E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBarrelCoolingdown;                                     // 0x09F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ReceiveExecuteReady(const class FName& socket, const struct FTransform& shootingTransform);
		void ReceiveExecuteFiring(const class FName& socket, const struct FTransform& shootingTransform);
		void ReceiveExecuteCooldown(const class FName& socket, const struct FTransform& shootingTransform);
		void ReceiveExecuteCharging(const class FName& socket, const struct FTransform& shootingTransform);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YMissileWeapon
	 * Size -> 0x0008 (FullSize[0x0A10] - InheritedSize[0x0A08])
	 */
	class AYMissileWeapon : public AYProjectileWeapon
	{
	public:
		unsigned char                                              UnknownData_D410[0x8];                                   // 0x0A08(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeaponRocketSwarm
	 * Size -> 0x0000 (FullSize[0x0A10] - InheritedSize[0x0A10])
	 */
	class AYWeaponRocketSwarm : public AYMissileWeapon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWeaponBroadSide
	 * Size -> 0x0018 (FullSize[0x0A20] - InheritedSize[0x0A08])
	 */
	class AYWeaponBroadSide : public AYProjectileWeapon
	{
	public:
		struct FVector                                             m_targetDirection;                                       // 0x0A08(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       m_hasTarget;                                             // 0x0A14(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EC68[0x3];                                   // 0x0A15(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_spreadValue;                                           // 0x0A18(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KKZL[0x4];                                   // 0x0A1C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ShipSelect
	 * Size -> 0x0078 (FullSize[0x0308] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ShipSelect : public UYHUDWidget
	{
	public:
		class UYHUDWidget_ButtonPrompt*                            m_buttonPrompt;                                          // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DGFM[0x1];                                   // 0x0298(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_canSelectShips;                                        // 0x0299(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7DE3[0x6E];                                  // 0x029A(0x006E) MISSED OFFSET (PADDING)

	public:
		void SetSelectedShipLoadout(int32_t selectedIndex);
		void SetHoveredShipLoadout(int32_t hoveredIndex);
		void SetCustomLoadout(int32_t selectedIndex, int32_t customloadoutIndex);
		void OnGamepadLayoutChanged();
		bool GetHoveredShipLoadoutInfo(struct FYShipLoadoutInfo* shipLoadoutInfo);
		void BP_EventShowLockedSelection(bool isLocked);
		void BP_EventSetSelectedLoadout(int32_t selectedIndex);
		void BP_EventSetReadyUpEnabled(bool bEnable);
		void BP_EventSetHighlightedLoadout(int32_t highlightedIndex);
		void BP_EventSetFleetName(const class FString& fleetName);
		void BP_EventSetCanSelect(bool bCanReselectShip);
		void BP_EventPopulateLoadoutSlot(int32_t SlotIndex, const struct FYShipSelectSlotData& slotData);
		void BP_EventClearLoadoutSlot(int32_t SlotIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YEndOfMatchManager
	 * Size -> 0x01A0 (FullSize[0x0430] - InheritedSize[0x0290])
	 */
	class UYEndOfMatchManager : public UYHUDWidget
	{
	public:
		class UInputComponent*                                     m_endOfMatchInputComponent;                              // 0x0290(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ShipSelect*                              m_shipSelectWidget;                                      // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_GameModeHeader*                          m_gameModeHeaderWidget;                                  // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_CountdownTimer*                          m_countdownTimerWidget;                                  // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ScoreBoard*                              m_scoreboardWidget;                                      // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYEOMWidget_HavocResult*                             m_havocResultWidget;                                     // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ButtonPrompt*                            m_buttonPrompts;                                         // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_autoTransitionDelay;                                   // 0x02C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LD2C[0x164];                                 // 0x02CC(0x0164) MISSED OFFSET (PADDING)

	public:
		void StartEndOfMatchFlow();
		void OnPendingApplicationComplete(const class FString& FunctionName);
		void OnInitializationCompleted__DelegateSignature();
		void OnDataApplicationComplete__DelegateSignature(const class FString& FunctionName);
		void OnBlueprintTabClickedInput(EYEOMState NewState);
		void OnBlueprintStateChangeComplete();
		void BP_InitBlueprintLinks(EYGameModeType gameModeType);
		void BP_EventUpdateBonusEarningsBanner(const struct FYEOMBonusEarningsBannerData& bonusEarningsData);
		void BP_EventSetVictoryDefeatBanner(EYMatchOutcome matchOutcome, int32_t allyScore, int32_t enemyScore);
		void BP_EventSetNavigationLabels(const class FText& leftTab, const class FText& rightTab);
		void BP_EventSetFleetEarnings(TArray<int32_t> shipXpList);
		void BP_EventSetEndOfMatchState(EYEOMState NewState, EYGameModeType gameModeType);
		void BP_EventSetEarningsValues(int32_t softCurrencyValue, int32_t shipXpValue, int32_t freeXpValue, bool animateTally);
		void BP_EventSetEarningsTitle(const class FText& earningsLabel);
		void BP_EventSetCaptainNames(const struct FYEOMTeamData& teamData);
		void BP_EventSetBonusEarningsTeamShareLabels(const class FText& titleText, const class FText& percentBonusText, const class FText& notAppliedText, bool isApplied);
		void ApplyHavocProgressionData();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_AbilitySlot
	 * Size -> 0x0030 (FullSize[0x02C0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_AbilitySlot : public UYHUDWidget
	{
	public:
		class UImage*                                              m_iconTexture;                                           // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_nameText;                                              // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_keyText;                                               // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              m_name;                                                  // 0x02A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_maximumTime;                                           // 0x02B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isLockedOn;                                            // 0x02BC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		EYUIAbilityState                                           m_state;                                                 // 0x02BD(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QH5K[0x2];                                   // 0x02BE(0x0002) MISSED OFFSET (PADDING)

	public:
		void BP_EventTimeUpdate(const class FString& cooldownText, float percentComplete);
		void BP_EventStateChanged(EYUIAbilityState NewState);
		void BP_EventSetConsoleLegendIcon(EYPS4ButtonIcon icon);
		void BP_EventInitializeComplete();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_Announcement
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_Announcement : public UYHUDWidget
	{
	public:
		bool                                                       m_isAllowedToBeShown;                                    // 0x0290(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isAnnouncementActive;                                  // 0x0291(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4HH1[0x6];                                   // 0x0292(0x0006) MISSED OFFSET (PADDING)

	public:
		void ShowAnnouncement(const class FString& msg, int32_t duration);
		void SetAllowedToBeShown(bool allowing);
		bool IsAnnouncementActive();
		bool IsAllowedToBeShown();
		void CloseAnnouncement();
		void BP_ShowAnnouncement(const class FString& msg, int32_t duration);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_BaseRoundOver
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_BaseRoundOver : public UYHUDWidget
	{
	public:
		int32_t                                                    m_modeRound;                                             // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_friendlyVictories;                                     // 0x0294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_enemyVictories;                                        // 0x0298(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_draws;                                                 // 0x029C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_playerTeamId;                                          // 0x02A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TVNP[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void StartRoundOverAnimations();
		void SetPlayerTeam(EYTeam Team);
		void SetGameModeRoundResult(int32_t Result);
		void SetGameModeRound(int32_t Round);
		void BP_StartRoundOverAnimations();
		void BP_EventSetPlayerTeam(EYTeam Round);
		void BP_EventSetGameModeRoundResult(int32_t Result);
		void BP_EventSetGameModeRound(int32_t Round);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_RoundOver_TeamElim
	 * Size -> 0x0030 (FullSize[0x02D8] - InheritedSize[0x02A8])
	 */
	class UYHUDWidget_RoundOver_TeamElim : public UYHUDWidget_BaseRoundOver
	{
	public:
		TArray<struct FTeamElimPlayerData>                         m_cachedPlayerElimData;                                  // 0x02A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      m_friendlyIcons;                                         // 0x02B8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      m_enemyIcons;                                            // 0x02C8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetTeamEliminationPlayers(TArray<struct FTeamElimPlayerData> elimData);
		void BP_SetIconTexture(bool bIsFriendly, int32_t iconIndex, class UTexture2D* Texture);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_BaseSetting_PC
	 * Size -> 0x0118 (FullSize[0x03A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_BaseSetting_PC : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_SCSM[0x100];                                 // 0x0290(0x0100) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_shouldConsumeMouseInteraction;                         // 0x0390(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_shouldFocusWidgetOnLMBDown;                            // 0x0391(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_shouldFocusWidgetOnLMBUp;                              // 0x0392(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_shouldFocusWidgetOnMouseWheel;                         // 0x0393(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_settingIdx;                                            // 0x0394(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CFWX[0x10];                                  // 0x0398(0x0010) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DropDownBox_PC
	 * Size -> 0x0038 (FullSize[0x03E0] - InheritedSize[0x03A8])
	 */
	class UYHUDWidget_DropDownBox_PC : public UYHUDWidget_BaseSetting_PC
	{
	public:
		class UClass*                                              m_dropDownItemClass;                                     // 0x03A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_DropDownItem_PC*>                 m_dropDownItems;                                         // 0x03B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UScrollBox*                                          m_scrollBoxWidget;                                       // 0x03C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_scrollBoxMinSize;                                      // 0x03C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_scrollBoxMaxSize;                                      // 0x03D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EUVN[0x8];                                   // 0x03D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateActiveItem(int32_t itemIdx);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DropDownItem_PC
	 * Size -> 0x0078 (FullSize[0x0420] - InheritedSize[0x03A8])
	 */
	class UYHUDWidget_DropDownItem_PC : public UYHUDWidget_BaseSetting_PC
	{
	public:
		unsigned char                                              UnknownData_F5H7[0x8];                                   // 0x03A8(0x0008) Fix Super Size
		class FText                                                m_displayName;                                           // 0x03B0(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FSlateFontInfo                                      m_currentFontInfo;                                       // 0x03C8(0x0040) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_displayNameWidget;                                     // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_maxSize;                                               // 0x0410(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SXTL[0x8];                                   // 0x0418(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateText(const class FText& inDisplayName, const struct FSlateFontInfo& inFontInfo);
		void SetSelected(bool isSelected);
		struct FVector2D GetMaxSize();
		class FText GetDisplayText();
		void BP_SetSelected(bool isSelected);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_SettingType_PC
	 * Size -> 0x0010 (FullSize[0x03B8] - InheritedSize[0x03A8])
	 */
	class UYHUDWidget_SettingType_PC : public UYHUDWidget_BaseSetting_PC
	{
	public:
		unsigned char                                              UnknownData_C909[0x8];                                   // 0x03A8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_CSWU[0x8];                                   // 0x03B0(0x0008) Fix size for supers

	public:
		void UpdateDisplayedData();
		void SetNewSettingValue(float newValue);
		float GetSettingValue();
		class FString GetSettingDisplayName();
		void BP_UpdateDisplayedData();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_Carousel_PC
	 * Size -> 0x0078 (FullSize[0x0430] - InheritedSize[0x03B8])
	 */
	class UYHUDWidget_Carousel_PC : public UYHUDWidget_SettingType_PC
	{
	public:
		struct FSlateFontInfo                                      m_currentFontInfo;                                       // 0x03B8(0x0040) Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FText                                                m_displayName;                                           // 0x03F8(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_displayNameWidget;                                     // 0x0410(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_BaseSetting_PC*                          m_arrowButtonLeft;                                       // 0x0418(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_BaseSetting_PC*                          m_arrowButtonRight;                                      // 0x0420(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IUSR[0x8];                                   // 0x0428(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnArrowClicked(int32_t optionIdx);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DropDownForm_PC
	 * Size -> 0x00D8 (FullSize[0x0490] - InheritedSize[0x03B8])
	 */
	class UYHUDWidget_DropDownForm_PC : public UYHUDWidget_SettingType_PC
	{
	public:
		unsigned char                                              UnknownData_7GE3[0x8];                                   // 0x03B8(0x0008) Fix Super Size
		class FText                                                m_defaultHeaderDisplayText;                              // 0x03C0(0x0018) Edit, BlueprintVisible, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		TArray<class FText>                                        m_displayOptions;                                        // 0x03D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		struct FVector2D                                           m_dropDownBoxOffset;                                     // 0x03E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSlateFontInfo                                      m_headerItemFontInfo;                                    // 0x03F0(0x0040) Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSlateFontInfo                                      m_itemsFontInfo;                                         // 0x0430(0x0040) Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UYHUDWidget_DropDownItem_PC*                         m_dropDownHeaderWidget;                                  // 0x0470(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_DropDownBox_PC*                          m_dropDownMenuWidget;                                    // 0x0478(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_dropDownMenuClass;                                     // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ACRU[0x8];                                   // 0x0488(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateHeaderItem(int32_t idx);
		void OpenDropDownMenu(const struct FVector2D& newViewportPos);
		void CloseDropDownMenu();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_Slider_PC
	 * Size -> 0x0008 (FullSize[0x03C0] - InheritedSize[0x03B8])
	 */
	class UYHUDWidget_Slider_PC : public UYHUDWidget_SettingType_PC
	{
	public:
		class UTextBlock*                                          m_displayNumberWidget;                                   // 0x03B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		float GetSnapInterval();
		struct FVector2D GetSliderRange();
		class FText ConvertValToText(float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TabButton_PC
	 * Size -> 0x0018 (FullSize[0x03C0] - InheritedSize[0x03A8])
	 */
	class UYHUDWidget_TabButton_PC : public UYHUDWidget_BaseSetting_PC
	{
	public:
		class UTextBlock*                                          m_buttonTextWidget;                                      // 0x03A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isSelected;                                            // 0x03B0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JHIT[0xF];                                   // 0x03B1(0x000F) MISSED OFFSET (PADDING)

	public:
		void SetSelected(bool isSelected);
		void SetButtonText(const class FText& Name);
		bool GetIsSelected();
		void BP_OnSelected(bool isSelected);
		void BP_OnInitialize(float buttonMargin);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_UserSettingOption_PC
	 * Size -> 0x0048 (FullSize[0x03F0] - InheritedSize[0x03A8])
	 */
	class UYHUDWidget_UserSettingOption_PC : public UYHUDWidget_BaseSetting_PC
	{
	public:
		class UCanvasPanel*                                        m_settingWidgetContainer;                                // 0x03A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_SettingType_PC*                          m_settingTypeWidget;                                     // 0x03B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_displayNameWidget;                                     // 0x03B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_carouselWidgetClass;                                   // 0x03C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_sliderWidgetClass;                                     // 0x03C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_dropDownWidgetClass;                                   // 0x03D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_gammaImageWidgetClass;                                 // 0x03D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DN70[0x10];                                  // 0x03E0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_UserSettingCategory_PC
	 * Size -> 0x0048 (FullSize[0x03F0] - InheritedSize[0x03A8])
	 */
	class UYHUDWidget_UserSettingCategory_PC : public UYHUDWidget_BaseSetting_PC
	{
	public:
		class UTextBlock*                                          m_displayNameWidget;                                     // 0x03A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        m_settingWidgetContainer;                                // 0x03B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_userSettingWidgetClass;                                // 0x03B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_hotkeySettingWidgetClass;                              // 0x03C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_UserSettingOption_PC*>            m_settingWidgets;                                        // 0x03C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYWidget_HotkeySetting_PC*>                   m_hotkeyWidgets;                                         // 0x03D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QZC4[0x8];                                   // 0x03E8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_HotkeySetting_PC
	 * Size -> 0x00A8 (FullSize[0x0450] - InheritedSize[0x03A8])
	 */
	class UYWidget_HotkeySetting_PC : public UYHUDWidget_BaseSetting_PC
	{
	public:
		class UTextBlock*                                          m_settingDisplayNameWidget;                              // 0x03A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_keyDisplayNameWidget;                                  // 0x03B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LAQW[0x98];                                  // 0x03B8(0x0098) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_BuffIndicator
	 * Size -> 0x0028 (FullSize[0x02B8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_BuffIndicator : public UYHUDWidget
	{
	public:
		bool                                                       m_isBeingDisplayed;                                      // 0x0290(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		EYBuffType                                                 m_buffID;                                                // 0x0291(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YJ2V[0x2];                                   // 0x0292(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_timeRemaining;                                         // 0x0294(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_fadeOutDuration;                                       // 0x0298(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_positionLerpAlpha;                                     // 0x029C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_iconTexture;                                           // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_activeTimeText;                                        // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_originalOffset;                                        // 0x02B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		bool IsDisplayed();
		EYBuffType GetBuffID();
		void Deactivate();
		void BP_DeactivateBlueprint();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_BuffManager
	 * Size -> 0x0040 (FullSize[0x02D0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_BuffManager : public UYHUDWidget
	{
	public:
		TArray<class UYHUDWidget_BuffIndicator*>                   m_buffIndicatorWidgets;                                  // 0x0290(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_BuffIndicator*>                   m_activeBuffIndicators;                                  // 0x02A0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_BuffIndicator*>                   m_activeDebuffIndicators;                                // 0x02B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_debuffOffset;                                          // 0x02C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_useSameLine;                                           // 0x02C4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z197[0x3];                                   // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_buffIncrementSign;                                     // 0x02C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EUY6[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetBuffIndicators(TArray<class UYHUDWidget_BuffIndicator*> buffIndicators);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ButtonPrompt
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ButtonPrompt : public UYHUDWidget
	{
	public:
		TArray<class UYHUDWidget_Legend*>                          m_promptWidgets;                                         // 0x0290(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KQMG[0x8];                                   // 0x02A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetPromptVisible(int32_t index, bool Visible);
		void SetPromptFromBindingName(int32_t index, const class FName& binding, const class FString& Text);
		void SetPromptDisabled(int32_t index, bool Disabled);
		void SetPromptCount(int32_t Count);
		void SetPrompt(int32_t index, EYPS4ButtonIcon icon, const class FString& Text, bool bUsePadding);
		void BP_UsePaddingForIndex(int32_t index, bool bUsePadding);
		void BP_AddPrompt(class UYHUDWidget_Legend** newPrompt);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ComWindow
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ComWindow : public UYHUDWidget
	{
	public:
		void ToggleComWindowTransmission(bool Enabled);
		void SetComWindowTitle(const class FString& title);
		void SetComWindowTextureResource(class UTexture* Texture);
		void SetComWindowSubtitle(const class FString& subtitle);
		void BP_EventShowTransmission(bool Enabled);
		void BP_EventSetWindowImageTexture(class UTexture* Texture);
		void BP_EventSetTitle(const class FString& title);
		void BP_EventSetSubtitle(const class FString& subtitle);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_OrbitMenu
	 * Size -> 0x0048 (FullSize[0x02D8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_OrbitMenu : public UYHUDWidget
	{
	public:
		class UYHUDWidget_PlayerRosterManager*                     m_rosterManager;                                         // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ShipSelect*                              m_shipSelector;                                          // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ShipInfoPanel*                           m_shipInfoPanel;                                         // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_GameModeHeader*                          m_modeHeader;                                            // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_CountdownTimer*                          m_countdownTimerPreMatch;                                // 0x02B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_CountdownTimer*                          m_countdownTimerInMatch;                                 // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_TeamCompManager*                         m_teamCompositionManager;                                // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_orbitMenuInputComponent;                               // 0x02C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_OrbitBuildInAnimationFinished;                         // 0x02D0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZD1D[0x7];                                   // 0x02D1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetSpectatedPlayer(int32_t PlayerIndex);
		void SetReadyState(bool bIsReady);
		bool SetHandlingInput(bool bIsHandlingInput);
		bool IsFighterSpawn();
		void BP_SetOrbitReadyState(EYOrbitReadyState orbitReadyState);
		void BP_ForceOrbitIntroAnimationFinished();
		void BP_ActivateOrbitScreen();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_CountdownTimer
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_CountdownTimer : public UYHUDWidget
	{
	public:
		void BP_SetTimeRemaining(int32_t secondsRemaining, const class FText& secondsAsText);
		void BP_SetDescription(const class FText& remainingTimeDescription);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_Crosshair
	 * Size -> 0x0048 (FullSize[0x02D8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_Crosshair : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_04IR[0xC];                                   // 0x0290(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_ShouldDrawOffCenterLine;                               // 0x029C(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_ShouldDrawOffCenterJuicedLine;                         // 0x029D(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U43Y[0x2];                                   // 0x029E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_OffCenterLineOrigin;                                   // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_OffCenterLineDestination;                              // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_OffCenterLineSegmentLength;                            // 0x02B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_offCenterLineSegmentHiddenFraction;                    // 0x02B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_offCenterLineBaseColor;                                // 0x02B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_offCenterLineJuiceColor;                               // 0x02C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void BP_EventUpdateRangeIndicator(EYCrosshairRangeType rangeType, bool IsFriendly);
		void BP_EventUpdatePrecision(float precisionFraction);
		void BP_EventUpdatePosition(float posX, float posY);
		void BP_EventUpdateLineToCenter(float fromX, float fromY);
		void BP_EventUpdateJuice();
		void BP_EventUpdateHit(EYHitIndicatorType flashType);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DamageFeedback
	 * Size -> 0x0080 (FullSize[0x0310] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_DamageFeedback : public UYHUDWidget
	{
	public:
		int32_t                                                    m_maxAmountOfNumbersSpawned;                             // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_offsetFromHitActor;                                    // 0x0294(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_moveAngleRange_nonAccumulated;                         // 0x029C(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F6GD[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector2D>                                   m_moveAngleRanges_accWeapon;                             // 0x02A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_moveAngleRange_accAbility;                             // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_damageColor;                                           // 0x02C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_healingColor;                                          // 0x02D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               m_cachedCurrentHitActor;                                 // 0x02E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              m_numberWidgetClass;                                     // 0x02E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_DamageFeedbackNumber*>            m_numberWidgetPool;                                      // 0x02F0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P5AJ[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (PADDING)

	public:
		bool IsIdle();
		float GetTimeAlive();
		class AActor* GetHitActor();
		void Deactivate();
		void BP_Update();
		void BP_OnHandleDamage();
		void BP_Deactivate();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DamageFeedbackManager
	 * Size -> 0x0030 (FullSize[0x02C0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_DamageFeedbackManager : public UYHUDWidget
	{
	public:
		int32_t                                                    m_maxAmountOfHitActors;                                  // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_minDamageAmount;                                       // 0x0294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_feedbackWidgetClass;                                   // 0x0298(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_DamageFeedback*>                  m_feedbackWidgets;                                       // 0x02A0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VWNV[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DamageFeedbackNumber
	 * Size -> 0x0070 (FullSize[0x0300] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_DamageFeedbackNumber : public UYHUDWidget
	{
	public:
		struct FYDamageNumberPropertyTuning                        m_accumulatedNumbersProps;                               // 0x0290(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FYDamageNumberPropertyTuning                        m_individualNumbersProps;                                // 0x02A8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      m_accumulatedDamage;                                     // 0x02C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_currentTimeMoving;                                     // 0x02C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_targetOffset;                                          // 0x02C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_relativeSpawnLocation;                                 // 0x02D0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J3TF[0x24];                                  // 0x02DC(0x0024) MISSED OFFSET (PADDING)

	public:
		bool IsIdle();
		bool IsAbilityNumber();
		float GetTimeAlivePercentage();
		float GetMinWidgetScale();
		float GetMaxMovementDuration();
		float GetMaxDamageWidgetSize();
		float GetLifeTimeAfterDamage();
		float GetInitialOffsetLength();
		float GetBounceForce();
		void BP_Update();
		void BP_SetFont();
		void BP_OnHandleDamage(const class FText& newDmgNumber, float relativeSize, const struct FLinearColor& Color);
		void BP_Activate(const class FText& newDmgNumber, float relativeSize, const struct FLinearColor& Color);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DamageIndicators
	 * Size -> 0x0060 (FullSize[0x02F0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_DamageIndicators : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_UD6C[0x48];                                  // 0x0290(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_indicatorDecayRate;                                    // 0x02D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZNAN[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYHUDWidget_DmgIndicatorSegment*>             m_damageIndicatorSegments;                               // 0x02E0(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void BP_EventUpdateDamageIndicators();
		void BP_EventApplyDamageOnIndicator(int32_t SegmentIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DeathRecap
	 * Size -> 0x0030 (FullSize[0x02C0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_DeathRecap : public UYHUDWidget
	{
	public:
		class UYHUDWidget_DeathRecapEntry*                         m_deathRecapKillingBlowEntry;                            // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_DeathRecapEntry*>                 m_deathRecapAssistEntries;                               // 0x0298(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UYHUDWidget_ButtonPrompt*                            m_buttonPrompts;                                         // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_deathRecapInputComponent;                              // 0x02B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X1O5[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void BP_EventShowDeathRecap(bool showDeathRecap);
		void BP_EventShowAssistContent(bool showAssistContent);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DeathRecapEntry
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_DeathRecapEntry : public UYHUDWidget
	{
	public:
		void BP_EventSetShipData(class UTexture2D* shipClassIcon, class UTexture2D* shipImage);
		void BP_EventSetIsKillingBlowSlot(bool isKillingBlowSlot);
		void BP_EventSetDamageSourceData(const class FString& damageSourceName, class UTexture2D* damageSourceIcon, class UTexture2D* sourceCategoryIcon, int32_t sourceTier);
		void BP_EventSetDamageAmount(int32_t DamageAmount);
		void BP_EventSetCaptainData(const class FString& captainName, class UTexture2D* captainIcon);
		void BP_EventClearEntry();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_DmgIndicatorSegment
	 * Size -> 0x0020 (FullSize[0x02B0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_DmgIndicatorSegment : public UYHUDWidget
	{
	public:
		class UImage*                                              m_minorSegment_1;                                        // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              m_minorSegment_2;                                        // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              m_flashSegment;                                          // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetAnimation*                                    m_flashSegmentAnimation;                                 // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_EnergyWheelSelector
	 * Size -> 0x0078 (FullSize[0x0308] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_EnergyWheelSelector : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_XNU3[0x58];                                  // 0x0290(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetAnimation*                                    m_fadeInAnimation;                                       // 0x02E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_fadeOutAnimation;                                      // 0x02F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_unselectedAlpha;                                       // 0x02F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_selectedAlpha;                                         // 0x02FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MH5G[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetToggleEnergyWheel(int32_t currentEnergyWheelSelection);
		void SetHighlighted(bool isHighlighted, int32_t EnergyWheelSelection, bool shouldForceVisibilityChange);
		void SetEnergyWheelSelection(int32_t EnergyWheelSelection, bool doAnimate);
		void SetColoredElementsFor(EYEnergyWheelSelection Selection, TArray<class UImage*> elements, EYUIColorStyle activeColorStyle, EYUIColorStyle inactiveColorStyle);
		void SetAnimationsFor(EYEnergyWheelSelection Selection, class UWidgetAnimation* activateAnim, class UWidgetAnimation* deactivateAnim);
		void SetAlphaElementFor(EYEnergyWheelSelection Selection, class UImage* element);
		void ResetEnergyWheelSelection();
		void ForceCloseEnergyWheel();
		void BP_SetHighlighted(bool isHighlighted, int32_t EnergyWheelSelection);
		void BP_OnWheelSelection(int32_t EnergyWheelSelection, int32_t numLoops);
		void BP_OnWheelOpened();
		void BP_OnWheelClosed(bool shouldForceClose);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_FeedbackAnimation
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_FeedbackAnimation : public UYHUDWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_FeedbackAnimationManager
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_FeedbackAnimationManager : public UYHUDWidget
	{
	public:
		void BP_EventStopAllAnimations();
		void BP_EventPlayAnimation(EYFeedbackAnimationType animationType, TArray<EYBuffType> buffIcons, const class FString& displayText, float buffFeedbackAnimationDisplayTime);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModeDeathmatch
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModeDeathmatch : public UYHUDWidget
	{
	public:
		void BP_EventSetTeamState(int32_t allyPercent, int32_t enemyPercent, int32_t allyValue, int32_t enemyValue);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModeHavoc
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModeHavoc : public UYHUDWidget
	{
	public:
		class UVerticalBox*                                        m_bossHealthContainer;                                   // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_bossHealthWidgetClass;                                 // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void BP_SetWaveProgress(int32_t currentWaveNumber, int32_t enemiesNum, int32_t enemiesKilled, int32_t numberOfRelevantEnemiesSpawnedFromBridgeheads);
		void BP_SetTeamState(TArray<int32_t> playeShipClasses, TArray<bool> wasPlayerEliminated);
		void BP_SetActiveWaveModifiers(const struct FYUIHavocModifier& modifier1, const struct FYUIHavocModifier& modifier2);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModeHavoc_BossHealth
	 * Size -> 0x0020 (FullSize[0x02B0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModeHavoc_BossHealth : public UYHUDWidget
	{
	public:
		class UTextBlock*                                          m_nameTextBox;                                           // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_healthTextBox;                                         // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        m_healthBar;                                             // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HBLH[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnLinkedPawnHealthModified(float newHealth);
		void OnLinkedPawnDied();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModeHeader
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModeHeader : public UYHUDWidget
	{
	public:
		void BP_OnModeChanged(const class FText& modeName);
		void BP_OnMapChanged(const class FText& mapName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModeHorde
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModeHorde : public UYHUDWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModeManager
	 * Size -> 0x0020 (FullSize[0x02B0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModeManager : public UYHUDWidget
	{
	public:
		class UYHUDWidget_GameModeDeathmatch*                      m_gameModeDeathmatchWidget;                              // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_GameModeHavoc*                           m_gameModeHavocWidget;                                   // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_GameModeTeamElim*                        m_gameModeTeamEliminationWidget;                         // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_maximumGameModeScore;                                  // 0x02A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYGameModeType                                             m_gameModeType;                                          // 0x02AC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OMFS[0x3];                                   // 0x02AD(0x0003) MISSED OFFSET (PADDING)

	public:
		void BP_EventSetTimeHeadline(const class FString& headlineText);
		void BP_EventSetTime(int32_t Time);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModePanelBase
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModePanelBase : public UYHUDWidget
	{
	public:
		void SetTime(int32_t Time);
		void SetHeader(const class FString& Header);
		void BP_SetTime(int32_t Time);
		void BP_SetHeaderText(const class FString& Header);
		void BP_SetGameModeRoundResult(int32_t Result);
		void BP_SetGameModeRound(int32_t Round);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_GameModeTeamElim
	 * Size -> 0x0058 (FullSize[0x02E8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_GameModeTeamElim : public UYHUDWidget_GameModePanelBase
	{
	public:
		TArray<class UImage*>                                      m_friendlyIcons;                                         // 0x0290(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      m_enemyIcons;                                            // 0x02A0(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_roundTimeRemaining;                                    // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_friendlyScoreText;                                     // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_enemyScoreText;                                        // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_playerTeamId;                                          // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_friendlyScore;                                         // 0x02CC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_enemyScore;                                            // 0x02D0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5KPN[0x14];                                  // 0x02D4(0x0014) MISSED OFFSET (PADDING)

	public:
		void BP_SetScore(bool bIsFriendly, int32_t Score);
		void BP_SetIconTexture(bool bIsFriendly, int32_t iconIndex, class UTexture2D* Texture);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HavocProgressionMenu
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HavocProgressionMenu : public UYHUDWidget
	{
	public:
		class UYHUDWidget_HavocProgressionMenu_UpgradesList*       m_upgradesWidget;                                        // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_inputComponent;                                        // 0x0298(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isLoadoutUpgradeWave;                                  // 0x02A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OQZQ[0x7];                                   // 0x02A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetSelectedUpgrade(int32_t index);
		void ReadyUpFromBlueprint();
		void BP_EventSetPlayerIsReadyForNextWave(bool IsReady);
		void BP_EventSetAvailableXp(int32_t availableXp);
		void BP_EventSelectedUpgradeStateChanged(EYHavocUpgradeState selectedUpgradeState);
		void ActivateSelectedUpgrade(int32_t index);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HavocProgressionMenu_AcquiredBoostItem
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HavocProgressionMenu_AcquiredBoostItem : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_83IC[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUpdateIcon(class UTexture2D* iconPath);
		void OnAmountChanged(int32_t amount);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HavocProgressionMenu_AcquiredBoostsList
	 * Size -> 0x0068 (FullSize[0x02F8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HavocProgressionMenu_AcquiredBoostsList : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_T4JW[0x50];                                  // 0x0290(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHorizontalBox*                                      m_havocAcquiredBoostsContainer;                          // 0x02E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         m_voiceChatContainer;                                    // 0x02E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_havocAcquiredBoostItemClass;                           // 0x02F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HavocProgressionMenu_UpgradeItem
	 * Size -> 0x01C0 (FullSize[0x0450] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HavocProgressionMenu_UpgradeItem : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_4ZU7[0x1C0];                                 // 0x0290(0x01C0) MISSED OFFSET (PADDING)

	public:
		void BP_EventSetHighlighted(bool isHighlighted);
		void BP_EventSetData(const struct FYUIHavocUpgrade& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HavocProgressionMenu_UpgradesList
	 * Size -> 0x0028 (FullSize[0x02B8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HavocProgressionMenu_UpgradesList : public UYHUDWidget
	{
	public:
		class UHorizontalBox*                                      m_upgradesListContainer;                                 // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_upgradeItemClass;                                      // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VL8P[0x18];                                  // 0x02A0(0x0018) MISSED OFFSET (PADDING)

	public:
		void BP_InitButtonEventDelegates();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HavocProgressionMenu_WaveInfo
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HavocProgressionMenu_WaveInfo : public UYHUDWidget
	{
	public:
		TArray<class UYHUDWidget_HavocWaveModifier*>               m_activeModifierWidgets;                                 // 0x0290(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7L5P[0x1];                                   // 0x02A0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_useComplexFadeAnimation;                               // 0x02A1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VWD7[0x6];                                   // 0x02A2(0x0006) MISSED OFFSET (PADDING)

	public:
		void BP_SetWaveNumber(int32_t waveNumber, bool isBossWave);
		void BP_SetTimeUntilNextWave(int32_t secondsToNextWave);
		void BP_SetPermanentEnemyModifiers(int32_t damageBoostValue, int32_t healthBoostValue);
		int32_t STATIC_BP_GetTimeLeftHideTimerValue();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HavocWaveModifier
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HavocWaveModifier : public UYHUDWidget
	{
	public:
		void BP_SetActiveModifierData(const struct FYUIHavocModifier& modifierData);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HealthEnergyAmmoBars
	 * Size -> 0x0040 (FullSize[0x02D0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HealthEnergyAmmoBars : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_YBOQ[0x40];                                  // 0x0290(0x0040) MISSED OFFSET (PADDING)

	public:
		void BP_EventUpdateZoom(bool isZoomed);
		void BP_EventUpdateReloading(int32_t weaponIndex, float percentageRemaining);
		void BP_EventUpdateHealth(float Health, float percent);
		void BP_EventUpdateEnergy(float Energy, float percent);
		void BP_EventUpdateAmmo(int32_t weaponIndex, float ammo, float percent);
		void BP_EventSetWeaponCount(int32_t weaponCount);
		void BP_EventSetReloading(int32_t weaponIndex, bool IsReloading);
		void BP_EventSetIsFighter(bool bIsFighter);
		void BP_EventSetInfiniteAmmoState(int32_t weaponIndex, bool isInfinite);
		void BP_EventSetEnergyWheelSelection(EYEnergyWheelSelection energyWheelType);
		void BP_EventSetActiveWeapon(int32_t weaponIndex, const class FString& weaponName);
		void BP_EventFireWeapon();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HordeWaveCompleted
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HordeWaveCompleted : public UYHUDWidget
	{
	public:
		void BP_SetData(int32_t waveNumber, int32_t waveTimeSeconds, int32_t timeBonusXp, int32_t waveXp, int32_t totalXp);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HudHelperOverlay
	 * Size -> 0x0040 (FullSize[0x02D0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HudHelperOverlay : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_M1OV[0x40];                                  // 0x0290(0x0040) MISSED OFFSET (PADDING)

	public:
		TArray<class FText> RequestActionNameDisplayStrings(const class FString& ActionName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_HUDNotificationPopup
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_HUDNotificationPopup : public UYHUDWidget
	{
	public:
		class UTextBlock*                                          m_notificationText;                                      // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              m_notificationColor;                                     // 0x0298(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VFO0[0xC];                                   // 0x029C(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetNotificationColor(const struct FColor& inColor);
		void CloseNotification();
		void BP_CloseNotification();
		void BP_ActivateNotification(const class FText& displayText, const struct FVector2D& screenPosition);
		void ActivateNotificationAtPosition(float duration, const class FText& displayText, const struct FVector2D& screenPosition);
		void ActivateNotification(float duration, const class FText& displayText);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_KillCard
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_KillCard : public UYHUDWidget
	{
	public:
		void BP_SetWeaponText(const class FText& weaponText);
		void BP_SetWeaponSecondaryIcon(class UTexture2D* weaponSecondaryIcon);
		void BP_SetWeaponIcon(class UTexture2D* weaponIcon);
		void BP_SetShipIcon(class UTexture2D* shipIcon);
		void BP_SetShipClassIcon(class UTexture2D* shipClassIcon);
		void BP_SetDamageDealt(int32_t damageDealt);
		void BP_SetCaptainIcon(class UTexture2D* captainIconTexture);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_KillTicker
	 * Size -> 0x0040 (FullSize[0x02D0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_KillTicker : public UYHUDWidget
	{
	public:
		bool                                                       m_isAnimatingTicker;                                     // 0x0290(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5QDM[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYKillTickerEventData>                       m_visibleKillTickerEvents;                               // 0x0298(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FYKillTickerEventData>                       m_queuedKillTickerEvents;                                // 0x02A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_KillTickerSlot*>                  m_killTickerSlotWidgets;                                 // 0x02B8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CNTU[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void CPP_EventResetKillTicker();
		void BP_EventScrollSlots();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_KillTickerSlot
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_KillTickerSlot : public UYHUDWidget
	{
	public:
		void BP_EventSetNamesAndTeams(const class FString& killerName, const class FString& victimName, bool isKillerAlly);
		void BP_EventPlayStartAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_Legend
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_Legend : public UYHUDWidget
	{
	public:
		TArray<struct FYUIIconMap>                                 m_iconMap;                                               // 0x0290(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		class UTexture* GetIconForButton(EYPS4ButtonIcon Button);
		void BP_SetLegend(EYPS4ButtonIcon icon, const class FText& Text);
		void BP_SetDisabledState(bool Disabled);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_LoadoutColumn
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_LoadoutColumn : public UYHUDWidget
	{
	public:
		void BP_OnColumnRankIconChanged(class UTexture2D* rankIcon);
		void BP_OnColumnMainIconChanged(class UTexture2D* mainIcon);
		void BP_OnColumnIndexIconChanged(class UTexture2D* typeIcon);
		void BP_OnColumnDescriptionChanged(const class FText& columnDesc);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_MiniMap
	 * Size -> 0x00A0 (FullSize[0x0330] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_MiniMap : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_2KPL[0x58];                                  // 0x0290(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel*                                        m_markerContainerPanel;                                  // 0x02E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           m_markerOriginPosition;                                  // 0x02F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_maxOffsetRange;                                        // 0x02F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_playerMapRotation;                                     // 0x0300(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8S3Z[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYHUDWidget_MiniMapMarker*>                   m_miniMapMarkerPool;                                     // 0x0308(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              m_miniMapMarkerWidgetBlueprint;                          // 0x0318(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A4E8[0x10];                                  // 0x0320(0x0010) MISSED OFFSET (PADDING)

	public:
		void BP_EventUpdateViewFrustumAngle(float Angle);
		void BP_EventUpdatePlayerPosition(float playerX, float playerY);
		void BP_EventUpdateMapRotation(float Angle);
		void BP_EventShowViewFrustum(bool Show);
		void BP_EventSetCaptainCommandActive(bool active);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_MiniMapMarker
	 * Size -> 0x0028 (FullSize[0x02B8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_MiniMapMarker : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_4G23[0x28];                                  // 0x0290(0x0028) MISSED OFFSET (PADDING)

	public:
		void CPP_EventRemoveSelf();
		void BP_EventSetTombstone();
		void BP_EventSetShipClass(EYMarkerShipType Type);
		void BP_EventSetMarkerState(bool hasInteractivity, bool IsActive);
		void BP_EventSetMarkerPosition(float posX, float posY, float Angle);
		void BP_EventSetMarkerFaction(EYTeam faction);
		void BP_EventResetMarker();
		void BP_EventEnemySpotted(float FadeTime);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_MissileMarker
	 * Size -> 0x0028 (FullSize[0x02B8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_MissileMarker : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_OD9A[0x4];                                   // 0x0290(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           m_markerOffset;                                          // 0x0294(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_borderBufferSpace;                                     // 0x029C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_markerTextBlock;                                       // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      m_markerImagesByType;                                    // 0x02A8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void BP_EventUpdateOnScreenState(bool onScreen);
		void BP_EventUpdateOffscreenAngle(float posX, float posY);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_MissileWarnings
	 * Size -> 0x0078 (FullSize[0x0308] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_MissileWarnings : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_551S[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class UYHUDWidget_MissileMarker*>      m_activeMissileMarkers;                                  // 0x0298(0x0050) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_MissileMarker*>                   m_missileMarkerPool;                                     // 0x02E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UClass*                                              m_missileMarkerWidgetBlueprint;                          // 0x02F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7MW5[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PauseMenu
	 * Size -> 0x0080 (FullSize[0x0310] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PauseMenu : public UYHUDWidget
	{
	public:
		TArray<struct FYPauseMenuContent>                          m_pauseMenuFrontEndContents;                             // 0x0290(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYPauseMenuContent>                          m_pauseMenuInGameContents;                               // 0x02A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYPauseMenuContent>                          m_pauseMenuActiveContents;                               // 0x02B0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_topLevelContainer;                                     // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         m_tabNavigationWidget;                                   // 0x02C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ButtonPrompt*                            m_buttonPrompts;                                         // 0x02D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_TeamVoiceChatMgr*                        m_teamVoiceChatMgr;                                      // 0x02D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_pauseMenuInputComponent;                               // 0x02E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_UMGPopupClass;                                         // 0x02E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2C0D[0x20];                                  // 0x02F0(0x0020) MISSED OFFSET (PADDING)

	public:
		void MenuButtonEntered(int32_t optionIdx);
		void MenuButtonClicked(int32_t optionIdx);
		void InputDeviceChanged(EYInputDevice newInputDevice);
		void CloseSubMenu();
		void BP_EventTogglePauseMenu(bool Visible);
		void BP_EventSetVitaRemotePlayOptionsState(bool active);
		void BP_EventSetTabLabel(int32_t index, const class FText& label);
		void BP_EventSetHighlightedTab(int32_t index);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PauseMenuOption
	 * Size -> 0x00E0 (FullSize[0x0370] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PauseMenuOption : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_TDI8[0xE0];                                  // 0x0290(0x00E0) MISSED OFFSET (PADDING)

	public:
		void BP_EventSetLabel(const class FText& label);
		void BP_EventHighlightOption(bool highlighted);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PauseSubMenu
	 * Size -> 0x0088 (FullSize[0x0318] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PauseSubMenu : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_GWY4[0x40];                                  // 0x0290(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYSettingsOptionContent>                     m_settingsOptionContents;                                // 0x02D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_SettingsOption*>                  m_settingsOptionWidgets;                                 // 0x02E0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DEBU[0x18];                                  // 0x02F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_customerSupportURL;                                    // 0x0308(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void CloseSubMenuFromBP();
		void BP_ShowSubMenu(bool Show);
		void BP_EventOptionModified(class UYHUDWidget_SettingsOption* option);
		void BP_EventOptionHighlighted(class UYHUDWidget_SettingsOption* option);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_BugReporter
	 * Size -> 0x0058 (FullSize[0x0370] - InheritedSize[0x0318])
	 */
	class UYHUDWidget_BugReporter : public UYHUDWidget_PauseSubMenu
	{
	public:
		class UYHUDWidget_DropDownForm_PC*                         m_dropDownForm;                                          // 0x0318(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_TextField*                                  m_titleTextField;                                        // 0x0320(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_TextField*                                  m_bodyTextField;                                         // 0x0328(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OYXL[0x40];                                  // 0x0330(0x0040) MISSED OFFSET (PADDING)

	public:
		void SelectSubmitButton();
		void OpenIMEKeyboard(int32_t stringLength, const class FString& currentString, bool IsPassword);
		void CloseIMEKeyboard();
		void BP_EventUpdateMessageContent(const class FString& message, int32_t caretIndex, bool showCaret);
		void BP_EventSetUserMessageSelected(bool isSelected);
		void BP_EventSetSubmitButtonPressed();
		void BP_EventSetSelectedComponent(EYBugReporterSelection ComponentType, bool isSelected);
		void BP_EventSetIssueTypeLabel(const class FText& labelText, bool tabRight);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_UserSettingsSubMenu_PC
	 * Size -> 0x0088 (FullSize[0x03A0] - InheritedSize[0x0318])
	 */
	class UYHUDWidget_UserSettingsSubMenu_PC : public UYHUDWidget_PauseSubMenu
	{
	public:
		unsigned char                                              UnknownData_IZEG[0x8];                                   // 0x0318(0x0008) Fix Super Size
		TArray<class UYHUDWidget_ScrollBox_PC*>                    m_tabBodyScrollBoxes;                                    // 0x0320(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UYHUDWidget_TabSwitcherBar_PC*                       m_tabSwitcherBar;                                        // 0x0330(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMultiLineEditableText*                              m_toolTipDisplayText;                                    // 0x0338(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_unassignedKeysWarning;                                 // 0x0340(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_categoryWidgetClass;                                   // 0x0348(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U1L9[0x8];                                   // 0x0350(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYHUDWidget_SettingType_PC*>                  m_settingWidgets;                                        // 0x0358(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UB8V[0x38];                                  // 0x0368(0x0038) MISSED OFFSET (PADDING)

	public:
		void TabSwitched(int32_t tabIdx);
		void RespondToHotkeyChanged(const class FName& EventName, bool isKeyboardKey, bool isMouseButton, bool isGamepadKey);
		void ResetToDefaults();
		void OnTabBodyScrolled(float scrollOffset);
		void ApplyUserSettings();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PlayerRosterManager
	 * Size -> 0x0038 (FullSize[0x02C8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PlayerRosterManager : public UYHUDWidget
	{
	public:
		class UPanelWidget*                                        m_rosterSlotContainerWidget;                             // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_PlayerRosterSlot*>                m_rosterSlots;                                           // 0x0298(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CP2Y[0x10];                                  // 0x02A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObjectLibrary*                                      m_objectLibrary;                                         // 0x02B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P78W[0x8];                                   // 0x02C0(0x0008) MISSED OFFSET (PADDING)

	public:
		bool GetPlayerData(int32_t SlotIndex, struct FPrematchTeamListData* Data);
		bool DoesPlayerHaveShipSet(int32_t SlotIndex);
		class UYHUDWidget_PlayerRosterSlot* CreateRosterSlotWidget();
		void BP_OnUpdatedRosterData();
		void BP_OnSetFocusToPlayer();
		void BP_OnInputShoulderRight();
		void BP_OnInputShoulderLeft();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PlayerRosterSlot
	 * Size -> 0x0088 (FullSize[0x0318] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PlayerRosterSlot : public UYHUDWidget
	{
	public:
		class UImage*                                              m_shipClassIcon;                                         // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_captainAvatarIcon;                                     // 0x0298(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_shipIcon;                                              // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_shipTierIcon;                                          // 0x02A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_playerName;                                            // 0x02B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_backerRankImage;                                       // 0x02B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_rankImage;                                             // 0x02C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4RG9[0x50];                                  // 0x02C8(0x0050) MISSED OFFSET (PADDING)

	public:
		void BP_SetShipTierIcon(class UTexture2D* Texture);
		void BP_SetIsLocalPlayer(bool IsLocalPlayer);
		void BP_OnSpectatedSet(bool isSpectatedPlayer);
		void BP_OnShipTextureChanged(class UTexture2D* shipTexture);
		void BP_OnShipClassTextureChanged(class UTexture2D* shipClassTexture);
		void BP_OnReadySet(bool readyValue);
		void BP_OnRankTextureChanged(class UTexture2D* rankTexture);
		void BP_OnCaptainTextureChanged(class UTexture2D* captainTexture);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PopupSystem
	 * Size -> 0x00B8 (FullSize[0x0348] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PopupSystem : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_8J2W[0x38];                                  // 0x0290(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             m_legendStartingPosition;                                // 0x02C8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_legendIconDimensions;                                  // 0x02D4(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_legendDimensions;                                      // 0x02E0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      m_legendComponentSpacing;                                // 0x02EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             m_bodyTextPosition;                                      // 0x02F0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             m_bodyTextDimensions;                                    // 0x02FC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UFont*                                               m_bodyTextFont;                                          // 0x0308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_bodyTextFontSize;                                      // 0x0310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_bodyTextWrappingWidth;                                 // 0x0314(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_bodyTextLineBreakHeight;                               // 0x0318(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             m_bodyTextIconDimensions;                                // 0x031C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_popupInput;                                            // 0x0328(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G2TR[0x10];                                  // 0x0330(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     m_popupInputComponent;                                   // 0x0340(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool IsPopupOpened();
		void InputCallback(EYPS4ButtonIcon Button);
		void ClosePopup();
		void ClearLegend();
		void BP_ShowCostText(EYUICurrency currencyType, int32_t currencyValue);
		void BP_OpenPopup(const class FString& headerText, const struct FColor& headerColor, const class FString& bodyText, TArray<struct FYUIPopupLegendInfo> legend, bool dimBackground, bool useTitleHighlight, bool useControllerDisconnectedPopup);
		void BP_ClosePopup(bool useControllerDisconnectedPopup);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PromptBase
	 * Size -> 0x0050 (FullSize[0x02E0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_PromptBase : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_SUOC[0x50];                                  // 0x0290(0x0050) MISSED OFFSET (PADDING)

	public:
		void TriggerClosePrompt();
		TArray<class FText> RequestActionNameDisplayStrings(const class FString& ActionName);
		void OnPromptInteractiveCloseTriggered__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PromptInformationBase
	 * Size -> 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
	 */
	class UYHUDWidget_PromptInformationBase : public UYHUDWidget_PromptBase
	{
	public:
		void BP_InitializeData(TArray<struct FYActionMappingText> promptDescriptionArray);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PromptOverlayBase
	 * Size -> 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
	 */
	class UYHUDWidget_PromptOverlayBase : public UYHUDWidget_PromptBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PromptOverlayPS4
	 * Size -> 0x0020 (FullSize[0x0300] - InheritedSize[0x02E0])
	 */
	class UYHUDWidget_PromptOverlayPS4 : public UYHUDWidget_PromptOverlayBase
	{
	public:
		bool                                                       m_useOverlayGamepadInput;                                // 0x02E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L565[0x7];                                   // 0x02E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EYTutorialComponentLock>                            m_overlayWidgetsToUnlock;                                // 0x02E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UInputComponent*                                     m_inputComponent;                                        // 0x02F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SelectPressed();
		void OnPromptClosed();
		void DeselectPressed();
		void BP_OnSelectPressed();
		void BP_OnDeselectPressed();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_PromptManagerPS4
	 * Size -> 0x0030 (FullSize[0x0318] - InheritedSize[0x02E8])
	 */
	class UYHUDWidget_PromptManagerPS4 : public UYHUDWidget_PromptManager
	{
	public:
		class UYHUDWidget_PromptInformationBase*                   m_promptInformationPS4;                                  // 0x02E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_PromptOverlayPS4*                        m_overlayEnergyWheelPS4;                                 // 0x02F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_PromptOverlayPS4*                        m_overlayModulesPS4;                                     // 0x02F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_PromptOverlayPS4*                        m_overlayRangesPS4;                                      // 0x0300(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_PromptOverlayPS4*                        m_promptChooseEnergyWheelPS4;                            // 0x0308(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_PromptOverlayPS4*                        m_promptCloseEnergyWheelPS4;                             // 0x0310(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_RoundOverDisplay
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_RoundOverDisplay : public UYHUDWidget
	{
	public:
		class UYHUDWidget_RoundOver_TeamElim*                      m_teamElimRoundOverWidget;                               // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYGameModeType                                             m_gameModeType;                                          // 0x0298(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FEDY[0x7];                                   // 0x0299(0x0007) MISSED OFFSET (PADDING)

	public:
		void StartRoundOverAnimations();
		void SetTeamEliminationPlayers(TArray<struct FTeamElimPlayerData> elimData);
		void SetPlayerTeam(EYTeam Team);
		void SetGameModeRoundResult(int32_t Result);
		void SetGameModeRound(int32_t Round);
		void SetGameMode(EYGameModeType gameModeHUDType);
		void BP_EventSetGameModeRoundResult(int32_t Result);
		void BP_EventSetGameModeRound(int32_t Round);
		void BP_EventOnSetGameMode();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ScoreBoard
	 * Size -> 0x0210 (FullSize[0x04A0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ScoreBoard : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_7AFU[0x150];                                 // 0x0290(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYHUDWidget_ScoreBoardSlot*>                  m_allyScoreBoardSlots;                                   // 0x03E0(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_ScoreBoardSlot*>                  m_enemyScoreBoardSlots;                                  // 0x03F0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class UYHUDWidget_ButtonPrompt*                            m_buttonPrompts;                                         // 0x0400(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_ScoreBoardSlot_Options*                  m_scoreBoardOptions;                                     // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_scoreBoardSlotWidgetBlueprint;                         // 0x0410(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_scoreboardInputComponent;                              // 0x0418(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     m_endOfMatchScoreboardInputComponent;                    // 0x0420(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_highlightedIndex;                                      // 0x0428(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_showEnemyScoreboardSlots;                              // 0x042C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SK3N[0x73];                                  // 0x042D(0x0073) MISSED OFFSET (PADDING)

	public:
		void BP_EventUpdateScoreBoardHeader(const class FString& mapName, const class FString& gameModeName, int32_t scoreTeam1, int32_t scoreTeam2, int32_t maxScore);
		void BP_EventUpdateScoreBoardFactions(const class FString& factionA, const class FString& factionB);
		void BP_EventUpdateGameModeRoundResult(int32_t Result);
		void BP_EventToggleScoreBoard(bool Visible);
		void BP_EventSetScoreBoardSlotOptionsWidgetPosition(bool bIsAlly);
		void BP_EventSetGameModeHeader(EYGameModeType mode);
		void BP_EventSetButtonPromptVisibility(bool Visible);
		void BP_EventOptionsVisible(bool Visible);
		void BP_EventAddScoreBoardSlotWidget(class UYHUDWidget_ScoreBoardSlot* slotWidget, EYTeam Team, int32_t index);
		void BP_EventAddScoreBoardSlotOptionsWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ScoreBoardHavok
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class UYHUDWidget_ScoreBoardHavok : public UYHUDWidget_ScoreBoard
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ScoreBoardSlot
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ScoreBoardSlot : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_IWN7[0x10];                                  // 0x0290(0x0010) MISSED OFFSET (PADDING)

	public:
		void BP_EventSetSlotHighlighted(bool highlighted);
		void BP_EventPopulateSlot(EYScoreboardClassType shipType, const class FString& PlayerName, int32_t kills, int32_t deaths, int32_t assists, float killDeathRatio, int32_t Score, bool isFriend, class UTexture2D* rankIconTexture, const class FString& tierPath, bool isSelf, bool isMuted);
		void BP_EventClearSlot();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ScoreBoardSlot_Options
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ScoreBoardSlot_Options : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_R45D[0x10];                                  // 0x0290(0x0010) MISSED OFFSET (PADDING)

	public:
		void BP_EventSetSlotHighlighted(int32_t index);
		void BP_EventPopulateSlot(const class FString& PlayerName, bool isAlly, bool isFriend, class UTexture2D* captainIconTexture, class UTexture2D* rankIconTexture, int32_t rank, const class FString& highestFleetUnlocked, bool isSelf);
		void BP_EventCloseOptionsWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ScoringEvents
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ScoringEvents : public UYHUDWidget
	{
	public:
		void BP_EventAddScoringEvent(const class FString& eventText, EYScoringEventLevel scoreLevel, bool isRibbonEvent, class UTexture2D* ribbonTexture);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_SettingsOption
	 * Size -> 0x0068 (FullSize[0x02F8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_SettingsOption : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_BLW0[0x68];                                  // 0x0290(0x0068) MISSED OFFSET (PADDING)

	public:
		float GetOptionSelectedValue();
		class FText GetOptionDisplayName();
		void BP_EventSetOptionType(EYUISettingType Type);
		void BP_EventSetOptionListLabel(const class FText& label);
		void BP_EventSetOptionBarFillPercent(float fillPercent);
		void BP_EventSetLockStatus(bool isLocked);
		void BP_EventSetLabel(const class FText& label);
		void BP_EventSetHighlighted(bool highlighted);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ShipInfoPanel
	 * Size -> 0x0070 (FullSize[0x0300] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ShipInfoPanel : public UYHUDWidget
	{
	public:
		class UYHUDWidget_LoadoutColumn*                           m_loadoutPrimaryWeapon;                                  // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutSecondaryWeapon;                                // 0x0298(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutAbility1;                                       // 0x02A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutAbility2;                                       // 0x02A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutAbility3;                                       // 0x02B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutAbility4;                                       // 0x02B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutPerk1;                                          // 0x02C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutPerk2;                                          // 0x02C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutPerk3;                                          // 0x02D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_LoadoutColumn*                           m_loadoutPerk4;                                          // 0x02D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_LoadoutColumn*>                   m_loadoutAbilityWidgets;                                 // 0x02E0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_LoadoutColumn*>                   m_loadoutPerkWidgets;                                    // 0x02F0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetData(const struct FYShipLoadoutInfo& shipLoadoutInfo);
		void BP_SetShipTierIcon(class UTexture2D* Texture);
		void BP_SetShipSubline(const class FText& Text);
		void BP_SetShipName(const class FText& Text);
		void BP_SetShipClassIcon(class UTexture2D* Texture);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ShortCommandSelector
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ShortCommandSelector : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_UMBR[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UYHUDWidget_ShortCommandSpoke*>               m_spokeList;                                             // 0x0298(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetSpokeList(TArray<class UYHUDWidget_ShortCommandSpoke*> spokeList);
		void SetHighlighted(bool isHighlighted, int32_t SelectionIndex);
		void BP_PlayOpenAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_ShortCommandSpoke
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_ShortCommandSpoke : public UYHUDWidget
	{
	public:
		class UCanvasPanel*                                        m_textPanel;                                             // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetSpokeAngle(float Angle);
		void BP_SetSpokeText(const class FText& spokeText);
		void BP_SetSpokeIcon(class UTexture2D* spokeIcon);
		void BP_SetSpokeCount(int32_t maxSpokesShown);
		void BP_SetAngle(float Angle);
		void BP_PlaySelectAnimation(bool isSelected);
		void BP_PlayHighlightAnimation(bool isHighlighted);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_Squad
	 * Size -> 0x0070 (FullSize[0x0300] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_Squad : public UYHUDWidget
	{
	public:
		class FScriptMulticastDelegate                             OnSquadChanged;                                          // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       isInSquad;                                               // 0x02A0(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KPN6[0x5F];                                  // 0x02A1(0x005F) MISSED OFFSET (PADDING)

	public:
		void SendSquadWhisper(const class FName& friendName);
		void SendSquadInvite(const class FName& friendName);
		void OnSquadLeave();
		void OnSquadChanged__DelegateSignature();
		class FString GetAvatarPathFromUserPID(const class FName& userPID);
		TArray<class FString> GetAvatarImagePaths();
		void BP_EnableSquadMenu(bool shouldEnable);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_StatRow
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_StatRow : public UYHUDWidget
	{
	public:
		EYUIInformationPanelType                                   m_panelType;                                             // 0x0290(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ESZA[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_StatRow_Bar
	 * Size -> 0x0018 (FullSize[0x02B0] - InheritedSize[0x0298])
	 */
	class UYHUDWidget_StatRow_Bar : public UYHUDWidget_StatRow
	{
	public:
		class UTextBlock*                                          m_title;                                                 // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        m_bar;                                                   // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_description;                                           // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void BP_OnStatsChanged(const class FText& statHeader, const class FString& statValue);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_StatRow_ShipDesc
	 * Size -> 0x0018 (FullSize[0x02B0] - InheritedSize[0x0298])
	 */
	class UYHUDWidget_StatRow_ShipDesc : public UYHUDWidget_StatRow
	{
	public:
		class UTextBlock*                                          m_desc;                                                  // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IYOY[0x10];                                  // 0x02A0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetTier(int32_t tier);
		void BP_OnStatsChanged(const class FText& statData);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_StatRow_ShipName
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class UYHUDWidget_StatRow_ShipName : public UYHUDWidget_StatRow
	{
	public:
		class UTextBlock*                                          m_name;                                                  // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void BP_OnStatsChanged(const class FText& statData);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_StatRow_SingleText
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class UYHUDWidget_StatRow_SingleText : public UYHUDWidget_StatRow
	{
	public:
		class UTextBlock*                                          m_text;                                                  // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void BP_OnStatsChanged(const class FText& statData);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_StyleContainer
	 * Size -> 0x0058 (FullSize[0x02E8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_StyleContainer : public UYHUDWidget
	{
	public:
		class UDataTable*                                          m_colorStyles;                                           // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              m_defaultColorNotFound;                                  // 0x0298(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CS3K[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          m_shortCommandIcons;                                     // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_energyWheelIcons;                                      // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_questMarkerData;                                       // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_questMarkerOnslaughtData;                              // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_onboardingInputData;                                   // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_teamEliminationData;                                   // 0x02C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_shipClassIconData;                                     // 0x02D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_buffTypeIconData;                                      // 0x02D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          m_HUDOverlayInstructionsData;                            // 0x02E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UTexture2D* GetTeamEliminationIcon(EYUITeamEliminationIcon elimIconType);
		struct FColor GetStyleColor(EYUIColorStyle colorStyle);
		class UTexture2D* GetShortCommandIcon(EYUIShortCommands shortCommand);
		class UTexture2D* GetShipClassIcon(EYShipBaseClass baseclass);
		class UTexture2D* GetQuestMarkerIcon(EYUIQuestMarker questMarker);
		class FText GetQuestMarkerDescription(EYUIQuestMarker questMarker);
		struct FColor GetQuestMarkerColor(EYUIQuestMarker questMarker);
		class FText GetHUDOverlayInstruction(int32_t controllerConfigIndex, EYHelperHUDInstructionType instructionType);
		class UTexture2D* GetEnergyWheelIcon(EYEnergyWheelSelection energySelection);
		class UTexture2D* GetControllerInputIcon(const class FName& inKey);
		class UTexture2D* GetBuffTypeIcon(EYBuffType buffType);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TabSwitcherBar_PC
	 * Size -> 0x0080 (FullSize[0x0310] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_TabSwitcherBar_PC : public UYHUDWidget
	{
	public:
		unsigned char                                              UnknownData_9K40[0x40];                                  // 0x0290(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_previewActiveButtonIdx;                                // 0x02D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U4HM[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHorizontalBox*                                      m_horizontalBoxContainer;                                // 0x02D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              m_tabButtonClass;                                        // 0x02E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_TabButton_PC*>                    m_tabButtons;                                            // 0x02E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class FText>                                        m_tabButtonNames;                                        // 0x02F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		float                                                      m_widthExtensionLeftAndRight;                            // 0x0308(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_tabMargin;                                             // 0x030C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TabSelected(int32_t tabIdx);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TabSwitcherBar_PS4
	 * Size -> 0x0010 (FullSize[0x0320] - InheritedSize[0x0310])
	 */
	class UYHUDWidget_TabSwitcherBar_PS4 : public UYHUDWidget_TabSwitcherBar_PC
	{
	public:
		class UInputComponent*                                     m_gamepadTabInputComponent;                              // 0x0310(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_42IT[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		void BP_OnTabSelected(int32_t tabIdx);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TargetIndicator
	 * Size -> 0x01E0 (FullSize[0x0470] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_TargetIndicator : public UYHUDWidget
	{
	public:
		bool                                                       m_isActive;                                              // 0x0290(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NLZP[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_makerName;                                             // 0x0298(0x0010) BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isPawn;                                                // 0x02A8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isQuest;                                               // 0x02A9(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9J9A[0x6];                                   // 0x02AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYTargetAbilityState>                        m_abilityStates;                                         // 0x02B0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_isTarget;                                              // 0x02C0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_targetVicinity;                                        // 0x02C1(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       m_showSpeechIcon;                                        // 0x02C2(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9Q30[0x1];                                   // 0x02C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_factionID;                                             // 0x02C4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FYUITargetMarker                                    m_markerData;                                            // 0x02C8(0x0088) BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_offsetScreenDimensionVector;                           // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_normalizedHUDScaleVector;                              // 0x0358(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_HUDSize;                                               // 0x0360(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           m_positionOffset;                                        // 0x0368(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_shortCommandIndex;                                     // 0x0370(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAJK[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProgressBar*                                        m_energyBar;                                             // 0x0378(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        m_healthBar;                                             // 0x0380(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isOffscreen;                                           // 0x0388(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XQIA[0x7];                                   // 0x0389(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UImage*>                                      m_abilityIcons;                                          // 0x0390(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UImage*                                              m_energyTypeIcon;                                        // 0x03A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_shipClassIcon;                                         // 0x03A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_distanceText;                                          // 0x03B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_commandDistanceText;                                   // 0x03B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_commandDescriptor;                                     // 0x03C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_shipNameText;                                          // 0x03C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_shipHealthText;                                        // 0x03D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      m_recoloredImages;                                       // 0x03D8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UTextBlock*>                                  m_recoloredText;                                         // 0x03E8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UProgressBar*>                                m_recoloredBars;                                         // 0x03F8(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_fullTargetData;                                        // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_collapsedTargetData;                                   // 0x0410(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_arrowPanel;                                            // 0x0418(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_commandPanel;                                          // 0x0420(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_shortCommandIcon;                                      // 0x0428(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_offscreenIndicatorArrow;                               // 0x0430(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_offscreenIndicatorArrowAngleOffset;                    // 0x0438(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_offscreenIndicatorArrowDistanceOffset;                 // 0x043C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        m_secondaryEnergyBar;                                    // 0x0440(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        m_secondaryHealthBar;                                    // 0x0448(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_secondaryShipClassIcon;                                // 0x0450(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_shipTierIcon;                                          // 0x0458(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_secondaryShipTierIcon;                                 // 0x0460(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_BuffManager*                             m_BuffManager;                                           // 0x0468(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PostBlueprintLinksCreated();
		float GetMarkerDistance();
		void BP_EventRevealCommandPanel();
		void BP_EventHideCommandPanel();
		void BP_EventAbilityLocked(int32_t abilityIndex, class UImage* abilityIcon);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TargetManager
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_TargetManager : public UYHUDWidget
	{
	public:
		TArray<class UYHUDWidget_TargetIndicator*>                 m_targetIndicators;                                      // 0x0290(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UYHUDWidget_TargetIndicator*                         m_currentTarget;                                         // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TeamCompManager
	 * Size -> 0x0038 (FullSize[0x02C8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_TeamCompManager : public UYHUDWidget
	{
	public:
		TArray<EYShipBaseClass>                                    m_teamCompTypes;                                         // 0x0290(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              m_teamCompSlotTemplate;                                  // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_TeamCompSlot*>                    m_teamCompWidgetCollection;                              // 0x02A8(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GG0Q[0x10];                                  // 0x02B8(0x0010) MISSED OFFSET (PADDING)

	public:
		void BP_SetTeamCompSlotPositions();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TeamCompSlot
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_TeamCompSlot : public UYHUDWidget
	{
	public:
		int32_t                                                    m_shipCount;                                             // 0x0290(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYShipBaseClass                                            m_compClass;                                             // 0x0294(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KTBW[0x3];                                   // 0x0295(0x0003) MISSED OFFSET (PADDING)

	public:
		void BP_OnShipCountChanged(int32_t newShipCount);
		void BP_OnSetCompositionClass(EYShipBaseClass compClass);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TeamVoiceChatMgr
	 * Size -> 0x0040 (FullSize[0x02D0] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_TeamVoiceChatMgr : public UYHUDWidget
	{
	public:
		bool                                                       m_isCustomRoomVoiceChatMgr;                              // 0x0290(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FDZF[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              m_voiceChatSlotWidgetTemplate;                           // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_TeamVoiceChatSlot*>               m_allSlots;                                              // 0x02A0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYHUDWidget_TeamVoiceChatSlot*>               m_activeTeammateSlots;                                   // 0x02B0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UPanelWidget*                                        m_activePanelArea;                                       // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1HK4[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (PADDING)

	public:
		class UYHUDWidget_TeamVoiceChatSlot* GetSlotForPlayer(const class FName& uniqueNetID);
		class UYHUDWidget_TeamVoiceChatSlot* CreateAndPopulatePlayerSlot(const class FName& uniqueNetID, const class FString& readableName, EYShipBaseClass baseclass, bool bIsLocal);
		void BP_EventRearrangeActiveTeammateList(TArray<class UYHUDWidget_TeamVoiceChatSlot*> currentActiveSlots);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YHUDWidget_TeamVoiceChatSlot
	 * Size -> 0x0048 (FullSize[0x02D8] - InheritedSize[0x0290])
	 */
	class UYHUDWidget_TeamVoiceChatSlot : public UYHUDWidget
	{
	public:
		float                                                      m_postStopChattingDuration;                              // 0x0290(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_847J[0xC];                                   // 0x0294(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              m_playerName;                                            // 0x02A0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_playerUniqueNetID;                                     // 0x02B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYHUDWidget_TeamVoiceChatMgr*                        m_voiceChatManager;                                      // 0x02B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OA16[0x18];                                  // 0x02C0(0x0018) MISSED OFFSET (PADDING)

	public:
		void StartDebugChatTest();
		void SetSlotPlayerShipClass(EYShipBaseClass shipclass);
		void SetSlotPlayerName(const class FName& uniqueNetID, const class FString& PlayerName);
		void SetSlotChatting(bool bIsChatting);
		void SetIsSquadmate(bool bIsSquadmate);
		void SetIsEnemy(bool bIsEnemy);
		bool IsSquadmate();
		bool IsLocalPlayer();
		bool IsForPlayer(const class FName& uniqueNetID);
		bool IsEnemy();
		bool IsChatting();
		void InitSlot(class UYHUDWidget_TeamVoiceChatMgr* manager, bool bIsLocal);
		bool HasPlayerData();
		void EndDebugChatTest();
		void DeactivateSlot();
		void BP_SlotDeactivated();
		void BP_SlotActivated();
		void BP_SetIsSquadmate(bool IsSquadmate);
		void BP_SetIsLocalPlayer(bool IsLocalPlayer);
		void BP_SetIsEnemy(bool IsEnemy);
		void BP_EventSetSlotShipClass(EYShipBaseClass shipclass);
		void BP_EventSetSlotPlayerName(const class FString& PlayerName);
		void BP_EventSetSlotChatting(bool bIsChatting);
		void ActivateSlot();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_TextField
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UYWidget_TextField : public UYHUDWidget
	{
	public:
		class UEditableText*                                       m_editableTextSingleLine;                                // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMultiLineEditableText*                              m_editableTextMultiLine;                                 // 0x0298(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isMultiLine;                                           // 0x02A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6JZ5[0x7];                                   // 0x02A1(0x0007) MISSED OFFSET (PADDING)

	public:
		class FText GetTextFromField();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_CurrencyComponent
	 * Size -> 0x0080 (FullSize[0x02D0] - InheritedSize[0x0250])
	 */
	class UYWidget_CurrencyComponent : public UYWidget
	{
	public:
		class FScriptMulticastDelegate                             OnFadeInAnimationFinished;                               // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFadeInAnimationStarted;                                // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTextBlock*                                          m_valueTextBlock;                                        // 0x0270(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_currencyImage;                                         // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    m_value;                                                 // 0x0280(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYUICurrency                                               m_currencyType;                                          // 0x0284(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UI9L[0x3];                                   // 0x0285(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetAnimation*                                    m_fadeInAnimation;                                       // 0x0288(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UTextBlock*>                                  m_coloredElements;                                       // 0x0290(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FYCurrencyAppearanceMapping>                 m_currencyAppearanceMappings;                            // 0x02A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FText                                                m_defaultEmptyText;                                      // 0x02B0(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		float                                                      m_fadeInSpeed;                                           // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1UGQ[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetFadeInSpeed(float speed);
		void SetData(int32_t currencyValue, EYUICurrency currencyType, bool treatAsPercentage);
		void SetComponentsColor(const struct FSlateColor& newColorAndOpacity);
		void SetAnimationToFinalState();
		void OnFadeInStarted();
		void OnFadeInFinished();
		void BP_InitializeCurrencyIcon(EYUICurrency currencyType);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchMatchOutcome
	 * Size -> 0x0018 (FullSize[0x0268] - InheritedSize[0x0250])
	 */
	class UYWidget_EndOfMatchMatchOutcome : public UYWidget
	{
	public:
		class UWidget*                                             m_victoryContainer;                                      // 0x0250(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_defeatContainer;                                       // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_drawContainer;                                         // 0x0260(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetMatchOutcome(EYMatchOutcome matchOutcome);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchMVPEntry
	 * Size -> 0x0010 (FullSize[0x0260] - InheritedSize[0x0250])
	 */
	class UYWidget_EndOfMatchMVPEntry : public UYWidget
	{
	public:
		class UTextBlock*                                          m_playerNameTextBlock;                                   // 0x0250(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_scoreTextBlock;                                        // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void BP_HighlightbyMVPType(EYMVPType mvpType);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchPage
	 * Size -> 0x0170 (FullSize[0x03C0] - InheritedSize[0x0250])
	 */
	class UYWidget_EndOfMatchPage : public UYWidget
	{
	public:
		class UWidgetAnimation*                                    m_fadeInAnimation;                                       // 0x0250(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_fadeOutAnimation;                                      // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M58V[0x4];                                   // 0x0260(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_forceFinishTimeFactor;                                 // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DLDJ[0x158];                                 // 0x0268(0x0158) MISSED OFFSET (PADDING)

	public:
		void OnFadeOutAnimationFinished();
		void OnFadeInAnimationFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatch_PVE_RewardsPage
	 * Size -> 0x0100 (FullSize[0x04C0] - InheritedSize[0x03C0])
	 */
	class UYWidget_EndOfMatch_PVE_RewardsPage : public UYWidget_EndOfMatchPage
	{
	public:
		float                                                      m_progressBarAnimationUpdateFrequency;                   // 0x03C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CKHG[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         m_progressBarAnimationFloatCurve;                        // 0x03C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_matchDefeatTextBlock;                                  // 0x03D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_finalMatchScoreTextBlock;                              // 0x03D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        m_silverRewardProgressBar;                               // 0x03E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProgressBar*                                        m_goldRewardProgressBar;                                 // 0x03E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatch_PVE_RewardEntry*                 m_bronzeRewardEntry;                                     // 0x03F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatch_PVE_RewardEntry*                 m_silverRewardEntry;                                     // 0x03F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatch_PVE_RewardEntry*                 m_goldRewardEntry;                                       // 0x0400(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_EndOfMatch_PVE_RewardEntry*                 m_seasonalRewardEntry;                                   // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_finalMatchScore;                                       // 0x0410(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_completedEventSuccessfully;                            // 0x0414(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LU7E[0x3];                                   // 0x0415(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_silverScoreRequirement;                                // 0x0418(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      m_goldScoreRequirement;                                  // 0x041C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H0SZ[0xA0];                                  // 0x0420(0x00A0) MISSED OFFSET (PADDING)

	public:
		void UpdateProgressBar(class UProgressBar* progressBarToAnimate, EYPVERewardType rewardType, EYPVERewardLevel rewardLevel);
		void OnRewardIntroAnimationFinished(EYPVERewardType rewardType, EYPVERewardLevel rewardLevel);
		void OnProgressBarAnimationFinished(EYPVERewardType rewardType, EYPVERewardLevel rewardLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatch_PVE_ScorePage
	 * Size -> 0x0060 (FullSize[0x0420] - InheritedSize[0x03C0])
	 */
	class UYWidget_EndOfMatch_PVE_ScorePage : public UYWidget_EndOfMatchPage
	{
	public:
		class UTextBlock*                                          m_mainObjectiveTextBlock;                                // 0x03C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_mainObjectiveStatusTextBlock;                          // 0x03C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_teamScoreValueTextBlock;                               // 0x03D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_gameModeElementsFadeInAnimation;                       // 0x03D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_teamScoreFadeInAnimation;                              // 0x03E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D3M0[0x10];                                  // 0x03E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYEomPveScoreBonusTypeUITextureMapping>      m_resultBonusTypeUITextureMappings;                      // 0x03F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      m_timeBetweenBonusEntryAnimations;                       // 0x0408(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HT92[0x14];                                  // 0x040C(0x0014) MISSED OFFSET (PADDING)

	public:
		void OnTeamScoreFadeInAnimationFinished();
		void OnGameModeElementsFadeInAnimationFinished();
		class UYWidget_EndOfMatch_PVE_ScoreBonusEntry* BP_CreateBonusEntry();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatch_PVE_TeamPage
	 * Size -> 0x0020 (FullSize[0x03E0] - InheritedSize[0x03C0])
	 */
	class UYWidget_EndOfMatch_PVE_TeamPage : public UYWidget_EndOfMatchPage
	{
	public:
		unsigned char                                              UnknownData_BBRN[0x20];                                  // 0x03C0(0x0020) MISSED OFFSET (PADDING)

	public:
		void BP_StartPageIntroAnimation();
		class UYWidget* BP_CreateTeamPlayerEntry(const class FText& PlayerName);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchMVPPage
	 * Size -> 0x0060 (FullSize[0x0420] - InheritedSize[0x03C0])
	 */
	class UYWidget_EndOfMatchMVPPage : public UYWidget_EndOfMatchPage
	{
	public:
		unsigned char                                              UnknownData_2CW0[0x50];                                  // 0x03C0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_mvpEntryScalePercentage;                               // 0x0410(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PU19[0xC];                                   // 0x0414(0x000C) MISSED OFFSET (PADDING)

	public:
		class UYWidget_EndOfMatchMVPEntry* BP_CreateMVPEntry();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchPlayerStatsPage
	 * Size -> 0x0030 (FullSize[0x03F0] - InheritedSize[0x03C0])
	 */
	class UYWidget_EndOfMatchPlayerStatsPage : public UYWidget_EndOfMatchPage
	{
	public:
		unsigned char                                              UnknownData_RECE[0x10];                                  // 0x03C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock*                                          m_noStatsHintTextBlock;                                  // 0x03D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_timeBetweenStatAnimations;                             // 0x03D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SXKZ[0x14];                                  // 0x03DC(0x0014) MISSED OFFSET (PADDING)

	public:
		class UYWidget_EndOfMatchPlayerStat* BP_CreateStatEntry();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchRewardsPage
	 * Size -> 0x0080 (FullSize[0x0440] - InheritedSize[0x03C0])
	 */
	class UYWidget_EndOfMatchRewardsPage : public UYWidget_EndOfMatchPage
	{
	public:
		class UYWidget_CurrencyComponent*                          m_battleBonusXpPercentageCurrencyComponent;              // 0x03C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_winBonusXpPercentageCurrencyComponent;                 // 0x03C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_firstWinOfTheDayXpPercentageCurrencyComponent;         // 0x03D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_eliteInactiveTextBlock;                                // 0x03D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_elitePercentageCurrencyComponent;                      // 0x03E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_battleBonusInactiveOverlay;                            // 0x03E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_winBonusInactiveOverlay;                               // 0x03F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_firstWinOfTheDayInactiveOverlay;                       // 0x03F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_eliteInactiveOverlay;                                  // 0x0400(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_eliteTeamInactiveOverlay;                              // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UYWidget_EndOfMatchRewardColumn*>             m_rewardColumnWidgets;                                   // 0x0410(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UYWidget_EndOfMatchTotalRewardBox*>           m_totalRewardWidgets;                                    // 0x0420(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CSGI[0x10];                                  // 0x0430(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnRewardWidgetAnimationFinished();
		void OnColumnAnimationFinished(class UYWidget_EndOfMatchRewardColumn* column);
		void BP_PS4_SetUpEliteTeamContributors(const class FText& percentBonusFromEliteText, const class FText& eliteFromTeamText, int32_t NumElitePlayers);
		void BP_InitializeEliteFromTeamHint(const class FText& eliteFromTeamHintHeadline, const class FText& eliteFromTeamHintText);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchRequeueing
	 * Size -> 0x0288 (FullSize[0x04D8] - InheritedSize[0x0250])
	 */
	class UYWidget_EndOfMatchRequeueing : public UYWidget
	{
	public:
		unsigned char                                              UnknownData_GRTB[0x70];                                  // 0x0250(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYFleetTypeText>                             m_fleetTypeTexts;                                        // 0x02C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FText                                                m_battleBonusActiveText;                                 // 0x02D0(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_battleBonusInactiveText;                               // 0x02E8(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_playAgainText;                                         // 0x0300(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_waitingForOthersText;                                  // 0x0318(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_findingMorePlayersText;                                // 0x0330(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_notEnoughPlayersText;                                  // 0x0348(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_returnToLobbyText;                                     // 0x0360(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_battleBonusActiveColor;                                // 0x0378(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_battleBonusInactiveColor;                              // 0x0388(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_freeXPActiveColor;                                     // 0x0398(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_freeXPInactiveColor;                                   // 0x03A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_playAgainActiveColor;                                  // 0x03B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        m_playAgainInactiveColor;                                // 0x03C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_requeueingExpirationAlertTime;                         // 0x03D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KDK9[0x4];                                   // 0x03DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVerticalBox*                                        m_pvpTopVerticalBox;                                     // 0x03E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_fleetTextBlock;                                        // 0x03E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_battleBonusStatusTextBlock;                            // 0x03F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_battleBonusStatusBackgroundImage;                      // 0x03F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_freeXPTextBlock;                                       // 0x0400(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_freeXPImage;                                           // 0x0408(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_freeXPPercentageTextBlock;                             // 0x0410(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_freeXPBackgroundImage;                                 // 0x0418(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton*                                             m_battleBonusBuyButton;                                  // 0x0420(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_battleBonusCostWidget;                                 // 0x0428(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        m_pveTopVerticalBox;                                     // 0x0430(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_pveFleetTextBlock;                                     // 0x0438(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_pveEventNameTextBlock;                                 // 0x0440(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_playAgainTextBlock;                                    // 0x0448(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_playAgainTimerTextBlock;                               // 0x0450(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_playAgainBackgroundImage;                              // 0x0458(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_playAgainTimerBackgroundImage;                         // 0x0460(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_captainsInQueueTextBlock;                              // 0x0468(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UButton*                                             m_playAgainButton;                                       // 0x0470(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      m_playAgainHorizontalBox;                                // 0x0478(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYEndOfMatchMode                                           m_endOfMatchMode;                                        // 0x0480(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y0ET[0x57];                                  // 0x0481(0x0057) Fix size for supers

	public:
		void OnPurchaseBattleBonus();
		void OnPlayerRequeueing();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchRequeueing_PS4
	 * Size -> 0x00A8 (FullSize[0x0580] - InheritedSize[0x04D8])
	 */
	class UYWidget_EndOfMatchRequeueing_PS4 : public UYWidget_EndOfMatchRequeueing
	{
	public:
		struct FLinearColor                                        m_playAgainReadyToMatchMakeColor;                        // 0x04D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FText                                                m_RequeuedAndWaitForMoreCaptainsText;                    // 0x04E8(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_WaitingForCaptainsText;                                // 0x0500(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_WaitingForOneCaptainText;                              // 0x0518(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_CaptainsReadyText;                                     // 0x0530(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_NotEnoughCaptainsText;                                 // 0x0548(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class FText                                                m_ReturnToCustomLobbyText;                               // 0x0560(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_60NY[0x8];                                   // 0x0578(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPlayerRequeueing();
		void BP_ShowBattleBonusPurchaseBar(bool canBuyBattleBonus);
		void BP_SetRequeueingStateBar(EYRequeuingState requeueState, bool isReadyToMatchMake);
		void BP_SetDisplayForCustomMatchEOMScreen();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchSkippable
	 * Size -> 0x0008 (FullSize[0x0258] - InheritedSize[0x0250])
	 */
	class UYWidget_EndOfMatchSkippable : public UYWidget
	{
	public:
		float                                                      m_fadeInSpeed;                                           // 0x0250(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_isIntroAnimationForceFinishTriggered;                  // 0x0254(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DBUX[0x3];                                   // 0x0255(0x0003) MISSED OFFSET (PADDING)

	public:
		void BP_SetIntroAnimationToFinalState();
		void BP_ForceFinishIntroAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatch_PVE_RewardEntry
	 * Size -> 0x0128 (FullSize[0x0380] - InheritedSize[0x0258])
	 */
	class UYWidget_EndOfMatch_PVE_RewardEntry : public UYWidget_EndOfMatchSkippable
	{
	public:
		EYPVERewardType                                            m_rewardType;                                            // 0x0258(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYPVERewardLevel                                           m_rewardLevel;                                           // 0x0259(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYPVERewardUnlocked                                        m_rewardUnlockState;                                     // 0x025A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8LKZ[0x5];                                   // 0x025B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          m_standardRewardBackgroundTexture;                       // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          m_seasonalRewardBackgroundTexture;                       // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_highscoreCanvasPanel;                                  // 0x0270(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_highscoreHeaderTextBlock;                              // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_highscoreValueTextBlock;                               // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_bronzeHeaderTextBlock;                                 // 0x0288(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_rewardUnlockStatusImage;                               // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_rewardUnlockCheckmarkImage;                            // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        m_seasonalRewardCanvasPanel;                             // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_seasonalRewardUnlockStatusImage;                       // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_seasonalRewardStatusTextBlock;                         // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_seasonalRewardUnlockedTextBlock;                       // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_rewardImage;                                           // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_rewardTextBlock;                                       // 0x02C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_rewardSeperatorTextBlock;                              // 0x02D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_shipXpCurrencyWidget;                                  // 0x02D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_freeXpCurrencyWidget;                                  // 0x02E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_gpCurrencyWidget;                                      // 0x02E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_unlockStandardRewardAnimation;                         // 0x02F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_unlockSeasonalRewardAnimation;                         // 0x02F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V8HH[0x80];                                  // 0x0300(0x0080) MISSED OFFSET (PADDING)

	public:
		void SetupCurrencyAndRewardTextWidgets(const struct FYPVEEventRewardMeta& rewardData);
		void SetCurrencyData(const struct FYPVEEventRewardMeta& rewardData);
		void OnUnlockAnimationFinished();
		void BP_RewardSetupFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatch_PVE_ScoreBonusEntry
	 * Size -> 0x0020 (FullSize[0x0278] - InheritedSize[0x0258])
	 */
	class UYWidget_EndOfMatch_PVE_ScoreBonusEntry : public UYWidget_EndOfMatchSkippable
	{
	public:
		class UImage*                                              m_bonusTypeIcon;                                         // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_bonusHeadlineTextBlock;                                // 0x0260(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_bonusDescriptionTextBlock;                             // 0x0268(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_bonusValueTextBlock;                                   // 0x0270(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchPlayerStat
	 * Size -> 0x0058 (FullSize[0x02B0] - InheritedSize[0x0258])
	 */
	class UYWidget_EndOfMatchPlayerStat : public UYWidget_EndOfMatchSkippable
	{
	public:
		class UTextBlock*                                          m_valueTextBlock;                                        // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_valueTypeTextBlock;                                    // 0x0260(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_statCategoryTextBlock;                                 // 0x0268(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EYPlayerMatchStatComparison                                m_comparisonType;                                        // 0x0270(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6A5V[0x7];                                   // 0x0271(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYStatComparisonTypeColorMapping>            m_statComparisonTypeColorMappings;                       // 0x0278(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JS3F[0x28];                                  // 0x0288(0x0028) MISSED OFFSET (PADDING)

	public:
		void FadeStatColor(float FadeTime);
		void BP_StatSetupFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_ShipClassIcon
	 * Size -> 0x0018 (FullSize[0x0268] - InheritedSize[0x0250])
	 */
	class UYWidget_ShipClassIcon : public UYWidget
	{
	public:
		class UImage*                                              m_shipClassIcon;                                         // 0x0250(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_heroShipOverlayIcon;                                   // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_fullyResearchedShipOverlayIcon;                        // 0x0260(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchRewardColumn
	 * Size -> 0x00F0 (FullSize[0x0348] - InheritedSize[0x0258])
	 */
	class UYWidget_EndOfMatchRewardColumn : public UYWidget_EndOfMatchSkippable
	{
	public:
		class FScriptMulticastDelegate                             OnColumnAnimationFinished;                               // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UYWidget_ShipCard*                                   m_shipCardWidget;                                        // 0x0268(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_creditsHeadline;                                       // 0x0270(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_fullyResearchedHeadline;                               // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_fullyResearchedTextBlock;                              // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_baseRewardsValueTextBlock;                             // 0x0288(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_ShipClassIcon*                              m_baseRewardsFullyResearchedShipClassIcon;               // 0x0290(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_performanceRewardValueTextBlock;                       // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_ShipClassIcon*                              m_performanceRewardFullyResearchedShipClassIcon;         // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_battleBonusTextBlock;                                  // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_battleBonusPercentageCurrencyComponent;                // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_winBonusTextBlock;                                     // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_winBonusPercentageCurrencyComponent;                   // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_firstWinOfTheDayTextBlock;                             // 0x02C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_firstWinOfTheDayPercentageCurrencyComponent;           // 0x02D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_eliteTextBlock;                                        // 0x02D8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_elitePercentageCurrencyComponent;                      // 0x02E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_eliteFromTeamTextBlock;                                // 0x02E8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_eliteFromTeamPercentageCurrencyComponent;              // 0x02F0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_intermediateResultCurrencyWidget;                      // 0x02F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_totalResultCurrencyWidget;                             // 0x0300(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                m_defaultEmptyText;                                      // 0x0308(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FSlateColor                                         m_defaultColumnValueColor;                               // 0x0320(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void BroadcastColumnAnimationFinished();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_EndOfMatchTotalRewardBox
	 * Size -> 0x00C8 (FullSize[0x0320] - InheritedSize[0x0258])
	 */
	class UYWidget_EndOfMatchTotalRewardBox : public UYWidget_EndOfMatchSkippable
	{
	public:
		class FScriptMulticastDelegate                             OnFadeInAnimationFinished;                               // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFadeInAnimationStarted;                                // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FText                                                m_headline;                                              // 0x0278(0x0018) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		EYUICurrency                                               m_currencyType;                                          // 0x0290(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PSOO[0x3];                                   // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_animateInTimeOffsetSeconds;                            // 0x0294(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_fadeInAnimation;                                       // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetAnimation*                                    m_glowAnimation;                                         // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_CurrencyComponent*                          m_resultCurrencyWidget;                                  // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_amountTextBlock;                                       // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_includedFromHeroShipNotification;                      // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_headlineTextBlock;                                     // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateColor                                         m_shipXPColor;                                           // 0x02C8(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSlateColor                                         m_freeXPColor;                                           // 0x02F0(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XFW8[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetData(int32_t currencyValue, EYUICurrency currencyType, int32_t amountFromHeroShips);
		void OnFadeInStarted();
		void OnFadeInFinished();
		void OnAnimateInDelayed();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_GenericDropdown
	 * Size -> 0x0080 (FullSize[0x02D0] - InheritedSize[0x0250])
	 */
	class UYWidget_GenericDropdown : public UYWidget
	{
	public:
		unsigned char                                              UnknownData_VGWA[0x70];                                  // 0x0250(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      m_items;                                                 // 0x02C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void OnSelectedItem(const class FString& SelectedItem);
		void BP_SetSelectedItem(const class FString& SelectedItem);
		void BP_SetItems(TArray<class FString> items);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_GenericPopup
	 * Size -> 0x0100 (FullSize[0x0350] - InheritedSize[0x0250])
	 */
	class UYWidget_GenericPopup : public UYWidget
	{
	public:
		unsigned char                                              UnknownData_1DJS[0x100];                                 // 0x0250(0x0100) MISSED OFFSET (PADDING)

	public:
		void Deny();
		void BP_OnSetData(const struct FYGenericPopupData& Data);
		void Accept();
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_ShipCard
	 * Size -> 0x0090 (FullSize[0x02E0] - InheritedSize[0x0250])
	 */
	class UYWidget_ShipCard : public UYWidget
	{
	public:
		struct FSlateColor                                         m_normalShipColor;                                       // 0x0250(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSlateColor                                         m_heroShipColor;                                         // 0x0278(0x0028) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_tierTextBlock;                                         // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UYWidget_ShipClassIcon*                              m_shipClassIcon;                                         // 0x02A8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_shipNameTextBlock;                                     // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              m_shipImage;                                             // 0x02B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_shipBackground;                                        // 0x02C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             m_heroShipBackground;                                    // 0x02C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UImage*>                                      m_decoLines;                                             // 0x02D0(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void BP_PS4_SetTierIcon(int32_t tier);
		void BP_PS4_SetShipIcon(EYShipBaseClass shipclass, bool IsHeroShipStatus, bool IsVeteranStatus);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWidget_SimpleToolTip
	 * Size -> 0x0010 (FullSize[0x0260] - InheritedSize[0x0250])
	 */
	class UYWidget_SimpleToolTip : public UYWidget
	{
	public:
		class UTextBlock*                                          m_headlineTextBlock;                                     // 0x0250(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          m_descriptionTextBlock;                                  // 0x0258(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetupToolTip(const class FText& headlineText, const class FText& descriptionText);
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YWorldSettings
	 * Size -> 0x0028 (FullSize[0x0618] - InheritedSize[0x05F0])
	 */
	class AYWorldSettings : public AWorldSettings
	{
	public:
		bool                                                       m_disableDefaultMusicManagerEvents;                      // 0x05F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NQIQ[0x7];                                   // 0x05F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FYCharacterRenderLevelSet>                   m_characterRenderLevelSet;                               // 0x05F8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class ACameraActor*>                                m_performanceCaptureCameraActors;                        // 0x0608(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class DreadGame.YXPManager
	 * Size -> 0x0040 (FullSize[0x0138] - InheritedSize[0x00F8])
	 */
	class UYXPManager : public UActorComponent
	{
	public:
		struct FYMatchXPInfo                                       m_matchXPInfo;                                           // 0x00F8(0x0038) Net, RepNotify, Protected, NativeAccessSpecifierProtected
		class AYPlayerReplicationInfo*                             m_owner;                                                 // 0x0130(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_ReplicateMatchXPInfo();
		void Initialize();
		int32_t GetShipXP(int32_t shipID);
		int32_t GetFreeXP();
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
